// =================================================================
// FILE: src\app\admin\dashboard\page.tsx
// =================================================================

"use client"
import { useTranslation } from '@/hooks/useTranslation';

export default function AdminDashboardPage() {
const { t } = useTranslation();

return (
<div>
<h1 className="text-3xl font-bold text-white mb-4">{t('admin_dashboard')}</h1>
<p className="text-brand-muted">{t('welcome_to_admin_area')}</p>
<div className="mt-8 grid grid-cols-1 md:grid-cols-3 gap-6">
<div className="p-6 bg-brand-secondary rounded-lg">
<h3 className="font-bold text-white">{t('manage_users')}</h3>
<p className="text-sm text-brand-muted mt-2">{t('view_and_edit_user_roles')}</p>
</div>
<div className="p-6 bg-brand-secondary rounded-lg">
<h3 className="font-bold text-white">{t('manage_matches')}</h3>
<p className="text-sm text-brand-muted mt-2">{t('update_match_details')}</p>
</div>
<div className="p-6 bg-brand-secondary rounded-lg">
<h3 className="font-bold text-white">{t('view_analytics')}</h3>
<p className="text-sm text-brand-muted mt-2">{t('check_site_traffic')}</p>
</div>
</div>
</div>
);
}

// =================================================================
// FILE: src\app\admin\layout.tsx
// =================================================================

import { getServerSession } from "next-auth/next";
import { authOptions } from "@/app/api/auth/[...nextauth]/route";
import { redirect } from "next/navigation";
import AdminSidebar from "@/components/admin/AdminSidebar";
import { LanguageProvider } from "@/context/LanguageContext";

export default async function AdminLayout({
children,
}: {
children: React.ReactNode;
}) {
const session = await getServerSession(authOptions);

if (!session) {

redirect("/login?error=Forbidden");
}

return (
<LanguageProvider>
<div className="flex min-h-screen">
<AdminSidebar />
<main className="flex-1 p-8 bg-brand-dark">
{children}
</main>
</div>
</LanguageProvider>
);
}

// =================================================================
// FILE: src\app\admin\news\create\page.tsx
// =================================================================

"use client";

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { useMutation } from '@tanstack/react-query';
import axios from 'axios';
import toast from 'react-hot-toast';
import Link from '@/components/StyledLink';
import Image from 'next/image';
import { UploadCloud, XCircle } from 'lucide-react';

import RichTextEditor from '@/components/admin/RichTextEditor';

export default function CreateNewsPostPage() {
const router = useRouter();

const [title, setTitle] = useState('');
const [content, setContent] = useState('');
const [status, setStatus] = useState<'draft' | 'published'>('draft');
const [metaTitle, setMetaTitle] = useState('');
const [metaDescription, setMetaDescription] = useState('');
const [featuredImage, setFeaturedImage] = useState<string | null>(null);
const [isUploading, setIsUploading] = useState(false);
const [imageTitle, setImageTitle] = useState('');
const [imageAltText, setImageAltText] = useState('');
const [sport, setSport] = useState('football');

const handleImageUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
const file = e.target.files?.[0];
if (!file) return;

setIsUploading(true);
const formData = new FormData();
formData.append('file', file);

try {
const { data } = await axios.post('/api/upload', formData);
setFeaturedImage(data.url);
toast.success('Image uploaded!');
} catch (error) {
toast.error('Image upload failed.');
} finally {
setIsUploading(false);
}
};

const createPostMutation = useMutation({
mutationFn: (newPost: {
title: string;
content: string;
status: string;
metaTitle?: string;
metaDescription?: string;
featuredImage?: string | null;
featuredImageTitle?: string;
featuredImageAltText?: string;
sport: string,

}) => {
return axios.post('/api/posts', newPost);
},
onSuccess: () => {
toast.success('Post created successfully!');
router.push('/admin/news');
router.refresh();
},
onError: (error: any) => {
toast.error(error.response?.data?.error || 'Failed to create post.');
}
});

const handleSubmit = (e: React.FormEvent) => {
e.preventDefault();
if (!title.trim() || !content.trim()) {
toast.error('Title and content cannot be empty.');
return;
}
createPostMutation.mutate({
title,
content,
status,
featuredImage,
metaTitle,
metaDescription,
featuredImageTitle: imageTitle,
featuredImageAltText: imageAltText,
sport,
});
};

return (
<div>
<div className="flex justify-between items-center mb-6">
<h1 className="text-3xl font-bold text-white">Create New Post</h1>
</div>

<form onSubmit={handleSubmit} className="bg-brand-secondary p-6 rounded-lg space-y-6">

{}
<div className="p-4 border border-gray-600 rounded-lg">
<label className="block text-sm font-medium text-brand-light mb-2">Featured Image</label>
<div className="mt-2 flex justify-center rounded-lg border border-dashed border-gray-600 px-6 py-10">
{featuredImage ? (
<div className="relative group w-full h-64">
<Image src={featuredImage} alt={imageAltText || 'Featured preview'} layout="fill" objectFit="contain" />
<button
type="button"
onClick={() => setFeaturedImage(null)}
className="absolute top-2 right-2 bg-red-600 rounded-full p-1 text-white opacity-0 group-hover:opacity-100 transition-opacity"
>
<XCircle size={20} />
</button>
</div>
) : (
<div className="text-center">
<UploadCloud className="mx-auto h-12 w-12 text-gray-500" />
<div className="mt-4 flex text-sm leading-6 text-gray-400">
<label htmlFor="file-upload" className="relative cursor-pointer rounded-md font-semibold text-brand-purple focus-within:outline-none focus-within:ring-2 focus-within:ring-brand-purple focus-within:ring-offset-2 focus-within:ring-offset-brand-dark hover:text-brand-purple/80">
<span>{isUploading ? 'Uploading...' : 'Upload a file'}</span>
<input id="file-upload" name="file-upload" type="file" className="sr-only" onChange={handleImageUpload} disabled={isUploading} accept="image}
<div>
<label htmlFor="title" className="block text-sm font-medium text-brand-light mb-2">Title</label>
<input id="title" type="text" value={title} onChange={(e) => setTitle(e.target.value)} required className="w-full p-3 rounded bg-gray-700 text-white border border-gray-600 focus:outline-none focus:ring-2 focus:ring-brand-purple" />
</div>

{}
<div>
<label className="block text-sm font-medium text-brand-light mb-2">Content</label>
<RichTextEditor value={content} onChange={setContent} />
</div>

{}
<div className="space-y-4 p-4 border border-gray-600 rounded-lg">
<h3 className="text-lg font-semibold text-white">SEO Settings</h3>
<div>
<label htmlFor="metaTitle" className="block text-sm font-medium text-brand-light mb-2">Meta Title</label>
<input id="metaTitle" type="text" value={metaTitle} onChange={(e) => setMetaTitle(e.target.value)} placeholder="e.g., Ultimate Guide to Sunday's Match" className="w-full p-3 rounded bg-gray-800 text-white border border-gray-600 focus:outline-none focus:ring-2 focus:ring-brand-purple" />
<p className="text-xs text-brand-muted mt-1">Recommended: 50-60 characters.</p>
</div>
<div>
<label htmlFor="metaDescription" className="block text-sm font-medium text-brand-light mb-2">Meta Description</label>
<textarea id="metaDescription" rows={3} value={metaDescription} onChange={(e) => setMetaDescription(e.target.value)} placeholder="A brief summary for search engines..." className="w-full p-3 rounded bg-gray-800 text-white border border-gray-600 focus:outline-none focus:ring-2 focus:ring-brand-purple" />
<p className="text-xs text-brand-muted mt-1">Recommended: 150-160 characters.</p>
</div>
</div>

{}
<div>
<label htmlFor="status" className="block text-sm font-medium text-brand-light mb-2">Status</label>
<select id="status" value={status} onChange={(e) => setStatus(e.target.value as 'draft' | 'published')} className="w-full p-3 rounded bg-gray-700 text-white border border-gray-600 focus:outline-none focus:ring-2 focus:ring-brand-purple">
<option value="draft">Draft</option>
<option value="published">Published</option>
</select>
</div>

<div>
<label htmlFor="sport" className="block text-sm font-medium text-brand-light mb-2">Sport Category</label>
<select
id="sport"
value={sport}
onChange={(e) => setSport(e.target.value)}
className="w-full p-3 rounded bg-gray-700 text-white ..."
>
<option value="football">Football</option>
<option value="basketball">Basketball</option>
<option value="tennis">Tennis</option>
<option value="general">General</option>
</select>
</div>

{}
<div className="flex justify-end gap-4 pt-4 border-t border-gray-600">
<Link href="/admin/news" className="bg-gray-600 text-white font-bold py-2 px-4 rounded-lg hover:opacity-90">Cancel</Link>
<button type="submit" disabled={createPostMutation.isPending || isUploading} className="bg-brand-purple text-white font-bold py-2 px-4 rounded-lg hover:opacity-90 disabled:opacity-50 disabled:cursor-not-allowed">
{createPostMutation.isPending ? 'Saving...' : 'Save Post'}
</button>
</div>
</form>
</div>
);
}

// =================================================================
// FILE: src\app\admin\news\edit\[postId]\page.tsx
// =================================================================

"use client";

import { useState, useEffect } from 'react';
import { useRouter, useParams } from 'next/navigation';
import { useQuery, useMutation } from '@tanstack/react-query';
import axios from 'axios';
import toast from 'react-hot-toast';
import Link from '@/components/StyledLink';
import RichTextEditor from '@/components/admin/RichTextEditor';
import { IPost } from '@/models/Post';

const fetchPost = async (postId: string): Promise<IPost> => {
const { data } = await axios.get(`/api/posts/${postId}`);
return data;
};

export default function EditNewsPostPage() {
const router = useRouter();
const params = useParams();
const postId = params.postId as string;

const [title, setTitle] = useState('');
const [content, setContent] = useState('');
const [status, setStatus] = useState<'draft' | 'published'>('draft');

const { data: postData, isLoading, isError } = useQuery<IPost>({
queryKey: ['post', postId],
queryFn: () => fetchPost(postId),
enabled: !!postId,
});

useEffect(() => {
if (postData) {
setTitle(postData.title);
setContent(postData.content);
setStatus(postData.status);
}
}, [postData]);

const updatePostMutation = useMutation({
mutationFn: (updatedPost: { title: string; content: string; status: string; }) => {
return axios.put(`/api/posts/${postId}`, updatedPost);
},
onSuccess: () => {
toast.success('Post updated successfully!');
router.push('/admin/news');
router.refresh();
},
onError: (error: any) => {
const errorMessage = error.response?.data?.error || 'Failed to update post.';
toast.error(errorMessage);
}
});

const handleSubmit = (e: React.FormEvent) => {
e.preventDefault();
if (!title.trim() || !content.trim()) {
toast.error('Title and content cannot be empty.');
return;
}
updatePostMutation.mutate({ title, content, status });
};

if (isLoading) return <p className="text-brand-muted">Loading post data...</p>;
if (isError) return <p className="text-red-400">Failed to load post data.</p>;

return (
<div>
<div className="flex justify-between items-center mb-6">
<h1 className="text-3xl font-bold text-white">Edit Post</h1>
<Link href="/admin/news" className="text-sm text-brand-muted hover:text-white">
← Back to News List
</Link>
</div>

<form onSubmit={handleSubmit} className="bg-brand-secondary p-6 rounded-lg space-y-6">
{}
<div>
<label htmlFor="title" className="block text-sm font-medium text-brand-light mb-2">Title</label>
<input id="title" type="text" value={title} onChange={(e) => setTitle(e.target.value)} className="w-full p-3 rounded bg-gray-700 text-white border border-gray-600 focus:outline-none focus:ring-2 focus:ring-brand-purple" required/>
</div>

{}
<div>
<label className="block text-sm font-medium text-brand-light mb-2">Content</label>
{}
{content && <RichTextEditor value={content} onChange={setContent} />}
</div>

{}
<div>
<label htmlFor="status" className="block text-sm font-medium text-brand-light mb-2">Status</label>
<select id="status" value={status} onChange={(e) => setStatus(e.target.value as 'draft' | 'published')} className="w-full p-3 rounded bg-gray-700 text-white border border-gray-600 focus:outline-none focus:ring-2 focus:ring-brand-purple">
<option value="draft">Draft</option>
<option value="published">Published</option>
</select>
</div>

{}
<div className="flex justify-end gap-4">
<Link href="/admin/news" className="bg-gray-600 text-white font-bold py-2 px-4 rounded-lg hover:opacity-90 transition-opacity">Cancel</Link>
<button type="submit" disabled={updatePostMutation.isPending} className="bg-brand-purple text-white font-bold py-2 px-4 rounded-lg hover:opacity-90 transition-opacity disabled:opacity-50 disabled:cursor-not-allowed">
{updatePostMutation.isPending ? 'Saving...' : 'Save Changes'}
</button>
</div>
</form>
</div>
);
}

// =================================================================
// FILE: src\app\admin\news\page.tsx
// =================================================================

"use client";

import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import axios from 'axios';
import Link from '@/components/StyledLink';
import { PlusCircle, Edit, Trash2 } from 'lucide-react';
import { format } from 'date-fns';
import { IPost } from '@/models/Post';
import toast from 'react-hot-toast';

const fetchPosts = async (): Promise<IPost[]> => {
const { data } = await axios.get('/api/posts');
return data;
};

export default function AdminNewsPage() {
const queryClient = useQueryClient();

const { data: posts, isLoading, error } = useQuery<IPost[]>({
queryKey: ['adminPosts'],
queryFn: fetchPosts,
});

const deleteMutation = useMutation({
mutationFn: (postId: string) => axios.delete(`/api/posts/${postId}`),
onSuccess: () => {
queryClient.invalidateQueries({ queryKey: ['adminPosts'] });

toast.success('Post deleted successfully!');
},
onError: (error: any) => {

const message = error.response?.data?.message || 'Error deleting post.';
toast.error(message);
}
});

const handleDelete = (postId: string) => {
if (window.confirm('Are you sure you want to delete this post?')) {
deleteMutation.mutate(postId);
}
};

if (isLoading) return <p className="text-brand-muted">Loading posts...</p>;
if (error) return <p className="text-red-400">Failed to load posts.</p>;

return (
<div>
<div className="flex justify-between items-center mb-6">
<h1 className="text-3xl font-bold text-white">Manage News</h1>
<Link href="/admin/news/create" className="flex items-center gap-2 bg-brand-purple text-white font-bold py-2 px-4 rounded-lg hover:opacity-90 transition-opacity">
<PlusCircle size={20} />
<span>New Post</span>
</Link>
</div>

<div className="bg-brand-secondary rounded-lg overflow-hidden">
<table className="w-full text-left text-brand-light">
<thead className="bg-gray-800/50 text-sm text-brand-muted uppercase">
<tr>
<th className="p-4">Title</th>
<th className="p-4">Status</th>
<th className="p-4">Created At</th>
<th className="p-4">Actions</th>
</tr>
</thead>
<tbody>
{posts?.map(post => (
<tr key={post._id as string} className="border-t border-gray-700/50">
<td className="p-4 font-medium">{post.title}</td>
<td className="p-4">
<span className={`px-2 py-1 text-xs font-semibold rounded-full ${post.status === 'published' ? 'bg-green-500/20 text-green-400' : 'bg-yellow-500/20 text-yellow-400'}`}>
{post.status}
</span>
</td>
<td className="p-4 text-brand-muted">{format(new Date(post.createdAt), 'dd MMM yyyy')}</td>
<td className="p-4 flex gap-3">
<Link href={`/admin/news/edit/${post._id}`} className="text-blue-400 hover:text-blue-300"><Edit size={18} /></Link>
<button onClick={() => handleDelete(post._id as string)} className="text-red-400 hover:text-red-300"><Trash2 size={18} /></button>
</td>
</tr>
))}
</tbody>
</table>
</div>
</div>
);
}

// =================================================================
// FILE: src\app\api\auth\[...nextauth]\route.ts
// =================================================================

import NextAuth, { NextAuthOptions } from "next-auth";

import { MongoDBAdapter } from "@auth/mongodb-adapter";
import clientPromise from "@/lib/mongoClient";

import GoogleProvider from "next-auth/providers/google";
import CredentialsProvider from "next-auth/providers/credentials";

import dbConnect from "@/lib/dbConnect";
import User, { IUser } from "@/models/User";
import bcrypt from "bcrypt";

export const authOptions: NextAuthOptions = {
adapter: MongoDBAdapter(clientPromise),

providers: [
GoogleProvider({
clientId: process.env.GOOGLE_CLIENT_ID!,
clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
}),
CredentialsProvider({
name: 'Credentials',
credentials: { },
async authorize(credentials: any) {
if (!credentials?.email || !credentials.password) {
throw new Error('Please enter an email and password');
}

await dbConnect();

const user = await User.findOne({ email: credentials.email }).select('+password');

if (!user || !user.password) {
throw new Error('Invalid credentials');
}

const isPasswordCorrect = await bcrypt.compare(
credentials.password,
user.password
);

if (!isPasswordCorrect) {
throw new Error('Invalid credentials');
}

return user;
}
})
],

session: { strategy: "jwt" },

callbacks: {

jwt: async ({ token, user }) => {
if (user) {
const u = user as IUser;
token.role = u.role;
token.id = u.id;
}
return token;
},

session: async ({ session, token }) => {
if (session?.user) {
session.user.role = token.role as 'user' | 'admin';
session.user.id = token.id as string;
}
return session;
},
},

pages: { signIn: "/login" },
secret: process.env.NEXT_PUBLIC_NEXTAUTH_SECRET,
};

const handler = NextAuth(authOptions);
export { handler as GET, handler as POST };

// =================================================================
// FILE: src\app\api\countries\route.ts
// =================================================================

import { NextResponse } from 'next/server';
import axios from 'axios';
import { Country } from '@/types/api-football';

export async function GET() {
const options = {
method: 'GET',
url: `${process.env.NEXT_PUBLIC_API_FOOTBALL_HOST}/countries`,
headers: {

'x-apisports-key': process.env.NEXT_PUBLIC_API_FOOTBALL_KEY,
},
};

try {
const response = await axios.request(options);

const transformedCountries: Country[] = response.data.response

.filter((country: any) => country.name && country.code && country.flag)

.map((country: any) => ({
name: country.name,
code: country.code,
flagUrl: country.flag,
}));

transformedCountries.sort((a, b) => a.name.localeCompare(b.name));

return NextResponse.json(transformedCountries);

} catch (error) {
console.error("Error fetching countries:", error);
return NextResponse.json(
{ error: 'Failed to fetch country data.' },
{ status: 500 }
);
}
}

// =================================================================
// FILE: src\app\api\directory\teams\route.ts
// =================================================================

import { NextResponse } from 'next/server';
import axios from 'axios';

const POPULAR_LEAGUE_IDS = [
39,
140,
135,
78,
61,
88,
94,
253,
2,
];

const season = new Date().getFullYear();

export async function GET() {
const options = (leagueId: number) => ({
method: 'GET',
url: `${process.env.NEXT_PUBLIC_API_FOOTBALL_HOST}/teams`,
params: { league: leagueId, season: season },
headers: { 'x-apisports-key': process.env.NEXT_PUBLIC_API_FOOTBALL_KEY },
});

try {

const teamPromises = POPULAR_LEAGUE_IDS.map(id => axios.request(options(id)));
const responses = await Promise.allSettled(teamPromises);

const allTeamsResponses = responses
.filter(result => result.status === 'fulfilled')
.flatMap(result => (result as PromiseFulfilledResult<any>).value.data.response);

const uniqueTeams = Array.from(new Map(allTeamsResponses.map(item => [item.team.id, item])).values());

uniqueTeams.sort((a, b) => a.team.name.localeCompare(b.team.name));

return NextResponse.json(uniqueTeams);

} catch (error) {
console.error("Error fetching teams for directory:", error);
return NextResponse.json(
{ error: 'Failed to fetch teams data.' },
{ status: 500 }
);
}
}

// =================================================================
// FILE: src\app\api\find-live-matches\route.ts
// =================================================================

import { NextResponse } from 'next/server';
import axios from 'axios';

export async function GET() {
const options = {
method: 'GET',
url: `${process.env.NEXT_PUBLIC_API_FOOTBALL_HOST}/fixtures`,
params: { live: 'all' },
headers: {
'x-apisports-key': process.env.NEXT_PUBLIC_API_FOOTBALL_KEY,
},
};

try {
const response = await axios.request(options);

return NextResponse.json(response.data.response);
} catch (error) {
console.error("Error fetching live matches:", error);
return NextResponse.json({ error: 'Failed to fetch live matches' }, { status: 500 });
}
}

// =================================================================
// FILE: src\app\api\fixtures\route.ts
// =================================================================

import { NextResponse } from 'next/server';
import axios from 'axios';
import { format, addDays } from 'date-fns';

export async function GET(request: Request) {
const { searchParams } = new URL(request.url);
const leagueId = searchParams.get('league');
const date = searchParams.get('date');
const season = searchParams.get('season');

const axiosOptions = (params: object) => ({
method: 'GET',
url: `${process.env.NEXT_PUBLIC_API_FOOTBALL_HOST}/fixtures`,
params,
headers: {
'x-apisports-key': process.env.NEXT_PUBLIC_API_FOOTBALL_KEY,
},
});

try {

if (leagueId && season) {
console.log(`API: Fetching all fixtures for league ${leagueId}, season ${season}`);
const response = await axios.request(axiosOptions({
league: leagueId,
season: season,
}));

const sortedMatches = response.data.response.sort((a: any, b: any) =>
new Date(a.fixture.date).getTime() - new Date(b.fixture.date).getTime()
);
return NextResponse.json(sortedMatches);
}

if (leagueId && date) {
console.log(`API: Fetching fixtures for league ${leagueId}, date ${date}`);
const response = await axios.request(axiosOptions({
league: leagueId,
season: new Date(date).getFullYear().toString(),
date: date,
}));
return NextResponse.json(response.data.response);
}

if (leagueId) {
console.log(`API: Fetching upcoming fixtures for league ${leagueId}`);
const today = format(new Date(), 'yyyy-MM-dd');
const nextSevenDays = format(addDays(new Date(), 7), 'yyyy-MM-dd');
const response = await axios.request(axiosOptions({
league: leagueId,
season: new Date().getFullYear().toString(),
from: today,
to: nextSevenDays,
}));
return NextResponse.json(response.data.response);
}

if (!leagueId) {

if (date) {
console.log(`API: Fetching global fixtures for date ${date}`);
const response = await axios.request(axiosOptions({ date: date }));
return NextResponse.json(response.data.response);
}

console.log('API: Fetching global matches (live, today, tomorrow)');
const todayStr = format(new Date(), 'yyyy-MM-dd');
const tomorrowStr = format(addDays(new Date(), 1), 'yyyy-MM-dd');

const [liveResponse, todayResponse, tomorrowResponse] = await Promise.all([
axios.request(axiosOptions({ live: 'all' })),
axios.request(axiosOptions({ date: todayStr })),
axios.request(axiosOptions({ date: tomorrowStr })),
]);

const allMatches = [
...liveResponse.data.response,
...todayResponse.data.response,
...tomorrowResponse.data.response
];

const uniqueMatches = Array.from(new Map(allMatches.map(m => [m.fixture.id, m])).values());
return NextResponse.json(uniqueMatches);
}

return NextResponse.json([]);

} catch (error) {
console.error("Error in /api/fixtures:", error);
return NextResponse.json({ error: 'Failed to fetch fixture data.' }, { status: 500 });
}
}

// =================================================================
// FILE: src\app\api\global-live\route.ts
// =================================================================

import { NextResponse } from 'next/server';
import axios from 'axios';

export async function GET() {
const options = {
method: 'GET',
url: `${process.env.NEXT_PUBLIC_API_FOOTBALL_HOST}/fixtures`,

params: { live: 'all' },
headers: {
'x-apisports-key': process.env.NEXT_PUBLIC_API_FOOTBALL_KEY,
},
};

try {
const response = await axios.request(options);

return NextResponse.json(response.data.response);
} catch (error) {
console.error("Error fetching global live matches:", error);
return NextResponse.json({ error: 'Failed to fetch live matches' }, { status: 500 });
}
}

// =================================================================
// FILE: src\app\api\leagues\route.ts
// =================================================================

import { NextResponse } from 'next/server';
import axios from 'axios';
import { League } from '@/types/api-football';
import { generateLeagueSlug } from '@/lib/generate-league-slug';

const POPULAR_LEAGUE_IDS = new Set([
39,
140,
135,
78,
61,
88,
94,
253,
203,
]);

const POPULAR_CUP_IDS = new Set([
2,
3,
531,
45,
9,
11,
]);

export async function GET(request: Request) {
const { searchParams } = new URL(request.url);
const country = searchParams.get('country');
const type = searchParams.get('type');
const fetchAll = searchParams.get('fetchAll');

const params: { current: string; country?: string, type?: string } = {
current: 'true',
};

if (country) {
params.country = country;
}
if (type) {
params.type = type;
}

const options = {
method: 'GET',
url: `${process.env.NEXT_PUBLIC_API_FOOTBALL_HOST}/leagues`,
params: params,
headers: {
'x-apisports-key': process.env.NEXT_PUBLIC_API_FOOTBALL_KEY,
},
};

try {
const response = await axios.request(options);
let allLeagues = response.data.response;

if (!country && !fetchAll) {
const popularIds = type === 'cup' ? POPULAR_CUP_IDS : POPULAR_LEAGUE_IDS;
allLeagues = allLeagues.filter((item: any) => popularIds.has(item.league.id));
}

const transformedData: League[] = allLeagues
.filter((item: any) => item.league.id && item.league.name && item.league.logo)
.map((item: any) => ({
id: item.league.id,
name: item.league.name,
logoUrl: item.league.logo,
countryName: item.country.name,
countryFlagUrl: item.country.flag,
type: item.league.type,
href: generateLeagueSlug(item.league.name, item.league.id),
}));

transformedData.sort((a, b) => a.name.localeCompare(b.name));

return NextResponse.json(transformedData);

} catch (error) {
console.error("Error fetching leagues:", error);
return NextResponse.json(
{ error: 'Failed to fetch league data.' },
{ status: 500 }
);
}
}

// =================================================================
// FILE: src\app\api\live-matches\route.ts
// =================================================================

import { NextResponse } from 'next/server';
import axios from 'axios';

export async function GET(request: Request) {
const { searchParams } = new URL(request.url);
const leagueId = searchParams.get('league');

if (!leagueId) {
return NextResponse.json({ error: 'League ID is required' }, { status: 400 });
}

const options = {
method: 'GET',
url: `${process.env.NEXT_PUBLIC_API_FOOTBALL_HOST}/fixtures`,
params: {
league: leagueId,
live: 'all',
},
headers: {
'x-apisports-key': process.env.NEXT_PUBLIC_API_FOOTBALL_KEY,
},
};

try {
const response = await axios.request(options);

return NextResponse.json(response.data.response);
} catch (error) {
console.error("Error fetching live matches:", error);
return NextResponse.json({ error: 'Failed to fetch live matches' }, { status: 500 });
}
}

// =================================================================
// FILE: src\app\api\live-odds\route.ts
// =================================================================

import { NextResponse } from 'next/server';
import axios from 'axios';

export async function GET() {

const options = {
method: 'GET',
url: `${process.env.NEXT_PUBLIC_API_FOOTBALL_HOST}/odds/live`,
params: { bet: '1' },
headers: { 'x-apisports-key': process.env.NEXT_PUBLIC_API_FOOTBALL_KEY },
};

try {
const response = await axios.request(options);

if (!response.data.response || response.data.response.length === 0) {
return NextResponse.json({}, { status: 200 });
}

const liveOddsObject = response.data.response.reduce((acc: any, fixtureData: any) => {
const fixtureId = fixtureData.fixture.id;
const bookmaker = fixtureData.bookmakers?.[0];
const matchWinnerBet = bookmaker?.bets.find((bet: any) => bet.id === 1);

if (matchWinnerBet) {
const odds = matchWinnerBet.values.reduce((oddAcc: any, curr: any) => {
if (curr.value === 'Home') oddAcc.home = curr.odd;
if (curr.value === 'Draw') oddAcc.draw = curr.odd;
if (curr.value === 'Away') oddAcc.away = curr.odd;
return oddAcc;
}, {});
acc[fixtureId] = odds;
}
return acc;
}, {});

return NextResponse.json(liveOddsObject, { status: 200 });

} catch (error) {
console.error('[API/LIVE-ODDS] Error fetching live odds:', error);
return NextResponse.json(
{ error: 'Failed to fetch live odds data from the provider.' },
{ status: 500 }
);
}
}

// =================================================================
// FILE: src\app\api\match-details\route.ts
// =================================================================

import { NextResponse } from 'next/server';
import axios from 'axios';

const fetchAllDataForFixture = async (fixtureId: string | number) => {
const options = (endpoint: string, params: object) => ({
method: 'GET',
url: `${process.env.NEXT_PUBLIC_API_FOOTBALL_HOST}/${endpoint}`,
params,
headers: { 'x-apisports-key': process.env.NEXT_PUBLIC_API_FOOTBALL_KEY },
});

const fixtureResponse = await axios.request(options('fixtures', { id: fixtureId }));
const fixtureData = fixtureResponse.data.response[0];

if (!fixtureData) {
throw new Error(`Fixture not found with ID: ${fixtureId}`);
}

const { league, teams } = fixtureData;
const { home: homeTeam, away: awayTeam } = teams;

const [eventsResponse, statsResponse, h2hResponse, predictionResponse, homeStatsResponse, awayStatsResponse] = await Promise.all([
axios.request(options('fixtures/events', { fixture: fixtureId })),
axios.request(options('fixtures/statistics', { fixture: fixtureId })),
axios.request(options('fixtures/headtohead', { h2h: `${homeTeam.id}-${awayTeam.id}` })),
axios.request(options('predictions', { fixture: fixtureId })),
axios.request(options('teams/statistics', { league: league.id, season: league.season, team: homeTeam.id })),
axios.request(options('teams/statistics', { league: league.id, season: league.season, team: awayTeam.id })),
]);

return {
fixture: fixtureData,
events: eventsResponse.data.response,
statistics: statsResponse.data.response,
h2h: h2hResponse.data.response,
analytics: {
prediction: predictionResponse.data.response[0] ?? null,
homeTeamStats: homeStatsResponse.data.response ?? null,
awayTeamStats: awayStatsResponse.data.response ?? null,
}
};
};

export async function GET(request: Request) {
const { searchParams } = new URL(request.url);

const fixtureId = searchParams.get('fixture');

if (!fixtureId) {
return NextResponse.json({ error: 'Fixture ID is required' }, { status: 400 });
}

try {
const matchDetails = await fetchAllDataForFixture(fixtureId);
return NextResponse.json(matchDetails);
} catch (error: any) {
console.error(`[API /match-details] Error for fixture ${fixtureId}:`, error.message);
return NextResponse.json({ error: 'Failed to fetch match details.' }, { status: 500 });
}
}

// =================================================================
// FILE: src\app\api\odds\route.ts
// =================================================================

import { NextResponse } from 'next/server';
import axios from 'axios';

export async function GET(request: Request) {
const { searchParams } = new URL(request.url);
const fixtureId = searchParams.get('fixture');

if (!fixtureId) {
return NextResponse.json({ error: 'Fixture ID is required' }, { status: 400 });
}

const options = {
method: 'GET',
url: `${process.env.NEXT_PUBLIC_API_FOOTBALL_HOST}/odds`,
params: {
fixture: fixtureId,
bookmaker: '8',
bet: '1'
},
headers: { 'x-apisports-key': process.env.NEXT_PUBLIC_API_FOOTBALL_KEY },
};

try {

const response = await axios.request(options);

if (!response.data.response || response.data.response.length === 0) {
console.log(`No odds found for fixture ${fixtureId}. Returning null.`);
return NextResponse.json(null, { status: 200 });
}

const bookmaker = response.data.response[0].bookmakers[0];

const matchWinnerBet = bookmaker.bets.find((bet: any) => bet.id === 1);

if (!matchWinnerBet || !matchWinnerBet.values) {
console.log(`"Match Winner" odds not available for fixture ${fixtureId}. Returning null.`);
return NextResponse.json(null, { status: 200 });
}

const odds = matchWinnerBet.values.reduce((acc: any, curr: any) => {
if (curr.value === 'Home') acc.home = curr.odd;
if (curr.value === 'Draw') acc.draw = curr.odd;
if (curr.value === 'Away') acc.away = curr.odd;
return acc;
}, {});

return NextResponse.json(odds, { status: 200 });

} catch (error) {

console.error(`[API/ODDS] Error fetching odds for fixture ${fixtureId}:`, error);
return NextResponse.json(
{ error: 'Failed to fetch odds data from the provider.' },
{ status: 500 }
);
}
}

// =================================================================
// FILE: src\app\api\posts\route.ts
// =================================================================

import { NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/app/api/auth/[...nextauth]/route';
import dbConnect from '@/lib/dbConnect';
import Post, { IPost } from '@/models/Post';
import slugify from 'slugify';

export async function GET(request: Request) {
const { searchParams } = new URL(request.url);
const status = searchParams.get('status');

const query: { status?: string } = {};
if (status) {
query.status = status;
}

try {
await dbConnect();
const posts = await Post.find(query).sort({ createdAt: -1 });
return NextResponse.json(posts);
} catch (error) {
console.error("Failed to fetch posts:", error);
return NextResponse.json({ error: 'Server error fetching posts' }, { status: 500 });
}
}

export async function POST(request: Request) {
const session = await getServerSession(authOptions);
if (session?.user?.role !== 'admin') {
return NextResponse.json({ error: 'Forbidden' }, { status: 403 });
}

try {
const body: Partial<IPost> = await request.json();
const { title, content, status, featuredImage, metaTitle, metaDescription, featuredImageTitle, featuredImageAltText } = body;

if (!title || !content) {
return NextResponse.json({ error: 'Title and content are required' }, { status: 400 });
}

await dbConnect();

const slug = slugify(title, { lower: true, strict: true });
const slugExists = await Post.findOne({ slug });
if (slugExists) {
return NextResponse.json({ error: `A post with the slug '${slug}' already exists. Please use a different title.` }, { status: 409 });
}

const newPost = new Post({
title,
content,
status,
slug,
author: session.user.name || 'Admin',
featuredImage,
metaTitle,
metaDescription,
featuredImageTitle,
featuredImageAltText,
});

await newPost.save();
return NextResponse.json(newPost, { status: 201 });

} catch (error) {
console.error("Failed to create post:", error);
return NextResponse.json({ error: 'Server error creating post' }, { status: 500 });
}
}

// =================================================================
// FILE: src\app\api\posts\[postId]\route.ts
// =================================================================

import { NextResponse } from 'next/server';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/app/api/auth/[...nextauth]/route';
import dbConnect from '@/lib/dbConnect';
import Post, { IPost } from '@/models/Post';

interface Params {
params: { postId: string };
}

export async function GET(request: Request, { params }: Params) {
const { postId } = params;
try {
await dbConnect();
const post = await Post.findById(postId);
if (!post) {
return NextResponse.json({ error: 'Post not found' }, { status: 404 });
}
return NextResponse.json(post);
} catch (error) {
return NextResponse.json({ error: 'Server error' }, { status: 500 });
}
}

export async function PUT(request: Request, { params }: Params) {
const session = await getServerSession(authOptions);
if (session?.user?.role !== 'admin') {
return NextResponse.json({ error: 'Forbidden' }, { status: 403 });
}

const { postId } = params;
try {
const body: Partial<IPost> = await request.json();
const { title, content, status, featuredImage, metaTitle, metaDescription, featuredImageTitle, featuredImageAltText } = body;

await dbConnect();

const updatedPost = await Post.findByIdAndUpdate(
postId,
{ title, content, status },
{ new: true, runValidators: true }
);

if (!updatedPost) {
return NextResponse.json({ error: 'Post not found' }, { status: 404 });
}

return NextResponse.json(updatedPost);
} catch (error) {
return NextResponse.json({ error: 'Server error updating post' }, { status: 500 });
}
}

export async function DELETE(request: Request, { params }: Params) {
const session = await getServerSession(authOptions);
if (session?.user?.role !== 'admin') {
return NextResponse.json({ error: 'Forbidden' }, { status: 403 });
}

const { postId } = params;
try {
await dbConnect();
const deletedPost = await Post.findByIdAndDelete(postId);
if (!deletedPost) {
return NextResponse.json({ error: 'Post not found' }, { status: 404 });
}
return NextResponse.json({ message: 'Post deleted successfully' });
} catch (error) {
return NextResponse.json({ error: 'Server error' }, { status: 500 });
}
}

// =================================================================
// FILE: src\app\api\predictions\route.ts
// =================================================================

import { NextResponse } from 'next/server';
import axios from 'axios';

export async function GET(request: Request) {
const { searchParams } = new URL(request.url);
const fixtureId = searchParams.get('fixture');

if (!fixtureId) {
return NextResponse.json({ error: 'Fixture ID is required' }, { status: 400 });
}

const options = {
method: 'GET',
url: `${process.env.NEXT_PUBLIC_API_FOOTBALL_HOST}/predictions`,
params: { fixture: fixtureId },
headers: {
'x-apisports-key': process.env.NEXT_PUBLIC_API_FOOTBALL_KEY,
},
};

try {
const response = await axios.request(options);
if (!response.data.response || response.data.response.length === 0) {
return NextResponse.json({ error: 'No prediction available.' }, { status: 404 });
}

const predictionData = response.data.response[0];

const transformedPrediction = {
teams: {
home: {
id: predictionData.teams.home.id,
name: predictionData.teams.home.name,
logo: predictionData.teams.home.logo,
},
away: {
id: predictionData.teams.away.id,
name: predictionData.teams.away.name,
logo: predictionData.teams.away.logo,
}
},
percent: {
home: parseInt(predictionData.predictions.percent.home.replace('%', '')),
draw: parseInt(predictionData.predictions.percent.draw.replace('%', '')),
away: parseInt(predictionData.predictions.percent.away.replace('%', '')),
}
};

return NextResponse.json(transformedPrediction);

} catch (error) {
console.error("Error fetching prediction:", error);
return NextResponse.json({ error: 'Failed to fetch prediction data.' }, { status: 500 });
}
}

// =================================================================
// FILE: src\app\api\sports\[sport]\fixtures\route.ts
// =================================================================

import { NextResponse } from 'next/server';
import { getSportService } from '@/services/sports';

export async function GET(
request: Request,
{ params }: { params: { sport: string } }
) {
const { searchParams } = new URL(request.url);
const sport = params.sport;

const queryParams: { [key: string]: any } = {};
searchParams.forEach((value, key) => {
queryParams[key] = value;
});

try {

const sportService = getSportService(sport);

const fixtures = await sportService.getFixtures(queryParams);

return NextResponse.json(fixtures);

} catch (error: any) {
console.error(`[API /${sport}/fixtures] Error:`, error.message);
return NextResponse.json(
{ error: `Failed to fetch fixture data for ${sport}.` },
{ status: 500 }
);
}
}

// =================================================================
// FILE: src\app\api\standings\route.ts
// =================================================================

import { NextResponse } from 'next/server';
import axios from 'axios';

type TeamStanding = {
rank: number;
team: { id: number; name: string; logo: string; };
points: number;
goalsDiff: number;
all: { played: number; win: number; draw: number; lose: number; };
description: string | null;
};

export async function GET(request: Request) {
const { searchParams } = new URL(request.url);
const leagueId = searchParams.get('league');
const season = searchParams.get('season') || new Date().getFullYear().toString();

if (!leagueId) {
return NextResponse.json({ error: 'League ID is required' }, { status: 400 });
}

const options = {
method: 'GET',
url: `${process.env.NEXT_PUBLIC_API_FOOTBALL_HOST}/standings`,
params: { league: leagueId, season: season },
headers: {
'x-apisports-key': process.env.NEXT_PUBLIC_API_FOOTBALL_KEY,
},
};

try {
const response = await axios.request(options);
if (!response.data.response || response.data.response.length === 0) {
return NextResponse.json({ league: null, standings: [] });
}

const data = response.data.response[0];

const leagueInfo = {
id: data.league.id,
name: data.league.name,
logo: data.league.logo,
};

const standings: TeamStanding[] = data.league.standings[0];

return NextResponse.json({ league: leagueInfo, standings });
} catch (error) {
console.error("Error fetching standings:", error);
return NextResponse.json({ error: 'Failed to fetch standings data' }, { status: 500 });
}
}

// =================================================================
// FILE: src\app\api\team-details\route.ts
// =================================================================

import { NextResponse } from 'next/server';
import { fetchTeamDetails } from '@/lib/data/team';

export async function GET(request: Request) {
const { searchParams } = new URL(request.url);
const teamId = searchParams.get('team');

if (!teamId) {
return NextResponse.json({ error: 'Team ID is required' }, { status: 400 });
}

const teamData = await fetchTeamDetails(teamId);

if (!teamData) {

return NextResponse.json({ error: 'Failed to fetch team details or team not found' }, { status: 500 });
}

return NextResponse.json(teamData);
}

// =================================================================
// FILE: src\app\api\teams\route.ts
// =================================================================

import { NextResponse } from 'next/server';
import axios from 'axios';

export async function GET(request: Request) {
const { searchParams } = new URL(request.url);
const leagueId = searchParams.get('league');
const season = searchParams.get('season');

if (!leagueId || !season) {
return NextResponse.json(
{ error: 'League ID and season are required' },
{ status: 400 }
);
}

const options = {
method: 'GET',
url: `${process.env.NEXT_PUBLIC_API_FOOTBALL_HOST}/teams`,
params: {
league: leagueId,
season: season,
},
headers: {
'x-apisports-key': process.env.NEXT_PUBLIC_API_FOOTBALL_KEY,
},
};

try {
const response = await axios.request(options);

return NextResponse.json(response.data.response);

} catch (error) {
console.error("Error fetching teams:", error);
return NextResponse.json(
{ error: 'Failed to fetch teams data.' },
{ status: 500 }
);
}
}

// =================================================================
// FILE: src\app\api\teams-by-country\route.ts
// =================================================================

import { NextResponse } from 'next/server';
import axios from 'axios';

const season = new Date().getFullYear();

const apiRequest = async (endpoint: string, params: object) => {
const options = {
method: 'GET',
url: `${process.env.NEXT_PUBLIC_API_FOOTBALL_HOST}/${endpoint}`,
params,
headers: { 'x-apisports-key': process.env.NEXT_PUBLIC_API_FOOTBALL_KEY },
};
const response = await axios.request(options);
return response.data.response;
};

export async function GET(request: Request) {
const { searchParams } = new URL(request.url);
const country = searchParams.get('country');

if (!country) {
return NextResponse.json({ error: 'Country parameter is required' }, { status: 400 });
}

try {

const leagues = await apiRequest('leagues', { country: country });
if (!leagues || leagues.length === 0) {
return NextResponse.json([]);
}

const leagueIds = leagues.map((l: any) => l.league.id);

const teamPromises = leagueIds.map(id => apiRequest('teams', { league: id, season: season }));
const responses = await Promise.allSettled(teamPromises);

const allTeamsResponses = responses
.filter(result => result.status === 'fulfilled' && result.value)
.flatMap(result => (result as PromiseFulfilledResult<any>).value);

const uniqueTeams = Array.from(new Map(allTeamsResponses.map(item => [item.team.id, item])).values());

uniqueTeams.sort((a, b) => a.team.name.localeCompare(b.team.name));

return NextResponse.json(uniqueTeams);

} catch (error) {
console.error(`Error fetching teams for country "${country}":`, error);
return NextResponse.json(
{ error: 'Failed to fetch teams data for this country.' },
{ status: 500 }
);
}
}

// =================================================================
// FILE: src\app\api\top-scorers\route.ts
// =================================================================

import { NextResponse } from 'next/server';
import axios from 'axios';

export async function GET(request: Request) {
const { searchParams } = new URL(request.url);
const leagueId = searchParams.get('league');
const season = searchParams.get('season');

if (!leagueId || !season) {
return NextResponse.json(
{ error: 'League ID and season are required' },
{ status: 400 }
);
}

const options = {
method: 'GET',
url: `${process.env.NEXT_PUBLIC_API_FOOTBALL_HOST}/players/topscorers`,
params: {
league: leagueId,
season: season,
},
headers: {
'x-apisports-key': process.env.NEXT_PUBLIC_API_FOOTBALL_KEY,
},
};

try {
const response = await axios.request(options);

return NextResponse.json(response.data.response);

} catch (error) {
console.error("Error fetching top scorers:", error);
return NextResponse.json(
{ error: 'Failed to fetch top scorers data.' },
{ status: 500 }
);
}
}

// =================================================================
// FILE: src\app\api\upcoming-matches\route.ts
// =================================================================

import { NextResponse } from 'next/server';
import axios from 'axios';
import { format, subDays, addDays } from 'date-fns';

export async function GET(request: Request) {
const { searchParams } = new URL(request.url);
const leagueId = searchParams.get('league');

if (!leagueId) {

return NextResponse.json({ error: 'League ID is required' }, { status: 400 });
}

const season = new Date().getFullYear().toString();
const today = format(new Date(), 'yyyy-MM-dd');
const nextSevenDays = format(addDays(new Date(), 7), 'yyyy-MM-dd');

const options = (params: object) => ({
method: 'GET',
url: `${process.env.NEXT_PUBLIC_API_FOOTBALL_HOST}/fixtures`,
params,
headers: { 'x-apisports-key': process.env.NEXT_PUBLIC_API_FOOTBALL_KEY },
});

try {

const upcomingResponse = await axios.request(options({
league: leagueId,
season: season,
from: today,
to: nextSevenDays,
}));

let matches = upcomingResponse.data.response;

if (matches.length === 0) {
console.log(`No upcoming matches for league ${leagueId}. Fetching recent results...`);
const finishedResponse = await axios.request(options({
league: leagueId,
season: season,
last: 5,
status: 'FT',
}));
matches = finishedResponse.data.response;
}

return NextResponse.json(matches);

} catch (error) {
console.error(`Error fetching matches for league ${leagueId}:`, error);
return NextResponse.json({ error: 'Failed to fetch match data' }, { status: 500 });
}
}

// =================================================================
// FILE: src\app\api\upload\route.ts
// =================================================================

import { NextResponse } from 'next/server';
import { S3Client, PutObjectCommand } from '@aws-sdk/client-s3';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/app/api/auth/[...nextauth]/route';
import sharp from 'sharp';
import crypto from 'crypto';

const s3Client = new S3Client({
region: process.env.NEXT_PUBLIC_AWS_S3_REGION as string,
credentials: {
accessKeyId: process.env.NEXT_PUBLIC_AWS_ACCESS_KEY_ID as string,
secretAccessKey: process.env.NEXT_PUBLIC_AWS_SECRET_ACCESS_KEY as string,
},
});

const generateFileName = (bytes = 32) => crypto.randomBytes(bytes).toString('hex');

export async function POST(request: Request) {

const session = await getServerSession(authOptions);
if (session?.user?.role !== 'admin') {
return NextResponse.json({ error: 'Forbidden' }, { status: 403 });
}

try {
const formData = await request.formData();
const file = formData.get('file') as File;

if (!file) {
return NextResponse.json({ error: 'No file provided.' }, { status: 400 });
}

const buffer = Buffer.from(await file.arrayBuffer());

const processedImageBuffer = await sharp(buffer)
.resize(1200, 630, { fit: 'cover' })
.webp({ quality: 80 })
.toBuffer();

const fileName = generateFileName();
const bucketName = process.env.NEXT_PUBLIC_AWS_S3_BUCKET_NAME as string;

const putObjectCommand = new PutObjectCommand({
Bucket: bucketName,
Key: fileName,
Body: processedImageBuffer,
ContentType: 'image/webp',
});

await s3Client.send(putObjectCommand);

const publicUrl = `https:

return NextResponse.json({
message: 'Image uploaded successfully',
url: publicUrl,
});

} catch (error) {
console.error('Error uploading to S3:', error);
return NextResponse.json({ error: 'Failed to upload image.' }, { status: 500 });
}
}

// =================================================================
// FILE: src\app\api\votes\route.ts
// =================================================================

import { NextResponse } from 'next/server';
import dbConnect from '@/lib/dbConnect';
import Vote from '@/models/Vote';

export async function GET(request: Request) {
console.log("requested here");

const { searchParams } = new URL(request.url);
const fixtureId = searchParams.get('fixture');

if (!fixtureId) {
return NextResponse.json({ error: 'Fixture ID is required' }, { status: 400 });
}

try {
await dbConnect();
const votes = await Vote.findOne({ fixtureId: Number(fixtureId) });
console.log(votes);

if (!votes) {

return NextResponse.json({ homeVotes: 0, drawVotes: 0, awayVotes: 0 });
}

return NextResponse.json(votes);
} catch (error) {
console.log(error);

return NextResponse.json({ error: 'Server error fetching votes' }, { status: 500 });
}
}

export async function POST(request: Request) {
const { fixtureId, vote } = await request.json();

if (!fixtureId || !['home', 'draw', 'away'].includes(vote)) {
return NextResponse.json({ error: 'Valid fixtureId and vote type are required' }, { status: 400 });
}

try {
await dbConnect();

const updatedVote = await Vote.findOneAndUpdate(
{ fixtureId: Number(fixtureId) },
{ $inc: { [`${vote}Votes`]: 1 } },
{
upsert: true,
new: true
}
);

return NextResponse.json(updatedVote);
} catch (error) {
return NextResponse.json({ error: 'Server error submitting vote' }, { status: 500 });
}
}

// =================================================================
// FILE: src\app\football\league\[...slug]\page.tsx
// =================================================================

import Header from '@/components/Header';
import Sidebar from '@/components/Sidebar';
import LeagueDetailView from '@/components/league-detail-view';
import { League } from '@/types/api-football';
import axios from 'axios';
import { notFound } from 'next/navigation';

const getLeagueIdFromSlug = (slug: string): string | null => {
if (!slug) return null;
const parts = slug.split('-');
const lastPart = parts[parts.length - 1];
return /^\d+$/.test(lastPart) ? lastPart : null;
};

async function getLeagueData(leagueId: string): Promise<any | null> {
try {
const { data } = await axios.get(`${process.env.NEXT_PUBLIC_API_FOOTBALL_HOST}/leagues?id=${leagueId}`, {
headers: { 'x-apisports-key': process.env.NEXT_PUBLIC_API_FOOTBALL_KEY },
});

if (!data.response || data.response.length === 0) {
return null;
}

return data.response[0];

} catch (error) {
console.error("Failed to fetch single league data:", error);
return null;
}
}

export async function generateMetadata({ params }: { params: { slug: string[] }}) {
const slug = params.slug.join('/');
const leagueId = getLeagueIdFromSlug(slug);
if (!leagueId) return { title: 'League Not Found' };

const leagueData = await getLeagueData(leagueId);
if (!leagueData) return { title: 'League Not Found' };

return {
title: `${leagueData.league.name} - Info, Fixtures & Standings`,
description: `All information about the ${leagueData.league.name}, including available seasons, fixtures, and full standings.`,
};
}

export default async function LeaguePage({ params }: { params: { slug: string[] } }) {
const slug = params.slug.join('/');
const leagueId = getLeagueIdFromSlug(slug);

if (!leagueId) {
notFound();
}

const leagueData = await getLeagueData(leagueId);

if (!leagueData) {
notFound();
}

return (
<div className="min-h-screen flex flex-col">
<Header />
<div className="flex flex-1">
<Sidebar />
<main className="flex-1 p-4 lg:p-8">
{}
<LeagueDetailView leagueData={leagueData} />
</main>
</div>
</div>
);
}

// =================================================================
// FILE: src\app\football\leagues\page.tsx
// =================================================================

"use client";

import { useState, useMemo, useEffect } from 'react';
import { useQuery } from '@tanstack/react-query';
import axios from 'axios';
import { League } from '@/types/api-football';
import Header from '@/components/Header';
import Sidebar from '@/components/Sidebar';
import DirectoryCard, { DirectoryCardSkeleton } from '@/components/DirectoryCard';
import Pagination from '@/components/Pagination';

export const dynamic = 'force-dynamic';

const ITEMS_PER_PAGE = 15;

const fetchAllLeagues = async (): Promise<League[]> => {
const { data } = await axios.get('/api/leagues?fetchAll=true');
return data;
};

export default function LeaguesPage() {
const [searchTerm, setSearchTerm] = useState('');
const [filter, setFilter] = useState<'all' | 'league' | 'cup'>('all');
const [currentPage, setCurrentPage] = useState(1);

const { data: leagues, isLoading } = useQuery<League[]>({
queryKey: ['allLeaguesDirectory'],
queryFn: fetchAllLeagues,
staleTime: 1000 * 60 * 60,
});

const { paginatedData, totalPages } = useMemo(() => {
if (!leagues) return { paginatedData: [], totalPages: 0 };

const filtered = leagues.filter(league => {
const matchesSearch = league.name.toLowerCase().includes(searchTerm.toLowerCase());
const matchesFilter = filter === 'all' || league.type.toLowerCase() === filter;
return matchesSearch && matchesFilter;
});

const totalPages = Math.ceil(filtered.length / ITEMS_PER_PAGE);

const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
const endIndex = startIndex + ITEMS_PER_PAGE;
const paginatedData = filtered.slice(startIndex, endIndex);

return { paginatedData, totalPages };

}, [leagues, searchTerm, filter, currentPage]);

useEffect(() => {
setCurrentPage(1);
}, [searchTerm, filter]);

return (
<div className="min-h-screen flex flex-col">
<Header />
<div className="flex flex-1">
<Sidebar />
<main className="flex-1 p-4 lg:p-8">
<h1 className="text-4xl font-extrabold text-white mb-6">Leagues & Cups</h1>

<div className="flex flex-col md:flex-row gap-4 mb-8">
<input
type="text"
placeholder="Search by name..."
value={searchTerm}
onChange={(e) => setSearchTerm(e.target.value)}
className="w-full md:w-1/3 p-3 rounded bg-gray-700 text-white border border-gray-600 focus:outline-none focus:ring-2 focus:ring-brand-purple"
/>
<div className="flex items-center gap-2 p-1 rounded-lg" style={{backgroundColor: 'var(--color-secondary)'}}>
<button onClick={() => setFilter('all')} className={`px-4 py-1.5 rounded-md text-sm font-semibold transition-colors ${filter === 'all' ? 'bg-brand-purple text-white' : 'text-text-muted hover:bg-gray-700/50'}`}>All</button>
<button onClick={() => setFilter('league')} className={`px-4 py-1.5 rounded-md text-sm font-semibold transition-colors ${filter === 'league' ? 'bg-brand-purple text-white' : 'text-text-muted hover:bg-gray-700/50'}`}>Leagues</button>
<button onClick={() => setFilter('cup')} className={`px-4 py-1.5 rounded-md text-sm font-semibold transition-colors ${filter === 'cup' ? 'bg-brand-purple text-white' : 'text-text-muted hover:bg-gray-700/50'}`}>Cups</button>
</div>
</div>

<div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
{isLoading ? (
Array.from({ length: ITEMS_PER_PAGE }).map((_, i) => <DirectoryCardSkeleton key={i} />)
) : (
paginatedData.map(league => <DirectoryCard key={league.id} {...league} />)
)}
</div>

{!isLoading && paginatedData.length > 0 && (
<Pagination
currentPage={currentPage}
totalPages={totalPages}
onPageChange={setCurrentPage}
/>
)}

{!isLoading && paginatedData.length === 0 && (
<div className="text-center py-20 bg-brand-secondary rounded-lg">
<p className="text-xl font-bold text-white">No Results Found</p>
<p className="text-brand-muted mt-2">Try adjusting your search or filter.</p>
</div>
)}
</main>
</div>
</div>
);
}

// =================================================================
// FILE: src\app\football\match\[...slug]\page.tsx
// =================================================================

"use client";

import { useMemo } from 'react';
import { useQuery } from '@tanstack/react-query';
import { useParams } from 'next/navigation';
import axios from 'axios';
import { Target, Users, History, BrainCircuit } from 'lucide-react';
import Header from '@/components/Header';

import MatchHeader from '@/components/match/MatchHeader';
import MatchStatusBanner from '@/components/match/MatchStatusBanner';
import MatchEventsWidget from '@/components/match/MatchEventsWidget';
import MatchStatsWidget from '@/components/match/MatchStatsWidget';
import MatchH2HWidget from '@/components/match/MatchH2HWidget';
import MatchAnalyticsWidget from '@/components/match/MatchAnalyticsWidget';
import MatchLineupsWidget from '@/components/match/MatchLineupsWidget';
import BettingPromotionWidget from '@/components/BettingPromotionWidget';

const BASE_TABS = [
{ name: 'Events', icon: Target },
{ name: 'Lineups', icon: Users },
{ name: 'H2H', icon: History }
];

const getFixtureIdFromSlug = (slug: string): string | null => {
if (!slug) return null;
const parts = slug.split('-');
const lastPart = parts[parts.length - 1];

return /^\d+$/.test(lastPart) ? lastPart : null;
};

const fetchMatchDetails = async (fixtureId: string) => {
const { data } = await axios.get(`/api/match-details?fixture=${fixtureId}`);
return data;
};

const PageSkeleton = () => (
<div className="animate-pulse container mx-auto p-4 md:p-8">
<div className="h-48 w-full bg-brand-secondary rounded-lg mb-2"></div>
<div className="h-10 w-full bg-brand-secondary rounded-b-lg mb-8"></div>
<div className="h-64 w-full bg-brand-secondary rounded-lg"></div>
</div>
);

export default function MatchDetailPage() {
const params = useParams();
const slug = Array.isArray(params.slug) ? params.slug.join('/') : params.slug as string;
const fixtureId = useMemo(() => getFixtureIdFromSlug(slug), [slug]);

const { data, isLoading, error } = useQuery({
queryKey: ['matchDetails', fixtureId],
queryFn: () => fetchMatchDetails(fixtureId!),
enabled: !!fixtureId,
staleTime: 1000 * 60,
});

if (isLoading) {
return (
<div className="bg-brand-dark min-h-screen">
<Header />
<PageSkeleton />
</div>
);
}

if (error || !data || !data.fixture) {
return (
<div className="bg-brand-dark min-h-screen">
<Header />
<div className="container mx-auto p-8 text-center">
<h1 className="text-2xl font-bold text-red-400">Match Not Found</h1>
<p className="text-brand-muted mt-2">Could not load the details for this match. It may have been removed or the ID is incorrect.</p>
</div>
</div>
);
}

const { fixture, events, statistics, h2h, analytics } = data;

return (
<div className="bg-brand-dark min-h-screen">
<Header />
<div className="container mx-auto p-2 md:p-4 lg:p-6 text-brand-light">

{}
<MatchHeader fixture={fixture} />
<MatchStatusBanner fixture={fixture} />

{}
<div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mt-6">

{}
<div className="lg:col-span-2 space-y-6">
<MatchEventsWidget events={events} teams={fixture.teams} />
<MatchStatsWidget statistics={statistics} teams={fixture.teams} />
<MatchH2HWidget h2h={h2h} teams={fixture.teams} currentFixtureId={fixtureId!} />
</div>

{}
<div className="lg:col-span-1 space-y-6">
<MatchAnalyticsWidget analytics={analytics} />
<MatchLineupsWidget lineups={fixture.lineups} />
<BettingPromotionWidget />
</div>
</div>
</div>
</div>
);
}

// =================================================================
// FILE: src\app\football\news\page.tsx
// =================================================================

"use client";

import { useState, useMemo } from 'react';
import { useQuery } from '@tanstack/react-query';
import axios from 'axios';
import { IPost } from '@/models/Post';
import Header from '@/components/Header';
import Sidebar from '@/components/Sidebar';
import Pagination from '@/components/Pagination';
import NewsListItem, { NewsListItemSkeleton } from '@/components/NewsListItem';

export const dynamic = 'force-dynamic';

const ITEMS_PER_PAGE = 8;

const fetchNews = async (): Promise<IPost[]> => {
const { data } = await axios.get('/api/posts?status=published');
return data;
};

export default function NewsPage() {
const [currentPage, setCurrentPage] = useState(1);

const { data: allNews, isLoading } = useQuery<IPost[]>({
queryKey: ['allNewsArticles'],
queryFn: fetchNews,
staleTime: 1000 * 60 * 5,
});

const { paginatedData, totalPages } = useMemo(() => {
if (!allNews) return { paginatedData: [], totalPages: 0 };

const totalPages = Math.ceil(allNews.length / ITEMS_PER_PAGE);
const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
const endIndex = startIndex + ITEMS_PER_PAGE;
const paginatedData = allNews.slice(startIndex, endIndex);

return { paginatedData, totalPages };

}, [allNews, currentPage]);

return (
<div className="min-h-screen flex flex-col">
<Header />
<div className="flex flex-1">
<Sidebar />
<main className="flex-1 p-4 lg:p-8">
<h1 className="text-4xl font-extrabold text-white mb-8">Latest News</h1>

<div className="space-y-6">
{isLoading ? (
Array.from({ length: ITEMS_PER_PAGE }).map((_, i) => <NewsListItemSkeleton key={i} />)
) : paginatedData.length > 0 ? (
paginatedData.map(post => <NewsListItem key={post._id} post={post} />)
) : (
<div className="text-center py-20 bg-brand-secondary rounded-lg">
<p className="text-xl font-bold text-white">No News Available</p>
<p className="text-brand-muted mt-2">There are no news articles to display at the moment.</p>
</div>
)}
</div>

{!isLoading && paginatedData.length > 0 && (
<Pagination
currentPage={currentPage}
totalPages={totalPages}
onPageChange={setCurrentPage}
/>
)}
</main>
</div>
</div>
);
}

// =================================================================
// FILE: src\app\football\news\[slug]\page.tsx
// =================================================================

import { notFound } from 'next/navigation';
import dbConnect from '@/lib/dbConnect';
import Post from '@/models/Post';
import { format } from 'date-fns';
import Header from '@/components/Header';
import Image from 'next/image';
import SocialShareButtons from '@/components/SocialShareButtons';
import NewsSidebar from '@/components/NewsSidebar';

async function getPost(slug: string) {
await dbConnect();
const post = await Post.findOne({ slug: slug, status: 'published' }).lean();
if (!post) {
return null;
}
return post;
}

export async function generateMetadata({ params }: { params: { slug: string } }) {
const post = await getPost(params.slug);
if (!post) {
return { title: 'Not Found' };
}
return {

title: post.metaTitle || `${post.title} | Fulltime News`,

description: post.metaDescription || post.content.replace(/<[^>]*>?/gm, '').substring(0, 160),
};
}

export default async function NewsArticlePage({ params }: { params: { slug: string } }) {
const post = await getPost(params.slug);

if (!post) {
notFound();
}

const postUrl = `${process.env.NEXTAUTH_URL}/news/${post.slug}`;

return (
<div className="bg-brand-dark min-h-screen">
<Header />
{}
<main className="container mx-auto p-4 md:p-8 grid grid-cols-1 lg:grid-cols-3 gap-12">

{}
<div className="lg:col-span-2">
<article className="bg-brand-secondary rounded-lg overflow-hidden">
{post.featuredImage && (
<div className="relative w-full h-64 md:h-96">
<Image
src={post.featuredImage}
alt={post.featuredImageAltText || post.title}
title={post.featuredImageTitle || post.title}
layout="fill"
objectFit="cover"
priority
/>
</div>
)}

<div className="p-8">
<div className="mb-8 text-center border-b border-gray-700/50 pb-8">
<h1 className="text-4xl md:text-5xl font-extrabold text-white leading-tight mb-4">
{post.title}
</h1>
<p className="text-brand-muted">
Published by {post.author} on {format(new Date(), 'MMMM dd, yyyy')}
</p>
</div>

<div
className="prose prose-invert lg:prose-xl max-w-none"
dangerouslySetInnerHTML={{ __html: post.content }}
/>

<div className="mt-12 pt-8 border-t border-gray-700/50">
<h3 className="text-lg font-bold text-center text-brand-muted mb-4">Share this article</h3>
<SocialShareButtons url={postUrl} title={post.title} />
</div>
</div>
</article>
</div>

{}
<div className="lg:col-span-1">
<NewsSidebar />
</div>

</main>
</div>
);
}

export async function generateStaticParams() {
await dbConnect();
const posts = await Post.find({ status: 'published' }).select('slug').lean();
return posts.map(post => ({
slug: post.slug,
}));
}

// =================================================================
// FILE: src\app\football\team\[...slug]\page.tsx
// =================================================================

import Header from '@/components/Header';
import Sidebar from '@/components/Sidebar';
import TeamDetailView from '@/components/TeamDetailView';
import { notFound } from 'next/navigation';
import { fetchTeamDetails } from '@/lib/data/team';

const getTeamIdFromSlug = (slug: string): string | null => {
if (!slug) return null;
const parts = slug.split('-');
const lastPart = parts[parts.length - 1];
return /^\d+$/.test(lastPart) ? lastPart : null;
};

async function getTeamData(teamId: string) {

return await fetchTeamDetails(teamId);
}

export async function generateMetadata({ params }: { params: { slug:string[] } }) {
const slug = params.slug.join('/');
const teamId = getTeamIdFromSlug(slug);
if (!teamId) return { title: 'Team Not Found' };

const data = await getTeamData(teamId);
if (!data?.teamInfo) return { title: 'Team Not Found' };

return {
title: `${data.teamInfo.team.name} - Squad, Fixtures & Standings`,
description: `View the full squad, recent fixtures, and current standings for ${data.teamInfo.team.name}.`,
};
}

export default async function TeamPage({ params }: { params: { slug: string[] } }) {
const slug = params.slug.join('/');
const teamId = getTeamIdFromSlug(slug);

if (!teamId) {
notFound();
}

const teamData = await getTeamData(teamId);

if (!teamData) {
notFound();
}

return (
<div className="min-h-screen flex flex-col">
<Header />
<div className="flex flex-1">
<Sidebar />
<main className="flex-1 p-4 lg:p-8">
<TeamDetailView teamData={teamData} />
</main>
</div>
</div>
);
}

// =================================================================
// FILE: src\app\football\teams\page.tsx
// =================================================================

"use client";

import { useState, useMemo } from 'react';
import { useQuery } from '@tanstack/react-query';
import axios from 'axios';
import Header from '@/components/Header';
import Sidebar from '@/components/Sidebar';
import StyledLink from '@/components/StyledLink';
import { Country } from '@/types/api-football';
import { ChevronRight, Search } from 'lucide-react';
import Image from 'next/image';

export const dynamic = 'force-dynamic';

const fetchAllCountries = async (): Promise<Country[]> => {
const { data } = await axios.get('/api/countries');
return data;
};

const CountryCard = ({ country }: { country: Country }) => (
<StyledLink href={`/football/teams/${country.name}`} className="block group">
<div className="bg-brand-secondary rounded-lg p-4 flex items-center justify-between transition-all duration-300 transform hover:-translate-y-1 hover:shadow-lg hover:shadow-purple-900/20">
<div className="flex items-center gap-4 min-w-0">
<Image
src={country.flagUrl}
alt={country.name}
width={32}
height={32}
className="flex-shrink-0"
/>
<h3 className="font-bold text-white truncate group-hover:text-brand-purple transition-colors">{country.name}</h3>
</div>
<ChevronRight className="text-brand-muted group-hover:text-brand-purple transition-colors flex-shrink-0" />
</div>
</StyledLink>
);

const CountryCardSkeleton = () => (
<div className="bg-brand-secondary rounded-lg p-4 flex items-center justify-between animate-pulse">
<div className="flex items-center gap-4 w-full">
<div className="w-8 h-8 rounded-full bg-gray-700/50"></div>
<div className="h-5 w-3/4 rounded bg-gray-600/50"></div>
</div>
</div>
);

export default function BrowseTeamsByCountryPage() {
const [searchTerm, setSearchTerm] = useState('');

const { data: countries, isLoading, error } = useQuery<Country[]>({
queryKey: ['allCountriesDirectory'],
queryFn: fetchAllCountries,
staleTime: 1000 * 60 * 60 * 24,
refetchOnWindowFocus: false,
});

const filteredCountries = useMemo(() => {
if (!countries) return [];
return countries.filter(country =>
country.name.toLowerCase().includes(searchTerm.toLowerCase())
);
}, [countries, searchTerm]);

return (
<div className="min-h-screen flex flex-col">
<Header />
<div className="flex flex-1">
<Sidebar />
<main className="flex-1 p-4 lg:p-8">
<h1 className="text-4xl font-extrabold text-white mb-2">Browse Teams by Country</h1>
<p className="text-brand-muted mb-8">Select a country to view all associated professional teams.</p>

<div className="relative mb-8 max-w-lg">
<Search className="absolute left-3.5 top-1/2 -translate-y-1/2 text-brand-muted" size={20} />
<input
type="text"
placeholder="Search for a country..."
value={searchTerm}
onChange={(e) => setSearchTerm(e.target.value)}
className="w-full bg-brand-secondary border border-gray-700/50 rounded-lg p-3 pl-12 text-white focus:outline-none focus:ring-2 focus:ring-brand-purple"
/>
</div>

{isLoading ? (
<div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
{Array.from({ length: 16 }).map((_, i) => <CountryCardSkeleton key={i} />)}
</div>
) : error ? (
<div className="text-center py-20 bg-brand-secondary rounded-lg">
<p className="text-xl font-bold text-red-400">Error Loading Countries</p>
<p className="text-brand-muted mt-2">Could not fetch the list of countries. Please try again later.</p>
</div>
) : filteredCountries.length > 0 ? (
<div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
{filteredCountries.map(country => (
<CountryCard key={country.code || country.name} country={country} />
))}
</div>
) : (
<div className="text-center py-20 bg-brand-secondary rounded-lg">
<p className="text-xl font-bold text-white">No Results Found</p>
<p className="text-brand-muted mt-2">Your search for "{searchTerm}" did not match any countries.</p>
</div>
)}
</main>
</div>
</div>
);
}

// =================================================================
// FILE: src\app\football\teams\[countryName]\page.tsx
// =================================================================

"use client";

import { useState, useMemo, useEffect } from 'react';
import { useParams } from 'next/navigation';
import { useQuery } from '@tanstack/react-query';
import axios from 'axios';
import Header from '@/components/Header';
import Sidebar from '@/components/Sidebar';
import Pagination from '@/components/Pagination';
import TeamDirectoryCard, { TeamDirectoryCardSkeleton } from '@/components/TeamDirectoryCard';

const ITEMS_PER_PAGE = 18;

const fetchTeamsByCountry = async (countryName: string): Promise<any[]> => {
const { data } = await axios.get(`/api/teams-by-country?country=${encodeURIComponent(countryName)}`);
return data;
};

export default function TeamsByCountryPage() {
const params = useParams();
const countryName = decodeURIComponent(params.countryName as string);

const [searchTerm, setSearchTerm] = useState('');
const [currentPage, setCurrentPage] = useState(1);

const { data: teams, isLoading } = useQuery({
queryKey: ['teamsByCountry', countryName],
queryFn: () => fetchTeamsByCountry(countryName),
staleTime: 1000 * 60 * 60,
});

const { paginatedData, totalPages } = useMemo(() => {
if (!teams) return { paginatedData: [], totalPages: 0 };

const filtered = teams.filter(teamData =>
teamData.team.name.toLowerCase().includes(searchTerm.toLowerCase())
);

const totalPages = Math.ceil(filtered.length / ITEMS_PER_PAGE);

const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
const endIndex = startIndex + ITEMS_PER_PAGE;
const paginatedData = filtered.slice(startIndex, endIndex);

return { paginatedData, totalPages };
}, [teams, searchTerm, currentPage]);

useEffect(() => {
setCurrentPage(1);
}, [searchTerm]);

return (
<div className="min-h-screen flex flex-col">
<Header />
<div className="flex flex-1">
<Sidebar />
<main className="flex-1 p-4 lg:p-8">
<h1 className="text-4xl font-extrabold text-white mb-6">Teams in {countryName}</h1>

<div className="flex flex-col md:flex-row gap-4 mb-8">
<input
type="text"
placeholder="Search by team name..."
value={searchTerm}
onChange={(e) => setSearchTerm(e.target.value)}
className="w-full md:w-1/3 p-3 rounded bg-gray-700 text-white border border-gray-600 focus:outline-none focus:ring-2 focus:ring-brand-purple"
/>
</div>

<div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
{isLoading ? (
Array.from({ length: ITEMS_PER_PAGE }).map((_, i) => <TeamDirectoryCardSkeleton key={i} />)
) : (
paginatedData.map(teamData => <TeamDirectoryCard key={teamData.team.id} {...teamData} />)
)}
</div>

{!isLoading && paginatedData.length > 0 && (
<Pagination
currentPage={currentPage}
totalPages={totalPages}
onPageChange={setCurrentPage}
/>
)}

{!isLoading && paginatedData.length === 0 && (
<div className="text-center py-20 bg-brand-secondary rounded-lg">
<p className="text-xl font-bold text-white">No Results Found</p>
<p className="text-brand-muted mt-2">Try adjusting your search term or check back later.</p>
</div>
)}
</main>
</div>
</div>
);
}

// =================================================================
// FILE: src\app\globals.css
// =================================================================

@import "tailwindcss";

@tailwind base;
@tailwind components;
@tailwind utilities;
@import 'nprogress/nprogress.css';

:root {

--color-background: #020202;
--color-primary: #1A1A1A;
--color-secondary: #2A2A2A;

--text-primary: #fffffd;
--text-secondary: #E0E0E0;
--text-muted: #9E9E9E;

--brand-accent: #ed5c19;
--brand-live: #EF4444;
--brand-yellow: #FBBF24;
}

body {
background-color: var(--color-background);
color: var(--text-primary);
font-family: var(--font-sans);
}

.custom-scrollbar {
overflow-y: auto;
scroll-behavior: smooth;

scrollbar-width: thin;
scrollbar-color: #393f47 transparent;
}

.custom-scrollbar::-webkit-scrollbar {
width: 8px;
}

.custom-scrollbar::-webkit-scrollbar-track {
background-color: #f3f4f6;
}

.custom-scrollbar::-webkit-scrollbar-thumb {
background-color: #1f2937;
border-radius: 10px;
}
.bg-brand-secondary {
background-color: var(--tw-color-brand-secondary);
}

.slick-dots li.slick-active div {
background-color: #8B5CF6 !important;
}

@keyframes breathing-glow {
0%, 100% {

box-shadow: 0 0 10px 0px rgba(52, 211, 153, 0.4);
transform: scale(1);
}
50% {

box-shadow: 0 0 25px 5px rgba(52, 211, 153, 0.7);
transform: scale(1.05);
}
}

.animate-breathing-glow {
animation: breathing-glow 2.5s ease-in-out infinite;
}

.tiptap > * + * {
margin-top: 0.75em;
}

.tiptap ul,
.tiptap ol {
padding: 0 1rem;
}

.tiptap h1,
.tiptap h2,
.tiptap h3,
.tiptap h4,
.tiptap h5,
.tiptap h6 {
line-height: 1.1;
}

.tiptap code {
background-color: rgba(255, 255, 255, 0.1);
color: #a1a1aa;
padding: 0.2rem 0.4rem;
border-radius: 0.25rem;
font-size: 0.9em;
}

.tiptap pre {
background: #18181b;
color: #fff;
font-family: 'JetBrainsMono', 'Courier New', Courier, monospace;
padding: 0.75rem 1rem;
border-radius: 0.5rem;
}

.tiptap pre code {
color: inherit;
padding: 0;
background: none;
font-size: 0.8rem;
}

.tiptap img {
max-width: 100%;
height: auto;
}

.tiptap blockquote {
padding-left: 1rem;
border-left: 2px solid rgba(255, 255, 255, 0.2);
}

.tiptap hr {
border: none;
border-top: 2px solid rgba(255, 255, 255, 0.2);
margin: 2rem 0;
}

.slick-dots li.slick-active div {
background-color: #8B5CF6;
}

#nprogress .bar {
background: var(--brand-accent) !important;
height: 3px !important;
}
#nprogress .peg {
box-shadow: 0 0 10px var(--brand-accent), 0 0 5px var(--brand-accent) !important;
}

.bg-brand-secondary { background-color: var(--color-primary); }
.text-brand-light { color: var(--text-primary); }
.text-brand-muted { color: var(--text-muted); }

// =================================================================
// FILE: src\app\layout.tsx
// =================================================================

import type { Metadata } from 'next';
import { Inter } from 'next/font/google';
import './globals.css';
import Providers from './providers';
import { LeagueProvider } from '@/context/LeagueContext';
import "slick-carousel/slick/slick.css";
import "slick-carousel/slick/slick-theme.css";
import { LanguageProvider } from '@/context/LanguageContext';
import NextAuthProvider from './NextAuthProvider';
import { Suspense } from 'react';

const inter = Inter({ subsets: ['latin'] });

export const metadata: Metadata = {
title: "Fan Skor | Türkiye'nin 1 numaralı Canlı Skor sitesi",
description: "Oyuntaktik.com, Türkiye'nin bir numaralı inceleme sitesi, en iyi oyun rehberleri, taktikler ve güncel değerlendirmelerle oyuncuların yanında!",
icons: {
icon: [
{ url: '/favicon.ico', type: 'image/png' },
],
apple: [
{ url: '/favicon.ico' },
],
},
};

export default function RootLayout({
children,
}: {
children: React.ReactNode;
}) {
return (
<html lang="en">
<body className={`${inter.className} bg-background text-text-primary`} suppressHydrationWarning={true}>
<Suspense fallback={<div>Loading...</div>}>
<NextAuthProvider>
<Providers>
<LanguageProvider>
<LeagueProvider>
<main>{children}</main>
</LeagueProvider>
</LanguageProvider>
</Providers>
</NextAuthProvider>
</Suspense>
</body>
</html>
);
}

// =================================================================
// FILE: src\app\login\page.tsx
// =================================================================

"use client";

import { useState } from 'react';
import { signIn } from 'next-auth/react';
import { useRouter, useSearchParams } from 'next/navigation';
import { useTranslation } from '@/hooks/useTranslation';

export const dynamic = 'force-dynamic';

export default function LoginPage() {
const router = useRouter();
const searchParams = useSearchParams();
const { t } = useTranslation();

const [email, setEmail] = useState('');
const [password, setPassword] = useState('');
const [error, setError] = useState(searchParams.get('error') || '');

const handleSubmit = async (e: React.FormEvent) => {
e.preventDefault();
setError('');

const result = await signIn('credentials', {
redirect: false,
email,
password,
});

if (result?.error) {
setError(t('invalid_credentials'));
} else if (result?.ok) {
router.push('/admin/dashboard');
}
};

return (
<div className="flex items-center justify-center min-h-screen bg-brand-dark">
<form onSubmit={handleSubmit} className="p-8 rounded-lg shadow-lg bg-brand-secondary w-full max-w-sm">
<h1 className="text-2xl font-bold mb-6 text-center text-white">{t('admin_login')}</h1>
{error && <p className="bg-red-500/20 text-red-400 p-3 rounded mb-4 text-sm">{error}</p>}
<div className="space-y-4">
<input
type="email"
value={email}
onChange={(e) => setEmail(e.target.value)}
placeholder={t('email')}
required
className="w-full p-3 rounded bg-gray-700 text-white border border-gray-600 focus:outline-none focus:ring-2 focus:ring-brand-purple"
/>
<input
type="password"
value={password}
onChange={(e) => setPassword(e.target.value)}
placeholder={t('password')}
required
className="w-full p-3 rounded bg-gray-700 text-white border border-gray-600 focus:outline-none focus:ring-2 focus:ring-brand-purple"
/>
</div>
<button type="submit" className="w-full mt-6 bg-brand-purple text-white font-bold py-3 rounded-lg hover:opacity-90 transition-opacity">
{t('sign_in')}
</button>
</form>
</div>
);
}

// =================================================================
// FILE: src\app\NextAuthProvider.tsx
// =================================================================

"use client";

import { SessionProvider } from "next-auth/react";

export default function NextAuthProvider({
children,
}: {
children: React.ReactNode;
}) {
return <SessionProvider>{children}</SessionProvider>;
}

// =================================================================
// FILE: src\app\not-found.tsx
// =================================================================

"use client";

import { Suspense } from 'react';
import Link from 'next/link';
import Header from '@/components/Header';
import { HeaderSkeleton } from '@/components/LayoutSkeletons';
import { Frown } from 'lucide-react';

export default function NotFound() {
return (
<div className="min-h-screen flex flex-col">
<Suspense fallback={<HeaderSkeleton />}>
<Header />
</Suspense>

<main className="flex-1 flex flex-col items-center justify-center text-center p-4">
<Frown className="w-16 h-16 text-text-muted mb-4" />
<h1 className="text-4xl font-extrabold text-white">404 - Page Not Found</h1>
<p className="text-lg text-text-secondary mt-2 mb-6">
The page you are looking for does not exist or has been moved.
</p>
<Link
href="/"
className="px-6 py-3 bg-brand-purple text-white font-bold rounded-lg hover:opacity-90 transition-opacity"
>
Go back to Homepage
</Link>
</main>
</div>
)
}

// =================================================================
// FILE: src\app\page.tsx
// =================================================================

import { Suspense } from 'react';
import Header from '@/components/Header';
import Sidebar from '@/components/Sidebar';
import MainContent from '@/components/MainContent';
import { HeaderSkeleton, SidebarSkeleton } from '@/components/LayoutSkeletons';

export default async function HomePage() {
return (
<div className="min-h-screen flex flex-col">
<Suspense fallback={<HeaderSkeleton />}>
<Header />
</Suspense>

<div className="container mx-auto flex-1 w-full lg:grid lg:grid-cols-[288px_1fr] lg:gap-8 lg:items-start">

{}
{}
<Suspense fallback={<SidebarSkeleton />}>
<Sidebar />
</Suspense>

<main className="min-w-0">
<MainContent />
</main>

</div>
</div>
);
}

// =================================================================
// FILE: src\app\providers.tsx
// =================================================================

"use client";

import ProgressBar from "@/components/ProgressBar";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { ReactQueryDevtools } from "@tanstack/react-query-devtools";
import { useState } from "react";
import { Toaster } from "react-hot-toast";

export default function Providers({ children }: { children: React.ReactNode }) {
const [queryClient] = useState(
() =>
new QueryClient({
defaultOptions: {
queries: {
staleTime: 60 * 1000,
},
},
})
);

return (
<QueryClientProvider client={queryClient}>
{}
<Toaster
position="top-right"
toastOptions={{
style: {
background: '#333',
color: '#fff',
},
}}
/>
<ProgressBar />
{children}
<ReactQueryDevtools initialIsOpen={false} />
</QueryClientProvider>
);
}

// =================================================================
// FILE: src\components\Accordion.tsx
// =================================================================

"use client";

import { useState, ReactNode } from 'react';
import { ChevronDown } from 'lucide-react';

interface AccordionProps {
title: ReactNode;
statusNode?: ReactNode;
children: ReactNode;
defaultOpen?: boolean;
}

export default function Accordion({ title, statusNode, children, defaultOpen = false }: AccordionProps) {
const [isOpen, setIsOpen] = useState(defaultOpen);

return (
<div className="border-b border-gray-700/50 last:border-b-0">
<button
onClick={() => setIsOpen(!isOpen)}
className="w-full flex justify-between items-center p-4 transition-colors duration-200 bg-gray-800/50 hover:bg-gray-800/80"
>
{}
<div className="flex items-center gap-4">
{}
<div className="font-bold text-lg text-white text-left">{title}</div>
{}
{statusNode}
</div>

{}
<ChevronDown
size={24}
className={`transform transition-transform duration-300 flex-shrink-0 ${isOpen ? 'rotate-180' : ''}`}
/>
</button>

{}
<div
className={`grid transition-all duration-300 ease-in-out ${
isOpen ? 'grid-rows-[1fr] opacity-100' : 'grid-rows-[0fr] opacity-0'
}`}
>
<div className="overflow-hidden">
<div className="p-4 space-y-3 bg-brand-dark/30">{children}</div>
</div>
</div>
</div>
);
}

// =================================================================
// FILE: src\components\admin\AdminSidebar.tsx
// =================================================================

"use client";

import Link from "next/link";
import Image from "next/image";
import { usePathname } from "next/navigation";
import { useSession, signOut } from "next-auth/react";
import {
LayoutDashboard,
Users,
Newspaper,
Settings,
LogOut,
Aperture,
Trophy,
} from "lucide-react";

const adminNavLinks = [
{
name: "Dashboard",
href: "/admin/dashboard",
icon: LayoutDashboard,
},
{
name: "Users",
href: "/admin/users",
icon: Users,
},
{
name: "News",
href: "/admin/news",
icon: Newspaper,
},
{
name: "Matches",
href: "/admin/matches",
icon: Trophy,
},
{
name: "Settings",
href: "/admin/settings",
icon: Settings,
},
];

export default function AdminSidebar() {
const pathname = usePathname();
const { data: session } = useSession();

return (
<aside className="w-64 flex-shrink-0 bg-brand-secondary p-4 flex flex-col border-r border-gray-700/50">
{}
<div className="p-4 mb-6">
<Link href="/admin/dashboard" className="flex items-center gap-3">
<div className="bg-brand-purple p-2 rounded-lg">
<Aperture className="h-6 w-6 text-white" />
</div>
<span className="text-xl font-bold text-white">Admin Panel</span>
</Link>
</div>

{}
<nav className="flex-1">
<ul className="space-y-2">
{adminNavLinks.map((link) => {

const isActive = pathname.startsWith(link.href);
return (
<li key={link.name}>
<Link
href={link.href}
className={`flex w-full items-center gap-3 rounded-lg p-3 text-sm font-medium transition-colors duration-200 ${
isActive
? "bg-brand-purple text-white shadow-md"
: "text-brand-muted hover:bg-gray-700/50 hover:text-brand-light"
}`}
>
<link.icon className="h-5 w-5" />
<span>{link.name}</span>
</Link>
</li>
);
})}
</ul>
</nav>

{}
<div className="mt-auto">
{session?.user && (
<div className="p-3 mb-2 flex items-center gap-3 border-t border-gray-700/50">
<Image
src={session.user.image || "/default-avatar.png"}
alt={session.user.name || "User"}
width={40}
height={40}
className="rounded-full"
/>
<div className="text-sm">
<p className="font-semibold text-white">{session.user.name}</p>
<p className="text-brand-muted truncate">{session.user.email}</p>
</div>
</div>
)}
<button
onClick={() => signOut({ callbackUrl: "/login" })}
className="flex w-full items-center gap-3 rounded-lg p-3 text-sm font-medium text-brand-muted hover:bg-red-500/20 hover:text-red-400 transition-colors"
>
<LogOut className="h-5 w-5" />
<span>Sign Out</span>
</button>
</div>
</aside>
);
}

// =================================================================
// FILE: src\components\admin\RichTextEditor.tsx
// =================================================================

"use client";

import { useEditor, EditorContent, Editor } from '@tiptap/react';
import StarterKit from '@tiptap/starter-kit';
import {
Bold, Italic, Strikethrough, Code, Heading2, Heading3,
List, ListOrdered, Quote
} from 'lucide-react';

const MenuBar = ({ editor }: { editor: Editor | null }) => {
if (!editor) {
return null;
}

const MenuButton = ({ onClick, isActive, children }: { onClick: () => void; isActive: boolean; children: React.ReactNode; }) => (
<button
type="button"
onClick={onClick}
className={`p-2 rounded-md transition-colors ${
isActive
? 'bg-brand-purple text-white'
: 'text-brand-muted hover:bg-gray-700/50'
}`}
>
{children}
</button>
);

return (
<div className="flex flex-wrap items-center gap-2 p-2 bg-gray-800/50 border-b border-gray-600">
<MenuButton onClick={() => editor.chain().focus().toggleBold().run()} isActive={editor.isActive('bold')}>
<Bold size={18} />
</MenuButton>
<MenuButton onClick={() => editor.chain().focus().toggleItalic().run()} isActive={editor.isActive('italic')}>
<Italic size={18} />
</MenuButton>
<MenuButton onClick={() => editor.chain().focus().toggleStrike().run()} isActive={editor.isActive('strike')}>
<Strikethrough size={18} />
</MenuButton>
<MenuButton onClick={() => editor.chain().focus().toggleCode().run()} isActive={editor.isActive('code')}>
<Code size={18} />
</MenuButton>

<div className="w-px h-6 bg-gray-600 mx-2" />

<MenuButton onClick={() => editor.chain().focus().toggleHeading({ level: 2 }).run()} isActive={editor.isActive('heading', { level: 2 })}>
<Heading2 size={18} />
</MenuButton>
<MenuButton onClick={() => editor.chain().focus().toggleHeading({ level: 3 }).run()} isActive={editor.isActive('heading', { level: 3 })}>
<Heading3 size={18} />
</MenuButton>
<MenuButton onClick={() => editor.chain().focus().toggleBulletList().run()} isActive={editor.isActive('bulletList')}>
<List size={18} />
</MenuButton>
<MenuButton onClick={() => editor.chain().focus().toggleOrderedList().run()} isActive={editor.isActive('orderedList')}>
<ListOrdered size={18} />
</MenuButton>
<MenuButton onClick={() => editor.chain().focus().toggleBlockquote().run()} isActive={editor.isActive('blockquote')}>
<Quote size={18} />
</MenuButton>
</div>
);
};

export default function RichTextEditor({
value,
onChange,
}: {
value: string;
onChange: (value: string) => void;
}) {
const editor = useEditor({

extensions: [StarterKit],

content: value,

onUpdate: ({ editor }) => {
onChange(editor.getHTML());
},

editorProps: {
attributes: {

class: 'min-h-[300px] w-full p-4 bg-gray-700 text-brand-light focus:outline-none',
},
},
});

return (

<div className="border border-gray-600 rounded-lg overflow-hidden">
<MenuBar editor={editor} />
<EditorContent editor={editor} />
</div>
);
}

// =================================================================
// FILE: src\components\AdSlotWidget.tsx
// =================================================================

import { memo } from 'react';

interface AdSlotWidgetProps {
aspectRatio?: string;
placeholderText?: string;
}

const AdSlotWidget = memo(function AdSlotWidget({
aspectRatio = '3/2',
placeholderText = 'Banner Ad'
}: AdSlotWidgetProps) {

return (
<section
className="p-3 rounded-xl relative"
style={{ backgroundColor: 'var(--color-primary)' }}
>
<span className="absolute top-1 right-2 text-[10px] font-semibold text-text-muted/50">
Advertisement
</span>

<div

className={`w-full mt-4 flex items-center justify-center rounded-lg border-2 border-dashed`}
style={{
aspectRatio: aspectRatio.replace('-', '/'),
borderColor: 'var(--color-secondary)'
}}
>
<div className="text-center">
<p className="text-lg font-bold text-text-muted">{placeholderText}</p>
</div>
</div>
</section>
);
});

export default AdSlotWidget;

// =================================================================
// FILE: src\components\BettingPromotionWidget.tsx
// =================================================================

"use client";

import { memo } from 'react';
import { ShieldCheck } from 'lucide-react';

const BettingPromotionWidget = memo(function BettingPromotionWidget() {

const handleBetClick = () => {
console.log("Redirecting to casino partner...");

};

return (
<div className="bg-gradient-to-br from-green-500/20 to-brand-purple/20 p-4 rounded-xl border border-green-400/30 text-center space-y-3">

<h3 className="text-lg font-bold text-white">
Exclusive Welcome Offer!
</h3>

<p className="text-sm text-brand-light">
Get a <span className="font-bold text-green-400">100% bonus</span> on your first deposit to bet on today's matches.
</p>

{}
<div className="relative pt-2">
{}
<span className="absolute top-2 left-0 inline-flex h-full w-full rounded-lg bg-green-400 opacity-75 animate-ping"></span>

<button
onClick={handleBetClick}
className="relative w-full bg-[#16A34A] text-white font-bold py-3 rounded-lg flex items-center justify-center gap-2 hover:bg-green-700 transition-colors"
>
<ShieldCheck size={18} />
<span>Claim Your Bonus Now</span>
</button>
</div>

<p className="text-xs text-brand-muted/80">
18+ | T&Cs apply. Please gamble responsibly.
</p>
</div>
);
});

export default BettingPromotionWidget;

// =================================================================
// FILE: src\components\CountryDropdown.tsx
// =================================================================

"use client";

import { useState, useRef, useEffect } from 'react';
import Image from 'next/image';
import { ChevronDown, Globe } from 'lucide-react';
import { useQuery } from '@tanstack/react-query';
import axios from 'axios';
import { Country } from '@/types/api-football';
import { useLeagueContext } from '@/context/LeagueContext';
import { useTranslation } from '@/hooks/useTranslation';

const fetchCountries = async (): Promise<Country[]> => {
const { data } = await axios.get('/api/countries');
return data;
};

export default function CountryDropdown() {
const [isOpen, setIsOpen] = useState(false);
const dropdownRef = useRef<HTMLDivElement>(null);
const { t } = useTranslation();

const { selectedCountry, setSelectedCountry } = useLeagueContext();

const globalOption: Country = {
name: t('global'),
code: 'GLOBAL_VIEW',
flagUrl: '',
};

const { data: countries, isLoading } = useQuery<Country[]>({
queryKey: ['countries', globalOption.name],
queryFn: fetchCountries,
staleTime: 1000 * 60 * 60 * 24,
refetchOnWindowFocus: false,
select: (data) => {
return [globalOption, ...data];
},
});

useEffect(() => {
const handleClickOutside = (event: MouseEvent) => {
if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
setIsOpen(false);
}
};
document.addEventListener('mousedown', handleClickOutside);
return () => document.removeEventListener('mousedown', handleClickOutside);
}, []);

const handleSelect = (country: Country) => {
if (country.code === 'GLOBAL_VIEW') {
setSelectedCountry(null);
} else {
setSelectedCountry(country);
}
setIsOpen(false);
};

return (
<div className="relative" ref={dropdownRef}>
<button
onClick={() => setIsOpen(!isOpen)}
disabled={isLoading}
className="flex items-center gap-2 bg-brand-secondary px-4 py-2 rounded-lg text-brand-light font-medium hover:bg-gray-700/50 transition-colors disabled:opacity-50 disabled:cursor-wait w-40 justify-between"
>
{isLoading ? (
<span className="flex-grow text-left">{t('loading')}...</span>
) : selectedCountry ? (
<>
<Image
src={selectedCountry.flagUrl}
alt={selectedCountry.name}
width={20}
height={15}
className="flex-shrink-0"
/>
<span className="truncate flex-grow text-left">{selectedCountry.name}</span>
</>
) : (
<>
<Globe size={16} className="flex-shrink-0" />
<span className="truncate flex-grow text-left">{t('global')}</span>
</>
)}
<ChevronDown size={16} className={`transition-transform duration-200 flex-shrink-0 ${isOpen ? 'rotate-180' : ''}`} />
</button>

{isOpen && countries && (
<div className="absolute top-full mt-2 w-56 max-h-80 overflow-y-auto bg-brand-secondary rounded-lg shadow-lg z-50 border border-gray-700/50 custom-scrollbar">
<ul className="text-brand-light">
{countries.map((country) => (
<li key={country.code || country.name}>
<button
onClick={() => handleSelect(country)}
className="flex w-full items-center gap-3 px-4 py-2.5 text-sm hover:bg-brand-purple transition-colors"
>
{country.code === 'GLOBAL_VIEW' ? (
<Globe size={16} className="h-4 w-5 text-center" />
) : (
<Image src={country.flagUrl} alt={country.name} width={20} height={15} />
)}
<span>{country.name}</span>
</button>
</li>
))}
</ul>
</div>
)}
</div>
);
}

// =================================================================
// FILE: src\components\DatePicker.tsx
// =================================================================

"use client";

import { useState, useRef, useEffect } from 'react';
import { format } from 'date-fns';
import { DayPicker } from 'react-day-picker';
import { Calendar as CalendarIcon } from 'lucide-react';
import 'react-day-picker/dist/style.css';

interface DatePickerProps {
date: Date;
setDate: (date: Date) => void;
}

export default function DatePicker({ date, setDate }: DatePickerProps) {
const [isOpen, setIsOpen] = useState(false);
const dropdownRef = useRef<HTMLDivElement>(null);

useEffect(() => {
const handleClickOutside = (event: MouseEvent) => {
if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
setIsOpen(false);
}
};
document.addEventListener('mousedown', handleClickOutside);
return () => document.removeEventListener('mousedown', handleClickOutside);
}, []);

const handleDaySelect = (selectedDate: Date | undefined) => {
if (selectedDate) {
setDate(selectedDate);
setIsOpen(false);
}
};

return (
<div className="relative" ref={dropdownRef}>
<button
onClick={() => setIsOpen(!isOpen)}
className="flex items-center justify-center gap-2 w-full min-w-[280px] text-lg font-bold p-2 rounded-md hover:bg-brand-purple"
>
<CalendarIcon size={20} />
<span>{format(date, 'eeee, dd MMMM yyyy')}</span>
</button>

{isOpen && (
<div className="absolute top-full mt-2 bg-brand-secondary border border-gray-600 rounded-lg shadow-lg z-20 p-2">
<DayPicker
mode="single"
selected={date}
onSelect={handleDaySelect}
initialFocus

classNames={{
caption: 'flex justify-center py-2 mb-4 relative items-center',
caption_label: 'text-sm font-medium text-white',
nav: 'flex items-center',
nav_button: 'h-6 w-6 bg-transparent hover:bg-brand-purple p-1 rounded-md',
nav_button_previous: 'absolute left-1.5',
nav_button_next: 'absolute right-1.5',
table: 'w-full border-collapse',
head_row: 'flex font-medium text-brand-muted',
head_cell: 'w-full p-2',
row: 'flex w-full mt-2',
cell: 'text-white',
day: 'h-8 w-8 p-0 hover:bg-brand-purple rounded-md',
day_selected: 'bg-brand-purple font-bold',
day_today: 'bg-gray-700 rounded-md',
day_outside: 'text-brand-muted opacity-50',
day_disabled: 'text-brand-muted opacity-50 cursor-not-allowed',
}}
/>
</div>
)}
</div>
);
}

// =================================================================
// FILE: src\components\DesktopLiveMatchCard .tsx
// =================================================================

"use client";

import { useState, useMemo } from 'react';
import Image from 'next/image';
import { format } from 'date-fns';
import Link from '@/components/StyledLink';
import { History, ChevronDown, BarChart2 } from 'lucide-react';
import VotingPanel from './VotingPanel';
import { useTranslation } from '@/hooks/useTranslation';

interface MatchCardProps {
match: any;
}

export default function LiveMatchCard({ match }: MatchCardProps) {
const { fixture, teams, goals, league, events } = match;
const [isExpanded, setIsExpanded] = useState(false);
const { t } = useTranslation();

const isLive = ['1H', 'HT', '2H', 'ET', 'P'].includes(fixture.status.short);
const isFinished = ['FT', 'AET', 'PEN'].includes(fixture.status.short);
const isUpcoming = !isLive && !isFinished;

const momentumData = useMemo(() => {
if (!isLive || !events || events.length === 0) return { teamId: null, type: null };
const lastMajorEvent = [...events].reverse().find(e => e.type === 'Goal' || (e.type === 'Card' && e.detail === 'Red Card'));
if (!lastMajorEvent) return { teamId: null, type: null };
let momentumTeamId = lastMajorEvent.team.id;
if (lastMajorEvent.type === 'Card') {
momentumTeamId = momentumTeamId === teams.home.id ? teams.away.id : teams.home.id;
}
return { teamId: momentumTeamId, type: lastMajorEvent.type };
}, [events, isLive, teams.home.id, teams.away.id]);

return (
<div className="bg-[#252837] rounded-xl overflow-hidden transition-all duration-300 ease-in-out">
<div className="p-4">
<div className="flex justify-between items-center text-sm text-brand-muted mb-4">
<span className="font-semibold truncate pr-4">{league.name} - {league.round}</span>
{isLive && <div className="flex items-center gap-2 flex-shrink-0"><span className="relative flex h-2 w-2"><span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-red-400 opacity-75"></span><span className="relative inline-flex rounded-full h-2 w-2 bg-brand-live"></span></span><span className="text-brand-live font-semibold">{fixture.status.elapsed}' {t('live')}</span></div>}
{isFinished && <div className="flex items-center gap-1.5 bg-gray-700/50 text-gray-300 px-2 py-1 rounded-full"><History size={12} /><span className="font-semibold text-xs">{t('finished')}</span></div>}
{isUpcoming && <div className="font-bold text-brand-light">{format(new Date(fixture.date), "HH:mm")}</div>}
</div>

<div className="flex items-center justify-between">
{}
<div className="flex-1 flex flex-col items-center text-center gap-2 min-w-0">
<div className="relative">
<Image src={teams.home.logo} alt={teams.home.name} width={64} height={64} className="object-contain h-16"/>
{momentumData.teamId === teams.home.id && (
<span className="absolute -top-1 -right-1 flex h-3 w-3">
<span className={`absolute inline-flex h-full w-full rounded-full ${momentumData.type === 'Goal' ? 'bg-green-400' : 'bg-red-400'} opacity-75 animate-ping`}></span>
<span className={`relative inline-flex rounded-full h-3 w-3 ${momentumData.type === 'Goal' ? 'bg-green-500' : 'bg-red-500'}`}></span>
</span>
)}
</div>
<h3 className="font-bold text-lg mt-2 text-brand-light w-full truncate">{teams.home.name}</h3>
</div>

{}
<div className="text-4xl font-black text-white px-2 sm:px-4">
{goals.home ?? 0} - {goals.away ?? 0}
</div>

{}
<div className="flex-1 flex flex-col items-center text-center gap-2 min-w-0">
<div className="relative">
<Image src={teams.away.logo} alt={teams.away.name} width={64} height={64} className="object-contain h-16"/>
{momentumData.teamId === teams.away.id && (
<span className="absolute -top-1 -right-1 flex h-3 w-3">
<span className={`absolute inline-flex h-full w-full rounded-full ${momentumData.type === 'Goal' ? 'bg-green-400' : 'bg-red-400'} opacity-75 animate-ping`}></span>
<span className={`relative inline-flex rounded-full h-3 w-3 ${momentumData.type === 'Goal' ? 'bg-green-500' : 'bg-red-500'}`}></span>
</span>
)}
</div>
<h3 className="font-bold text-lg mt-2 text-brand-light w-full truncate">{teams.away.name}</h3>
</div>
</div>

<div className="flex items-center justify-center gap-4 mt-4 border-t border-gray-700/50 pt-3">
<Link href={`/football/match/${fixture.id}`} className="flex items-center gap-2 text-xs text-brand-muted hover:text-white transition-colors">
<BarChart2 size={14} />
<span>{t('match_details')}</span>
</Link>
{!isFinished && (
<button
onClick={() => setIsExpanded(!isExpanded)}
className="flex items-center gap-2 text-xs text-green-400 hover:text-green-300 font-bold transition-all duration-300 rounded-lg px-3 py-1 bg-green-500/10"
aria-label={isExpanded ? t('hide_panel') : t('vote_and_see_poll')}
>
<span>{isExpanded ? t('hide_panel') : t('vote_and_see_poll')}</span>
<ChevronDown size={16} className={`transition-transform duration-300 ${isExpanded ? 'rotate-180' : ''}`} />
</button>
)}
</div>
</div>

<div className={`transition-all duration-300 ease-in-out grid ${isExpanded ? 'grid-rows-[1fr]' : 'grid-rows-[0fr]'}`}>
<div className="overflow-hidden">
{isExpanded && <div className="p-4 space-y-4">
<VotingPanel fixtureId={fixture.id} teams={teams} />
</div>}
</div>
</div>
</div>
);
}

// =================================================================
// FILE: src\components\DesktopMatchListItem.tsx
// =================================================================

"use client";

import { useMemo } from 'react';
import Image from 'next/image';
import Link from '@/components/StyledLink';
import { format } from 'date-fns';
import { useQuery } from '@tanstack/react-query';
import axios from 'axios';
import { Star } from 'lucide-react';
import { generateMatchSlug } from '@/lib/generate-match-slug';

type Odds = {
home: string;
draw: string;
away: string;
} | undefined | null;

const fetchPreMatchOdds = async (fixtureId: number): Promise<Odds> => {
try {
const { data } = await axios.get(`/api/odds?fixture=${fixtureId}`);
return data;
} catch {
return null;
}
};

export default function DesktopMatchListItem({ match, liveOdds }: { match: any, liveOdds?: Odds }) {
const { fixture, teams, goals } = match;
const slug = generateMatchSlug(teams.home, teams.away, fixture.id);

const isLive = ['1H', 'HT', '2H', 'ET', 'P', 'LIVE'].includes(fixture.status.short);
const isFinished = ['FT', 'AET', 'PEN'].includes(fixture.status.short);

const { data: preMatchOdds, isLoading: isLoadingPreMatchOdds } = useQuery({
queryKey: ['preMatchOdds', fixture.id],
queryFn: () => fetchPreMatchOdds(fixture.id),
enabled: !isFinished && !isLive,
staleTime: 1000 * 60 * 60,
refetchOnWindowFocus: false,
});

const displayOdds = isLive ? liveOdds : preMatchOdds;

const lowestOdd = useMemo(() => {
if (!displayOdds) return null;
const oddValues = [parseFloat(displayOdds.home), parseFloat(displayOdds.draw), parseFloat(displayOdds.away)];
return Math.min(...oddValues);
}, [displayOdds]);

const OddBox = ({ value }: { value: string | undefined }) => {
const isLowest = parseFloat(value || '999') === lowestOdd;
return (
<div className={`flex items-center justify-center p-2 rounded-md w-14 h-8 text-sm font-bold transition-colors duration-200 hover:bg-gray-600 ${
isLowest ? 'bg-yellow-500/20 text-brand-yellow' : 'bg-transparent text-text-secondary'
}`}>
{value || '-'}
</div>
);
};

return (
<Link
href={`/football/match/${slug}`}

className="group flex items-center p-2 rounded-lg transition-all duration-300 ease-in-out border border-transparent hover:-translate-y-1 hover:shadow-xl hover:shadow-[#ed5c19]/10 hover:border-[#ed5c19]"
style={{ backgroundColor: 'var(--color-secondary)' }}
>
{}
<div className="w-16 flex-shrink-0 text-center text-sm font-semibold">
{isLive ? <div className="text-brand-live">{fixture.status.elapsed}'</div> : isFinished ? <div className="text-text-muted">FT</div> : <div className="text-text-primary">{format(new Date(fixture.date), "HH:mm")}</div>}
</div>

{}
<div className="flex-1 flex flex-col gap-1.5">
<div className="flex items-center gap-3"><Image src={teams.home.logo} alt={teams.home.name} width={20} height={20} /><span className="font-semibold text-base text-text-primary">{teams.home.name}</span></div>
<div className="flex items-center gap-3"><Image src={teams.away.logo} alt={teams.away.name} width={20} height={20} /><span className="font-semibold text-base text-text-primary">{teams.away.name}</span></div>
</div>

{}
<div className="flex-1 flex items-center justify-center gap-1">
{isFinished ? (
<div className="h-8"></div>
) : isLoadingPreMatchOdds ? (
<div className="flex items-center justify-center gap-1 w-full"><div className="w-14 h-8 rounded-md animate-pulse" style={{backgroundColor: 'var(--color-primary)'}}></div><div className="w-14 h-8 rounded-md animate-pulse" style={{backgroundColor: 'var(--color-primary)'}}></div><div className="w-14 h-8 rounded-md animate-pulse" style={{backgroundColor: 'var(--color-primary)'}}></div></div>
) : displayOdds ? (
<>
<OddBox value={displayOdds.home} />
<OddBox value={displayOdds.draw} />
<OddBox value={displayOdds.away} />
</>
) : (
<div className="flex items-center justify-center w-full h-8"><span className="text-xs font-semibold text-text-muted">No Odds Available</span></div>
)}
</div>

{}
<div className="w-10 flex-shrink-0 flex flex-col items-center gap-1.5 text-base font-bold text-text-primary">
<span>{goals.home ?? '-'}</span>
<span>{goals.away ?? '-'}</span>
</div>

{}
<div className="w-16 flex-shrink-0 flex items-center justify-end">
<button className="p-2 text-text-muted transition-colors duration-300 group-hover:text-brand-yellow">
<Star size={20} />
</button>
</div>
</Link>
);
}

export const MatchListItemSkeleton = () => (
<div className="flex items-center p-3 rounded-lg animate-pulse" style={{ backgroundColor: 'var(--color-secondary)' }}>
<div className="w-20 flex-shrink-0">
<div className="h-5 w-10 mx-auto rounded bg-gray-600/50"></div>
</div>
<div className="flex-1 flex flex-col gap-3">
<div className="flex items-center justify-between">
<div className="flex items-center gap-3 w-3/5"><div className="w-6 h-6 rounded-full bg-gray-600/50"></div><div className="h-5 w-full rounded bg-gray-600/50"></div></div>
<div className="h-5 w-6 rounded bg-gray-600/50"></div>
</div>
<div className="flex items-center justify-between">
<div className="flex items-center gap-3 w-3/5"><div className="w-6 h-6 rounded-full bg-gray-600/50"></div><div className="h-5 w-full rounded bg-gray-600/50"></div></div>
<div className="h-5 w-6 rounded bg-gray-600/50"></div>
</div>
</div>
<div className="w-16 flex-shrink-0 flex items-center justify-end">
<div className="h-6 w-6 rounded-full bg-gray-600/50"></div>
</div>
</div>
);

// =================================================================
// FILE: src\components\DirectoryCard.tsx
// =================================================================

"use client";

import Image from 'next/image';
import StyledLink from './StyledLink';
import { Shield, Trophy } from 'lucide-react';

interface CardProps {
id: number;
name: string;
logoUrl: string;
countryName?: string;
type?: 'League' | 'Cup' | 'Team';
href: string;
}

export default function DirectoryCard({ name, logoUrl, countryName, type, href }: CardProps) {
return (
<StyledLink href={href} className="block group">
<div className="bg-brand-secondary rounded-lg p-4 h-full flex items-center gap-4 transition-all duration-300 transform hover:-translate-y-1 hover:shadow-lg hover:shadow-purple-900/20">
<Image
src={logoUrl}
alt={`${name} logo`}
width={48}
height={48}
className="bg-white rounded-full p-1 flex-shrink-0"
/>
<div className="flex-1 min-w-0">
<h3 className="font-bold text-white truncate group-hover:text-brand-purple transition-colors">{name}</h3>
{countryName && <p className="text-sm text-brand-muted truncate">{countryName}</p>}
</div>
{type && type !== 'Team' && (
<div className={`flex-shrink-0 p-2 rounded-full ${type === 'League' ? 'bg-blue-900/50 text-blue-300' : 'bg-yellow-900/50 text-yellow-400'}`}>
{type === 'League' ? <Shield size={20}/> : <Trophy size={20}/>}
</div>
)}
</div>
</StyledLink>
);
}

export const DirectoryCardSkeleton = () => (
<div className="bg-brand-secondary rounded-lg p-4 h-full flex items-center gap-4 animate-pulse">
<div className="w-12 h-12 rounded-full bg-gray-700/50 flex-shrink-0"></div>
<div className="flex-1 min-w-0 space-y-2">
<div className="h-5 w-3/4 rounded bg-gray-600/50"></div>
<div className="h-4 w-1/2 rounded bg-gray-600/50"></div>
</div>
</div>
);

// =================================================================
// FILE: src\components\explore\BrowseByCountry.tsx
// =================================================================

"use client";

import StyledLink from "../StyledLink";
import { Globe } from "lucide-react";

export default function BrowseByCountry() {
return (
<StyledLink href="/countries" className="block w-full bg-brand-secondary p-4 rounded-lg text-center hover:bg-gray-700/50 transition-colors">
<Globe className="mx-auto mb-2 text-brand-muted" size={32} />
<h3 className="font-bold text-lg text-white">Browse by Country</h3>
<p className="text-sm text-brand-muted">Find leagues and cups from all over the world.</p>
</StyledLink>
);
}

// =================================================================
// FILE: src\components\explore\PopularLeaguesSlider.tsx
// =================================================================

"use client";

import Slider from "react-slick";
import { useQuery } from "@tanstack/react-query";
import axios from "axios";
import { League } from "@/types/api-football";
import StyledLink from "../StyledLink";
import Image from "next/image";

const LeagueSliderCard = ({ league }: { league: League }) => (
<div className="px-2">
<StyledLink href={league.href} className="block group">
<div className="bg-brand-secondary rounded-lg p-3 flex flex-col items-center justify-center text-center h-32 transition-all duration-300 transform hover:-translate-y-1 hover:shadow-lg hover:shadow-purple-900/20">
<Image
src={league.logoUrl}
alt={league.name}
width={48}
height={48}
className="bg-white rounded-full p-1 mb-2"
/>
<h4 className="font-bold text-white text-sm truncate w-full group-hover:text-brand-purple transition-colors">{league.name}</h4>
</div>
</StyledLink>
</div>
);

const SkeletonCard = () => (
<div className="px-2"><div className="bg-brand-secondary rounded-lg h-32 animate-pulse"></div></div>
);

const fetchPopularLeagues = async (): Promise<League[]> => {

const { data } = await axios.get('/api/leagues?type=league');
return data;
};

export default function PopularLeaguesSlider() {
const { data: leagues, isLoading } = useQuery({
queryKey: ['popularLeaguesExplore'],
queryFn: fetchPopularLeagues,
staleTime: 1000 * 60 * 60,
});

const sliderSettings = {
dots: false,
infinite: false,
speed: 500,
slidesToShow: 4,
slidesToScroll: 2,
arrows: false,
responsive: [
{ breakpoint: 768, settings: { slidesToShow: 3.2 } },
{ breakpoint: 640, settings: { slidesToShow: 2.2 } },
]
};

if (isLoading) {
return <Slider {...sliderSettings} className="-mx-2"><SkeletonCard /><SkeletonCard /><SkeletonCard /></Slider>;
}

if (!leagues) return null;

return (
<Slider {...sliderSettings} className="-mx-2">
{leagues.map(league => (
<LeagueSliderCard key={league.id} league={league} />
))}
</Slider>
);
}

// =================================================================
// FILE: src\components\explore\PopularTeamsGrid.tsx
// =================================================================

"use client";

import { useQuery } from '@tanstack/react-query';
import axios, { AxiosResponse } from 'axios';
import StyledLink from '../StyledLink';
import Image from 'next/image';
import slugify from 'slugify';

interface TeamData { team: { id: number; name: string; logo: string; } }
interface ApiResponse { response: TeamData[] }

const POPULAR_TEAM_IDS = [
33,
40,
42,
47,
50,
529,
541,
157,
496,
489,
];

const generateTeamSlug = (name: string, id: number) => {
const slug = slugify(name, { lower: true, strict: true });
return `/team/${slug}-${id}`;
};

const fetchPopularTeams = async (): Promise<TeamData[]> => {

const teamPromises = POPULAR_TEAM_IDS.map(id =>
axios.get<ApiResponse>(`${process.env.NEXT_PUBLIC_API_FOOTBALL_HOST}/teams?id=${id}`, {
headers: { 'x-apisports-key': process.env.NEXT_PUBLIC_API_FOOTBALL_KEY }
})
);

const results = await Promise.allSettled(teamPromises);

const successfulTeams = results
.filter((result): result is PromiseFulfilledResult<AxiosResponse<ApiResponse>> =>
result.status === 'fulfilled' && result.value.data.response.length > 0
)
.map(result => result.value.data.response[0]);

return successfulTeams;
};

const SkeletonCard = () => (
<div className="bg-brand-secondary rounded-lg h-24 animate-pulse"></div>
);

export default function PopularTeamsGrid() {
const { data: teams, isLoading } = useQuery<TeamData[]>({
queryKey: ['popularTeamsGrid'],
queryFn: fetchPopularTeams,
staleTime: 1000 * 60 * 60 * 24,
refetchOnWindowFocus: false,
});

return (
<section>
<div className="flex justify-between items-center mb-4">
<h2 className="text-xl font-bold text-white">Popular Teams</h2>
</div>

{isLoading ? (
<div className="grid grid-cols-3 sm:grid-cols-4 md:grid-cols-5 gap-4">
{Array.from({ length: POPULAR_TEAM_IDS.length }).map((_, i) => <SkeletonCard key={i} />)}
</div>
) : !teams || teams.length === 0 ? (
<div className="bg-brand-secondary rounded-lg p-6 text-center text-brand-muted">
<p>Could not load popular teams data.</p>
</div>
) : (
<div className="grid grid-cols-3 sm:grid-cols-4 md:grid-cols-5 gap-4">
{teams.map(({ team }) => (
<StyledLink
key={team.id}
href={generateTeamSlug(team.name, team.id)}
className="bg-brand-secondary rounded-lg p-4 flex items-center justify-center h-24 transition-all duration-300 transform hover:-translate-y-1 hover:shadow-lg hover:shadow-purple-900/20"
title={team.name}
>
<Image
src={team.logo}
alt={team.name}
width={64}
height={64}
className="object-contain max-h-16"
/>
</StyledLink>
))}
</div>
)}
</section>
);
}

// =================================================================
// FILE: src\components\ExploreTab.tsx
// =================================================================

"use client";

import { Search } from 'lucide-react';
import PopularLeaguesSlider from './explore/PopularLeaguesSlider';
import PopularTeamsGrid from './explore/PopularTeamsGrid';
import BrowseByCountry from './explore/BrowseByCountry';

export default function ExploreTab() {
return (
<div className="p-4 space-y-8">
{}
<div className="relative">
<Search className="absolute left-3 top-1/2 -translate-y-1/2 text-brand-muted" size={20} />
<input
type="text"
placeholder="Search for leagues, teams..."
className="w-full bg-brand-secondary border border-gray-700/50 rounded-lg p-3 pl-10 text-white focus:outline-none focus:ring-2 focus:ring-brand-purple"
/>
</div>

<section>
<h2 className="text-xl font-bold text-white mb-4">Popular Leagues</h2>
<PopularLeaguesSlider />
</section>

{}
<PopularTeamsGrid />

<section>
<BrowseByCountry />
</section>
</div>
);
}

// =================================================================
// FILE: src\components\FinishedMatchSlide.tsx
// =================================================================

"use client";

import Image from 'next/image';
import { format } from 'date-fns';
import { Calendar, History } from 'lucide-react';

interface MatchSlideProps {
match: any;
}

export default function FinishedMatchSlide({ match }: MatchSlideProps) {
const { teams, fixture, goals, league } = match;

return (
<div className="relative w-full h-64 overflow-hidden rounded-2xl bg-brand-secondary text-white">
{}
<Image
src="https:
alt="Dark stadium background"
layout="fill"
objectFit="cover"
className="z-0 opacity-80"
/>
<div className="absolute inset-0 bg-black/70 z-10" />

{}
<div className="relative z-20 flex h-full flex-col items-center justify-center p-4">
<p className="font-semibold tracking-wider text-brand-muted flex items-center gap-2">
<History size={14} />
Recent Result
</p>
<p className="text-sm text-brand-muted mb-4">{league.round}</p>

<div className="flex items-center justify-around w-full max-w-2xl my-2">
{}
<div className="flex flex-col items-center gap-2 text-center w-1/3">
<Image src={teams.home.logo} alt={teams.home.name} width={48} height={48}/>
<h2 className="text-xl font-bold truncate">{teams.home.name}</h2>
</div>

{}
<span className="text-5xl font-black text-white mx-4">
{goals.home} - {goals.away}
</span>

{}
<div className="flex flex-col items-center gap-2 text-center w-1/3">
<Image src={teams.away.logo} alt={teams.away.name} width={48} height={48}/>
<h2 className="text-xl font-bold truncate">{teams.away.name}</h2>
</div>
</div>

<div className="mt-6 flex items-center gap-2 text-brand-muted">
<Calendar size={16} />
<span>{format(new Date(fixture.date), "dd MMMM yyyy")}</span>
</div>
</div>
</div>
);
}

// =================================================================
// FILE: src\components\Header.tsx
// =================================================================

"use client";

import { useState } from 'react';
import { usePathname } from 'next/navigation';
import Image from 'next/image';
import { Bell, Menu, X, Aperture, ArrowRight } from 'lucide-react';
import CountryDropdown from './CountryDropdown';
import LanguageDropdown from './LanguageDropdown';
import { useTranslation } from '@/hooks/useTranslation';
import StyledLink from './StyledLink';
import NavDropdown from './NavDropdown';

export default function Header() {
const { t } = useTranslation();
const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
const pathname = usePathname();

const navItems = [
{
title: t('football'),
isDropdown: true,
subLinks: [
{ name: t('leagues'), href: '/football/leagues', description: 'Browse all competitions' },
{ name: t('teams'), href: '/football/teams', description: 'Find your favorite club' },
{ name: t('news'), href: '/football/news', description: 'The latest headlines' },
],
href: '/'
},

{ title: t('basketball'), href: '/basketball' },
{ title: t('tennis'), href: '/tennis' },
];

const handleMobileLinkClick = () => {
setIsMobileMenuOpen(false);
};

return (
<header className="bg-grey-700/50 top-0 z-50 border-b border-gray-700/50">
<div className="container mx-auto flex h-20 items-center justify-between px-4 lg:px-6">

<StyledLink href="/" className="flex items-center gap-3 group">
<Image src={"/fanskor.webp"} alt='fanskor-logo' width={250} height={100} />
</StyledLink>

{}
<nav className="hidden lg:flex items-center gap-8">
{navItems.map((item) => (
<li key={item.title} className="list-none">
{item.isDropdown && item.subLinks ? (
<NavDropdown title={item.title} subLinks={item.subLinks} />
) : (
<StyledLink
href={item.href!}
className={`relative py-2 text-base font-medium transition-colors ${pathname.startsWith(item.href!) ? 'text-white' : 'text-brand-muted hover:text-white'}`}
>
{item.title}
</StyledLink>
)}
</li>
))}
</nav>

<div className="flex items-center gap-4">
<div className="hidden lg:flex items-center gap-4">
<LanguageDropdown />
<CountryDropdown />
</div>
<button className="lg:hidden text-brand-muted" onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}>
{isMobileMenuOpen ? <X size={28} /> : <Menu size={28} />}
</button>
</div>
</div>

{}
{isMobileMenuOpen && (
<div className="lg:hidden bg-brand-dark border-t border-gray-700/50 p-4 space-y-4">
<nav>
<ul className="space-y-2">
{navItems.map((item) => (
<li key={item.title}>
{item.isDropdown ? (
<div className="space-y-2">
<p className="p-3 text-sm font-bold uppercase text-brand-muted tracking-wider">{item.title}</p>
<ul className="space-y-1 pl-4 border-l-2 border-gray-700/50">
{item.subLinks!.map(subLink => (
<li key={subLink.name}>
<StyledLink href={subLink.href} onClick={handleMobileLinkClick} className="flex justify-between items-center w-full rounded-lg p-3 text-base font-medium text-brand-light hover:bg-gray-700/50">
<span>{subLink.name}</span>
<ArrowRight size={16} />
</StyledLink>
</li>
))}
</ul>
</div>
) : (
<StyledLink href={item.href!} onClick={handleMobileLinkClick} className="block w-full rounded-lg p-3 text-base font-medium text-brand-light hover:bg-gray-700/50">
{item.title}
</StyledLink>
)}
</li>
))}
</ul>
</nav>
<hr className="border-gray-700/50" />
<div className="flex items-center justify-between gap-4">
<CountryDropdown />
<LanguageDropdown />
</div>
</div>
)}
</header>
);
}

// =================================================================
// FILE: src\components\LanguageDropdown.tsx
// =================================================================

"use client";

import { useState } from 'react';
import { useLanguage } from '@/context/LanguageContext';
import { ChevronDown } from 'lucide-react';
import Image from 'next/image';

const languages = {
en: { name: 'English', flag: '/flags/gb.png' },
tr: { name: 'Türkçe', flag: '/flags/tr.png' }
};

export default function LanguageDropdown() {
const [isOpen, setIsOpen] = useState(false);
const { locale, setLocale } = useLanguage();

const selectedLanguage = languages[locale];

return (
<div className="relative">
<button
onClick={() => setIsOpen(!isOpen)}
className="flex items-center gap-2 bg-brand-secondary px-3 py-2 rounded-lg text-brand-light font-medium hover:bg-gray-700/50 transition-colors"
>
<Image src={selectedLanguage.flag} alt={selectedLanguage.name} width={20} height={15} />
<span className="text-sm hidden md:block">{selectedLanguage.name}</span>
<ChevronDown size={16} className={`transition-transform duration-200 ${isOpen ? 'rotate-180' : ''}`} />
</button>

{isOpen && (
<div className="absolute top-full mt-2 w-40 bg-brand-secondary rounded-lg shadow-lg z-50 border border-gray-700/50">
<ul className="text-brand-light">
{(Object.keys(languages) as Array<keyof typeof languages>).map((key) => (
<li key={key}>
<button
onClick={() => { setLocale(key); setIsOpen(false); }}
className="flex w-full items-center gap-3 px-4 py-2.5 text-sm hover:bg-brand-purple transition-colors"
>
<Image src={languages[key].flag} alt={languages[key].name} width={20} height={15} />
<span>{languages[key].name}</span>
</button>
</li>
))}
</ul>
</div>
)}
</div>
);
}

// =================================================================
// FILE: src\components\LayoutSkeletons.tsx
// =================================================================

export const HeaderSkeleton = () => (

<div className="h-20 w-full" style={{ backgroundColor: 'var(--color-primary)' }}></div>
);

export const SidebarSkeleton = () => (

<div className="hidden lg:block w-72 rounded-xl" style={{ backgroundColor: 'var(--color-primary)' }}></div>
);

// =================================================================
// FILE: src\components\league-detail-view\index.tsx
// =================================================================

"use client";

import Image from 'next/image';
import { Shield, Users, Trophy, Flag } from 'lucide-react';

import LeagueStatCard from './LeagueStatCard';
import LeagueFixturesWidget from './LeagueFixturesWidget';
import LeagueStandingsWidget from './LeagueStandingsWidget';
import LeagueTopScorersWidget from './LeagueTopScorersWidget';
import LeagueTeamsList from './LeagueTeamsList';

export default function LeagueDetailView({ leagueData }: { leagueData: any }) {
const { league, country, seasons } = leagueData;
const currentSeason = seasons.find((s: any) => s.current === true)?.year || new Date().getFullYear();

return (
<div className="flex flex-col gap-8">

{}
<div className="flex flex-col items-center text-center gap-4 p-4 bg-brand-secondary rounded-xl">
<Image src={league.logo} alt={league.name} width={80} height={80} className="bg-white rounded-full p-2" />
<h1 className="text-4xl font-extrabold text-white">{league.name}</h1>
<div className="flex items-center gap-2 text-brand-muted">
<Image src={country.flag} alt={country.name} width={20} height={20} />
<span>{country.name}</span>
</div>
</div>

{}
<div className="grid grid-cols-2 md:grid-cols-4 gap-4">
<LeagueStatCard icon={<Shield />} label="Type" value={league.type} />
<LeagueStatCard icon={<Flag />} label="Country" value={country.name} />
<LeagueStatCard icon={<Trophy />} label="Current Season" value={currentSeason} />
<LeagueStatCard icon={<Users />} label="Teams" value={seasons[0]?.coverage?.fixtures?.events ? '20' : 'N/A'} />
</div>

{}
<div className="grid grid-cols-1 lg:grid-cols-3 gap-8">

{}
<div className="lg:col-span-2 space-y-8">
<LeagueFixturesWidget leagueId={league.id} season={currentSeason} />
</div>

{}
<div className="lg:col-span-1 space-y-8">
{league.type === 'League' && <LeagueStandingsWidget leagueId={league.id} season={currentSeason} />}
<LeagueTopScorersWidget leagueId={league.id} season={currentSeason} />
</div>

</div>

{}
<LeagueTeamsList leagueId={league.id} season={currentSeason} />

</div>
);
}

// =================================================================
// FILE: src\components\league-detail-view\LeagueFixturesWidget.tsx
// =================================================================

"use client";
import { useState, useMemo } from "react";
import { useQuery } from "@tanstack/react-query";
import axios from "axios";
import MatchListItem, { MatchListItemSkeleton } from "../MatchListItem";

const fetchFixtures = async (leagueId: number, season: number) => {
const { data } = await axios.get(`/api/fixtures?league=${leagueId}&season=${season}`);
return data;
};

export default function LeagueFixturesWidget({ leagueId, season }: { leagueId: number, season: number }) {
const [activeTab, setActiveTab] = useState<'upcoming' | 'results'>('upcoming');

const { data: allMatches, isLoading } = useQuery({
queryKey: ['seasonFixtures', leagueId, season],
queryFn: () => fetchFixtures(leagueId, season),
staleTime: 1000 * 60 * 5,
});

const filteredMatches = useMemo(() => {
if (!allMatches) return [];
if (activeTab === 'upcoming') {
return allMatches.filter((m: any) => !['FT', 'AET', 'PEN'].includes(m.fixture.status.short));
} else {
return allMatches.filter((m: any) => ['FT', 'AET', 'PEN'].includes(m.fixture.status.short)).reverse();
}
}, [allMatches, activeTab]);

return (
<div className="bg-brand-secondary rounded-xl p-4">
<div className="flex justify-between items-center mb-4">
<h3 className="text-xl font-bold text-white">Fixtures</h3>
<div className="flex items-center gap-1 bg-gray-700/50 p-1 rounded-lg">
<button onClick={() => setActiveTab('upcoming')} className={`px-3 py-1 text-sm rounded-md font-semibold transition-colors ${activeTab === 'upcoming' ? 'bg-brand-purple text-white' : 'text-brand-muted'}`}>Upcoming</button>
<button onClick={() => setActiveTab('results')} className={`px-3 py-1 text-sm rounded-md font-semibold transition-colors ${activeTab === 'results' ? 'bg-brand-purple text-white' : 'text-brand-muted'}`}>Results</button>
</div>
</div>

<div className="space-y-3 max-h-[600px] overflow-y-auto custom-scrollbar pr-2">
{isLoading && Array.from({ length: 8 }).map((_, i) => <MatchListItemSkeleton key={i} />)}
{filteredMatches && filteredMatches.length > 0 ? (
filteredMatches.slice(0, 15).map((match: any) => <MatchListItem key={match.fixture.id} match={match} />)
) : (
!isLoading && <p className="text-center py-10 text-brand-muted">No {activeTab} matches found.</p>
)}
</div>
</div>
);
}

// =================================================================
// FILE: src\components\league-detail-view\LeagueStandingsWidget.tsx
// =================================================================

"use client";

import { useQuery } from '@tanstack/react-query';
import axios from 'axios';
import Image from 'next/image';

const fetchStandings = async (leagueId: number, season: number) => {
const { data } = await axios.get(`/api/standings?league=${leagueId}&season=${season}`);
return data;
};

const SkeletonRow = () => (
<div className="flex items-center p-2 animate-pulse">
<div className="w-6 h-4 bg-gray-600/50 rounded"></div>
<div className="flex-1 flex items-center gap-3 ml-3">
<div className="w-6 h-6 rounded-full bg-gray-600/50"></div>
<div className="w-3/4 h-4 bg-gray-600/50 rounded"></div>
</div>
<div className="w-8 h-4 bg-gray-600/50 rounded"></div>
</div>
);

export default function LeagueStandingsWidget({ leagueId, season }: { leagueId: number, season: number }) {
const { data, isLoading } = useQuery({
queryKey: ['leagueStandings', leagueId, season],
queryFn: () => fetchStandings(leagueId, season),
});

if (isLoading) return (
<div className="bg-brand-secondary rounded-xl p-4">
<h3 className="text-xl font-bold text-white mb-4">Standings</h3>
<div className="space-y-2">{Array.from({length: 5}).map((_, i) => <SkeletonRow key={i}/>)}</div>
</div>
);

if (!data?.standings || data.standings.length === 0) {
return null;
}

return (
<div className="bg-brand-secondary rounded-xl p-4">
<h3 className="text-xl font-bold text-white mb-4">Standings</h3>
<div className="space-y-1">
{data.standings.slice(0, 10).map((team: any, index: number) => (
<div key={team.team.id} className={`flex items-center p-2 rounded-md ${index < 4 ? 'bg-blue-900/30' : ''}`}>
<span className="font-mono text-sm text-brand-muted w-6 text-center">{team.rank}</span>
<div className="flex-1 flex items-center gap-3 ml-2">
<Image src={team.team.logo} alt={team.team.name} width={24} height={24} />
<span className="font-semibold text-white truncate">{team.team.name}</span>
</div>
<span className="font-bold text-white w-8 text-right">{team.points}</span>
</div>
))}
</div>
{}
</div>
);
}

// =================================================================
// FILE: src\components\league-detail-view\LeagueStatCard.tsx
// =================================================================

import { ReactNode } from 'react';

interface LeagueStatCardProps {
icon: ReactNode;
label: string;
value: string | number;
}

export default function LeagueStatCard({ icon, label, value }: LeagueStatCardProps) {
return (
<div className="bg-brand-secondary p-4 rounded-lg flex items-center gap-4">
<div className="flex-shrink-0 bg-brand-purple/20 text-brand-purple p-3 rounded-lg">
{icon}
</div>
<div>
<p className="text-sm text-brand-muted">{label}</p>
<p className="font-bold text-white text-lg">{value}</p>
</div>
</div>
);
}

// =================================================================
// FILE: src\components\league-detail-view\LeagueTeamsList.tsx
// =================================================================

"use client";

import { useQuery } from '@tanstack/react-query';
import axios from 'axios';
import TeamCard, { TeamCardSkeleton } from './TeamCard';

const fetchTeams = async (leagueId: number, season: number) => {
const { data } = await axios.get(`/api/teams?league=${leagueId}&season=${season}`);
return data;
};

export default function LeagueTeamsList({ leagueId, season }: { leagueId: number, season: number }) {
const { data: teams, isLoading } = useQuery({
queryKey: ['teams', leagueId, season],
queryFn: () => fetchTeams(leagueId, season),
staleTime: 1000 * 60 * 60 * 24,
});

if (!teams && !isLoading) return null;

return (
<div className="bg-brand-secondary rounded-xl p-4">
<h3 className="text-xl font-bold text-white mb-4">Participating Teams</h3>
<div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
{isLoading && Array.from({ length: 12 }).map((_, i) => <TeamCardSkeleton key={i} />)}
{teams?.map((teamData: any) => (
<TeamCard key={teamData.team.id} teamData={teamData} />
))}
</div>
</div>
);
}

// =================================================================
// FILE: src\components\league-detail-view\LeagueTopScorersWidget.tsx
// =================================================================

"use client";
import { useQuery } from '@tanstack/react-query';
import axios from 'axios';
import Image from 'next/image';
import { Trophy } from 'lucide-react';

const fetchTopScorers = async (leagueId: number, season: number) => {
const { data } = await axios.get(`/api/top-scorers?league=${leagueId}&season=${season}`);
return data;
};

const SkeletonRow = () => (
<div className="flex items-center gap-4 p-2 animate-pulse">
<div className="w-10 h-10 rounded-full bg-gray-600/50"></div>
<div className="flex-1 space-y-2">
<div className="h-4 w-3/4 bg-gray-600/50 rounded"></div>
<div className="h-3 w-1/2 bg-gray-600/50 rounded"></div>
</div>
<div className="w-8 h-8 rounded-full bg-gray-600/50"></div>
</div>
);

export default function LeagueTopScorersWidget({ leagueId, season }: { leagueId: number, season: number }) {
const { data: topScorers, isLoading } = useQuery({
queryKey: ['topScorers', leagueId, season],
queryFn: () => fetchTopScorers(leagueId, season),
});

if (isLoading) return (
<div className="bg-brand-secondary rounded-xl p-4">
<h3 className="text-xl font-bold text-white mb-4">Golden Boot Race</h3>
<div className="space-y-3">{Array.from({length: 3}).map((_, i) => <SkeletonRow key={i} />)}</div>
</div>
);

if (!topScorers || topScorers.length === 0) {
return null;
}

return (
<div className="bg-brand-secondary rounded-xl p-4">
<h3 className="text-xl font-bold text-white mb-4">Golden Boot Race</h3>
<div className="space-y-3">
{topScorers.slice(0, 5).map((scorer: any, index: number) => (
<div key={scorer.player.id} className="flex items-center gap-4">
<Image src={scorer.player.photo} alt={scorer.player.name} width={40} height={40} className="rounded-full bg-gray-800" />
<div className="flex-1">
<p className="font-bold text-white">{scorer.player.name}</p>
<p className="text-xs text-brand-muted">{scorer.statistics[0].team.name}</p>
</div>
<div className={`flex items-center justify-center gap-2 font-bold text-lg p-2 rounded-lg ${index === 0 ? 'text-yellow-300 bg-yellow-500/10' : 'text-white'}`}>
<Trophy size={16} />
<span>{scorer.statistics[0].goals.total}</span>
</div>
</div>
))}
</div>
</div>
);
}

// =================================================================
// FILE: src\components\league-detail-view\TeamCard.tsx
// =================================================================

"use client";

import Image from 'next/image';
import Link from '@/components/StyledLink';
import { MapPin } from 'lucide-react';
import slugify from 'slugify';

interface TeamCardProps {
teamData: {
team: {
id: number;
name: string;
logo: string;
founded: number;
};
venue: {
name: string;
city: string;
image: string;
};
};
}

const generateTeamSlug = (name: string, id: number) => {
const slug = slugify(name, { lower: true, strict: true });
return `/team/${slug}-${id}`;
};

export default function TeamCard({ teamData }: TeamCardProps) {
const { team, venue } = teamData;
const teamUrl = generateTeamSlug(team.name, team.id);

return (
<Link href={teamUrl} className="block group">
<div className="relative bg-brand-secondary rounded-lg overflow-hidden h-full flex flex-col transition-all duration-300 transform group-hover:-translate-y-1 group-hover:shadow-lg group-hover:shadow-purple-900/20">

{}
<div className="relative w-full h-28">
<Image
src={venue.image || "https:
alt={`${venue.name} stadium`}
layout="fill"
objectFit="cover"
className="opacity-20 group-hover:opacity-30 transition-opacity"
/>
</div>

{}
<div className="absolute top-16 left-1/2 -translate-x-1/2 w-24 h-24 bg-gray-800 rounded-full flex items-center justify-center p-2 ring-4 ring-brand-secondary">
<Image
src={team.logo}
alt={`${team.name} logo`}
width={72}
height={72}
className="object-contain"
/>
</div>

{}
<div className="flex-1 flex flex-col justify-between text-center p-4 pt-16">
<div>
<h3 className="text-xl font-bold text-white group-hover:text-brand-purple transition-colors">{team.name}</h3>
{team.founded && (
<p className="text-sm text-brand-muted">Founded in {team.founded}</p>
)}
</div>

<div className="mt-4 pt-4 border-t border-gray-700/50">
<div className="flex items-center justify-center gap-2 text-sm text-brand-muted">
<MapPin size={14} />
<span className="truncate">{venue.name}, {venue.city}</span>
</div>
</div>
</div>
</div>
</Link>
);
}

export const TeamCardSkeleton = () => (
<div className="bg-brand-secondary rounded-lg overflow-hidden h-full flex flex-col animate-pulse">
<div className="w-full h-28 bg-gray-700/50"></div>
<div className="flex-1 flex flex-col items-center p-4 pt-16">
<div className="absolute top-16 w-24 h-24 bg-gray-800 rounded-full ring-4 ring-brand-secondary"></div>
<div className="h-6 w-3/4 rounded bg-gray-600/50 mb-2"></div>
<div className="h-4 w-1/2 rounded bg-gray-600/50"></div>
<div className="flex-1"></div>
<div className="h-4 w-full mt-4 pt-4 border-t border-gray-700/50 rounded bg-gray-600/50"></div>
</div>
</div>
);

// =================================================================
// FILE: src\components\LeagueStandingsSlide.tsx
// =================================================================

"use client";

import { useQuery } from "@tanstack/react-query";
import axios from "axios";
import Image from "next/image";
import { League } from "@/types/api-football";

type StandingsData = {
league: { id: number; name: string; logo: string; };
standings: TeamStanding[];
};
type TeamStanding = {
rank: number;
team: { id: number; name: string; logo: string };
points: number;
all: { played: number };
};

const fetchStandingsForLeague = async (leagueId: number): Promise<StandingsData | null> => {
try {
const { data } = await axios.get(`/api/standings?league=${leagueId}`);

if (!data || !data.standings || data.standings.length === 0) {
return null;
}
return data;
} catch (error) {
console.error(`Failed to fetch standings for league ${leagueId}:`, error);
return null;
}
};

const SlideSkeleton = () => (
<div className="bg-brand-secondary rounded-xl p-4 lg:p-6 animate-pulse">
<div className="h-7 w-3/4 rounded bg-gray-600/50 mb-4"></div>
<div className="space-y-3 mt-4">
{Array.from({ length: 5 }).map((_, i) => <div key={i} className="h-5 w-full rounded bg-gray-600/50"></div>)}
</div>
</div>
);

export default function LeagueStandingsSlide({ league }: { league: League }) {
const { data, isLoading } = useQuery<StandingsData | null>({
queryKey: ['standings', league.id],
queryFn: () => fetchStandingsForLeague(league.id),
staleTime: 1000 * 60 * 10,
});

if (isLoading) return <SlideSkeleton />;

if (!data) {
return null;
}

const topStandings = data.standings.slice(0, 5);

return (
<div className="bg-brand-secondary rounded-xl p-4 lg:p-6 h-full">
<div className="flex items-center gap-3 mb-4">
<Image src={data.league.logo} alt={data.league.name} width={32} height={32}/>
<h3 className="text-xl font-bold text-brand-light truncate">{data.league.name}</h3>
</div>
{}
<table className="w-full text-sm">
<thead className="text-brand-muted text-xs">
<tr className="border-b border-gray-700/50">
<th className="p-2 font-semibold text-left w-8">#</th>
<th className="p-2 font-semibold text-left">Team</th>
<th className="p-2 font-semibold text-center">P</th>
<th className="p-2 font-semibold text-center">Pts</th>
</tr>
</thead>
<tbody>
{topStandings.map((team: TeamStanding) => (
<tr key={team.team.id} className="border-t border-gray-700/50">
<td className="p-2 text-center">{team.rank}</td>
<td className="p-2 flex items-center gap-2 font-medium truncate">
<Image src={team.team.logo} alt={team.team.name} width={16} height={16} />
{team.team.name}
</td>
<td className="p-2 text-center text-brand-muted">{team.all.played}</td>
<td className="p-2 text-center font-bold text-brand-light">{team.points}</td>
</tr>
))}
</tbody>
</table>
</div>
);
}

// =================================================================
// FILE: src\components\LiveMatchCard.tsx
// =================================================================

"use client";

import { useState, useMemo } from 'react';
import Image from 'next/image';
import { format } from 'date-fns';
import Link from '@/components/StyledLink';
import { History, BarChart2, Star } from 'lucide-react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import axios from 'axios';
import { useVoteStorage } from '@/hooks/useVoteStorage';
import { useTranslation } from '@/hooks/useTranslation';

interface VoteData {
homeVotes: number;
drawVotes: number;
awayVotes: number;
}

const getVotes = async (fixtureId: number): Promise<VoteData> => {
const { data } = await axios.get(`/api/votes?fixture=${fixtureId}`);
return data;
};

const submitVote = async ({ fixtureId, vote }: { fixtureId: number; vote: string }): Promise<VoteData> => {
const { data } = await axios.post('/api/votes', { fixtureId, vote });
return data;
};

const TeamRow = ({ team, score, hasMomentum, momentumType, onVote, isVotedFor, isDisabled }: any) => (
<div className="flex justify-between items-center">
<div className="flex items-center gap-3 min-w-0">
<div className="relative flex-shrink-0">
<Image src={team.logo} alt={team.name} width={32} height={32} className="object-contain h-8 w-8"/>
{hasMomentum && (
<span className="absolute -top-1 -right-1 flex h-3 w-3">
<span className={`absolute inline-flex h-full w-full rounded-full ${momentumType === 'Goal' ? 'bg-green-400' : 'bg-red-400'} opacity-75 animate-ping`}></span>
<span className={`relative inline-flex rounded-full h-3 w-3 ${momentumType === 'Goal' ? 'bg-green-500' : 'bg-red-500'}`}></span>
</span>
)}
</div>
<span className="font-bold text-white truncate">{team.name}</span>
</div>
<div className="flex items-center gap-3">
<span className="text-xl font-black text-white">{score ?? 0}</span>
<button onClick={onVote} disabled={isDisabled} className="disabled:cursor-not-allowed disabled:opacity-50">
<Star size={20} className={`transition-all duration-200 ${isVotedFor ? 'text-yellow-400 fill-yellow-400' : 'text-gray-500 hover:text-yellow-400'}`} />
</button>
</div>
</div>
);

export default function MobileLiveMatchCard({ match }: { match: any }) {
const { fixture, teams, goals, league, events } = match;
const { t } = useTranslation();
const queryClient = useQueryClient();
const { setVote, getVoteForFixture } = useVoteStorage();

const isFinished = ['FT', 'AET', 'PEN'].includes(fixture.status.short);

const [votedFor, setVotedFor] = useState<'home' | 'away' | null>(() => getVoteForFixture(fixture.id) as 'home' | 'away' | null);

const { data: voteData } = useQuery({
queryKey: ['votes', fixture.id],
queryFn: () => getVotes(fixture.id),
staleTime: 1000 * 60,
enabled: !isFinished,
});

const voteMutation = useMutation({
mutationFn: submitVote,
onSuccess: () => {
queryClient.invalidateQueries({ queryKey: ['votes', fixture.id] });
},
});

const handleVote = (choice: 'home' | 'away') => {
if (votedFor) return;
setVotedFor(choice);
setVote(fixture.id, choice);
voteMutation.mutate({ fixtureId: fixture.id, vote: choice });
};

const momentumData = useMemo(() => {

if (!['1H', 'HT', '2H', 'ET', 'P'].includes(fixture.status.short) || !events || events.length === 0) return { teamId: null, type: null };
const lastMajorEvent = [...events].reverse().find(e => e.type === 'Goal' || (e.type === 'Card' && e.detail === 'Red Card'));
if (!lastMajorEvent) return { teamId: null, type: null };
let momentumTeamId = lastMajorEvent.team.id;
if (lastMajorEvent.type === 'Card') {
momentumTeamId = momentumTeamId === teams.home.id ? teams.away.id : teams.home.id;
}
return { teamId: momentumTeamId, type: lastMajorEvent.type };
}, [events, fixture.status.short, teams.home.id, teams.away.id]);

const totalVotes = (voteData?.homeVotes || 0) + (voteData?.awayVotes || 0);
const homePercent = totalVotes > 0 ? Math.round(((voteData?.homeVotes || 0) / totalVotes) * 100) : 50;

return (
<div className="bg-[#252837] rounded-xl overflow-hidden flex flex-col">
{}
<div className="flex justify-between items-center p-3 border-b border-gray-700/50">
<div className="flex items-center gap-2 min-w-0">
<Image src={league.logo} alt={league.name} width={20} height={20} className="flex-shrink-0" />
<span className="text-sm font-semibold truncate text-brand-muted">{league.name}</span>
</div>
<div className="flex-shrink-0">
{['1H', 'HT', '2H', 'ET', 'P'].includes(fixture.status.short) && <div className="flex items-center gap-1.5 text-brand-live font-semibold text-xs"><span className="relative flex h-2 w-2"><span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-red-400 opacity-75"></span><span className="relative inline-flex rounded-full h-2 w-2 bg-brand-live"></span></span><span>{fixture.status.elapsed}'</span></div>}
{isFinished && <div className="flex items-center gap-1.5 bg-gray-700/50 text-gray-300 px-2 py-0.5 rounded-full text-xs font-semibold"><History size={12} /><span>{t('finished')}</span></div>}
{!isFinished && !['1H', 'HT', '2H', 'ET', 'P'].includes(fixture.status.short) && <div className="font-bold text-brand-light text-sm">{format(new Date(fixture.date), "HH:mm")}</div>}
</div>
</div>

{}
<div className="p-3 space-y-2">
<TeamRow
team={teams.home}
score={goals.home}
hasMomentum={momentumData.teamId === teams.home.id}
momentumType={momentumData.type}
onVote={() => handleVote('home')}
isVotedFor={votedFor === 'home'}
isDisabled={!!votedFor || isFinished}
/>
<TeamRow
team={teams.away}
score={goals.away}
hasMomentum={momentumData.teamId === teams.away.id}
momentumType={momentumData.type}
onVote={() => handleVote('away')}
isVotedFor={votedFor === 'away'}
isDisabled={!!votedFor || isFinished}
/>
</div>

{}
{votedFor && voteData && (
<div className="px-3 pb-3 space-y-2">
<div className="flex justify-between items-center">
<span className="text-xs font-bold text-white">{homePercent}%</span>
<span className="text-xs font-semibold text-brand-muted">Community Rating</span>
<span className="text-xs font-bold text-white">{100 - homePercent}%</span>
</div>
<div className="flex w-full h-1.5 rounded-full overflow-hidden bg-gray-700">
<div className="bg-brand-purple" style={{ width: `${homePercent}%` }}></div>
<div className="bg-blue-600" style={{ width: `${100 - homePercent}%` }}></div>
</div>
</div>
)}

{}
<div className="p-2 bg-gray-900/30 flex justify-end items-center">
<Link href={`/football/match/${fixture.id}`} className="flex items-center gap-2 text-xs text-brand-muted hover:text-white transition-colors py-1 px-2">
<BarChart2 size={14} />
<span>{t('match_details')}</span>
</Link>
</div>
</div>
);
}

export const MatchCardSkeleton = () => (
<div className="bg-[#252837] rounded-xl p-4 flex flex-col gap-4 animate-pulse">
<div className="flex justify-between items-center">
<div className="h-4 w-1/3 rounded bg-gray-600/50"></div>
<div className="h-4 w-1/4 rounded bg-gray-600/50"></div>
</div>
<div className="flex items-center justify-between py-4">
<div className="flex flex-col items-center gap-2 w-1/3"><div className="h-12 w-12 rounded-full bg-gray-600/50"></div><div className="h-4 w-2/3 rounded bg-gray-600/50"></div></div>
<div className="h-8 w-1/4 rounded bg-gray-600/50"></div>
<div className="flex flex-col items-center gap-2 w-1/3"><div className="h-12 w-12 rounded-full bg-gray-600/50"></div><div className="h-4 w-2/3 rounded bg-gray-600/50"></div></div>
</div>
<div className="h-10 w-full rounded-lg bg-gray-600/50 mt-auto"></div>
</div>
);

// =================================================================
// FILE: src\components\LiveMatchUpdater.tsx
// =================================================================

"use client";

import { useQuery } from '@tanstack/react-query';
import axios from 'axios';

import SidebarMatchItem, { SidebarMatchItemSkeleton } from './SidebarMatchItem';

interface MatchData {
fixture: { id: number; status: { elapsed: number; }; };
teams: { home: any; away: any; };
goals: { home: any; away: any; };
}

const fetchGlobalLiveMatches = async (): Promise<MatchData[]> => {
const { data } = await axios.get('/api/global-live');
return data;
};

export default function LiveMatchUpdater({ initialLiveMatches }: { initialLiveMatches: MatchData[] }) {

const { data: liveMatches, isLoading } = useQuery<MatchData[]>({
queryKey: ['globalLiveMatches'],
queryFn: fetchGlobalLiveMatches,
initialData: initialLiveMatches,
refetchInterval: 30000,
});

if (!liveMatches || liveMatches.length === 0) {
return <p className="text-sm text-brand-muted text-center py-4">No matches are currently live.</p>;
}

return (
<div className="space-y-1">
{}
{liveMatches.slice(0, 5).map(match => (
<SidebarMatchItem key={match.fixture.id} match={match} />
))}
</div>
);
}

// =================================================================
// FILE: src\components\MainContent.tsx
// =================================================================

"use client";

import { useState, Dispatch, SetStateAction } from 'react';
import { useLeagueContext } from "@/context/LeagueContext";
import { League } from '@/types/api-football';

import MatchList from './MatchList';
import StandingsDisplay from './StandingsDisplay';
import NewsSection from './NewsSection';
import MobileHomeTabs from './MobileHomeTabs';
import LeagueDetailView from './league-detail-view';
import AdSlotWidget from './AdSlotWidget';

export default function MainContent() {
const { selectedLeague } = useLeagueContext();
const [liveLeagues, setLiveLeagues] = useState<League[]>([]);

if (selectedLeague) {
return (
<div className="flex-1 p-4 lg:p-8">
<LeagueDetailView leagueData={selectedLeague} />
</div>
);
}

return (
<>
{}
<div className="hidden lg:grid lg:grid-cols-3 lg:gap-8 flex-1 p-8">

{}
<div className="lg:col-span-2 flex flex-col gap-8">
<MatchList setLiveLeagues={setLiveLeagues} />
</div>

{}
<div className="lg:col-span-1 flex flex-col gap-8">
<StandingsDisplay liveLeagues={liveLeagues} />

{}
<div className="sticky top-8 space-y-8">
{}
<AdSlotWidget />
<NewsSection />
</div>
</div>
</div>

{}
<div className="block lg:hidden w-full">
<MobileHomeTabs liveLeagues={liveLeagues} setLiveLeagues={setLiveLeagues} />
</div>
</>
);
}

// =================================================================
// FILE: src\components\match\BettingPromotionWidget.tsx
// =================================================================

"use client";

import { memo } from 'react';
import Image from 'next/image';
import { ShieldCheck } from 'lucide-react';

const BettingPromotionWidget = memo(function BettingPromotionWidget() {

const handleBetClick = () => {
console.log("Redirecting to casino partner from sidebar widget...");

};

return (
<div className="bg-gradient-to-br from-green-500/20 to-brand-purple/20 p-4 rounded-xl border border-green-400/30 text-center space-y-3">

{}
{}

<h3 className="text-lg font-bold text-white">
Exclusive Welcome Offer!
</h3>
<p className="text-sm text-brand-light">
Get a <span className="font-bold text-green-400">100% bonus</span> on your first deposit to bet on this match.
</p>

{}
<div className="relative pt-2">
<span className="absolute top-2 left-0 inline-flex h-full w-full rounded-lg bg-green-400 opacity-75 animate-ping"></span>
<button
onClick={handleBetClick}
className="relative w-full bg-[#16A34A] text-white font-bold py-3 rounded-lg flex items-center justify-center gap-2 hover:bg-green-700 transition-colors"
>
<ShieldCheck size={18} />
<span>Claim Your Bonus</span>
</button>
</div>

<p className="text-xs text-brand-muted/80">
18+ | T&Cs apply. Gamble responsibly.
</p>
</div>
);
});

export default BettingPromotionWidget;

// =================================================================
// FILE: src\components\match\FormGuide.tsx
// =================================================================

"use client";
import { memo } from 'react';

const FormGuide = memo(function FormGuide({ form, teamId }: { form: any[], teamId: number }) {
if (!form || form.length === 0) return null;

return (
<div className="flex items-center gap-1.5">
{form.map((match: any) => {
const goals = match.goals;
const home = match.teams.home;

let result = 'D';
if (goals.home !== goals.away) {
const winnerId = goals.home > goals.away ? home.id : match.teams.away.id;
result = winnerId === teamId ? 'W' : 'L';
}

const classes = {
W: 'bg-green-500 text-green-900',
D: 'bg-gray-500 text-gray-900',
L: 'bg-red-500 text-red-900',
};

return (
<span key={match.fixture.id} className={`flex items-center justify-center w-6 h-6 rounded-full text-xs font-bold ${classes[result as keyof typeof classes]}`}>
{result}
</span>
);
})}
</div>
);
});
export default FormGuide;

// =================================================================
// FILE: src\components\match\MatchAnalyticsWidget.tsx
// =================================================================

import { memo } from 'react';
import Image from 'next/image';
import { CheckCircle, XCircle, ShieldQuestion, TrendingUp, TrendingDown } from 'lucide-react';

const FormGuide = memo(function FormGuide({ formString }: { formString: string }) {
if (!formString) return <span className="text-xs text-text-muted">N/A</span>;

return (
<div className="flex items-center gap-1.5">
{formString.split('').slice(0, 5).map((result, index) => {
const classes = {
W: 'bg-green-500 text-green-900',
D: 'bg-gray-500 text-gray-900',
L: 'bg-red-500 text-red-900',
};
return (
<span
key={index}
className={`flex items-center justify-center w-6 h-6 rounded-full text-xs font-bold ${classes[result as keyof typeof classes]}`}
>
{result}
</span>
);
})}
</div>
);
});

const MatchAnalyticsWidget = memo(function MatchAnalyticsWidget({ analytics }: { analytics: any }) {

if (!analytics?.prediction || !analytics.homeTeamStats || !analytics.awayTeamStats) {
return (
<div className="bg-brand-secondary rounded-xl">
<h3 className="text-lg font-bold p-4 border-b border-gray-700/50">Prediction & Form</h3>
<p className="text-text-muted text-center py-8">Analytics are not available for this match.</p>
</div>
);
}

const { prediction, homeTeamStats, awayTeamStats } = analytics;
const { percent } = prediction.predictions;
const btts = prediction.comparison.btts === 'Yes';
const overUnder = prediction.comparison.under_over === 'Over 2.5';

const homePercent = parseFloat(percent.home.replace('%', ''));
const drawPercent = parseFloat(percent.draw.replace('%', ''));
const awayPercent = parseFloat(percent.away.replace('%', ''));

return (
<div className="bg-brand-secondary rounded-xl">
<h3 className="text-lg font-bold p-4 border-b border-gray-700/50">Prediction & Form</h3>
<div className="p-4 space-y-5">

{}
<div>
<div className="flex justify-between items-center mb-1.5">
<div className="flex flex-col items-center gap-1 text-center">
<Image src={homeTeamStats.team.logo} alt={homeTeamStats.team.name} width={32} height={32} />
<span className="font-bold text-lg text-white">{homePercent}%</span>
</div>
<div className="flex flex-col items-center gap-1 text-center">
<span className="text-text-muted text-sm font-semibold">Draw</span>
<span className="font-bold text-lg text-white">{drawPercent}%</span>
</div>
<div className="flex flex-col items-center gap-1 text-center">
<Image src={awayTeamStats.team.logo} alt={awayTeamStats.team.name} width={32} height={32} />
<span className="font-bold text-lg text-white">{awayPercent}%</span>
</div>
</div>
{}
<div className="flex w-full h-2 rounded-full overflow-hidden" style={{ backgroundColor: 'var(--color-secondary)' }}>
<div className="bg-brand-purple" style={{ width: `${homePercent}%` }}></div>
<div className="bg-gray-500" style={{ width: `${drawPercent}%` }}></div>
<div className="bg-brand-highlight" style={{ width: `${awayPercent}%` }}></div>
</div>
</div>

{}
<div className="grid grid-cols-2 gap-3 text-sm">
<div className="flex items-center gap-2 p-3 rounded-lg" style={{backgroundColor: 'var(--color-primary)'}}>
{btts ? <CheckCircle size={20} className="text-green-400" /> : <XCircle size={20} className="text-red-400" />}
<span className="font-semibold">Both Teams to Score</span>
</div>
<div className="flex items-center gap-2 p-3 rounded-lg" style={{backgroundColor: 'var(--color-primary)'}}>
{overUnder ? <TrendingUp size={20} className="text-green-400" /> : <TrendingDown size={20} className="text-red-400" />}
<span className="font-semibold">Over 2.5 Goals</span>
</div>
</div>

{}
<div className="space-y-3">
<div className="flex items-center justify-between">
<span className="font-semibold text-text-secondary">{homeTeamStats.team.name}</span>
<FormGuide formString={homeTeamStats.form} />
</div>
<div className="flex items-center justify-between">
<span className="font-semibold text-text-secondary">{awayTeamStats.team.name}</span>
<FormGuide formString={awayTeamStats.form} />
</div>
</div>

{}
{prediction.predictions.advice && (
<div className="flex items-center gap-2 p-3 text-center rounded-lg border-2 border-dashed border-gray-700">
<ShieldQuestion size={20} className="text-brand-purple flex-shrink-0" />
<p className="text-sm font-semibold text-text-secondary">{prediction.predictions.advice}</p>
</div>
)}
</div>
</div>
);
});

export default MatchAnalyticsWidget;

// =================================================================
// FILE: src\components\match\MatchEventsWidget.tsx
// =================================================================

import { RefreshCw, Square, Target } from 'lucide-react';
import { memo } from 'react';
import Image from 'next/image';

function EventsTabContent({ events, teams }: { events: any[], teams: any }) {
if (!events || events.length === 0) {
return <p className="text-brand-muted text-center py-8">No key events were recorded for this match.</p>;
}

const getEventIcon = (event: any) => {
switch (event.type) {
case 'Goal': return <Target className="text-green-400" size={20} />;
case 'Card': return <Square className={event.detail === 'Yellow Card' ? 'text-yellow-400' : 'text-red-500'} size={20} />;
case 'subst': return <RefreshCw className="text-blue-400" size={18} />;
default: return null;
}
};

return (
<div className="relative p-4 md:p-6">
{}
<div className="absolute left-1/2 top-0 bottom-0 w-0.5 bg-gray-700/50"></div>

<div className="space-y-4">
{events.map((event, index) => {
const isHomeTeam = event.team.id === teams.home.id;

return (
<div key={index} className="flex justify-between items-center w-full">

{}
{isHomeTeam ? (
<>
<div className="w-[calc(50%-2.5rem)] md:w-[calc(50%-3rem)] relative">
<div className="absolute right-[-1px] top-1/2 -translate-y-1/2 w-4 h-4 bg-gray-800 rotate-45 z-0"></div>
<div className="bg-gray-800/80 rounded-lg p-3 relative z-10">
<div className="flex items-center gap-3">
<Image src={event.team.logo} alt={event.team.name} width={32} height={32} />
<div className="flex-1">
<p className="font-bold text-sm md:text-base">{event.player.name}</p>
{event.type === 'subst' && <p className="text-xs text-brand-muted">Replaced by {event.assist.name}</p>}
{event.type === 'Goal' && event.assist.name && <p className="text-xs text-brand-muted">Assist by {event.assist.name}</p>}
{event.type === 'Card' && <p className="text-xs text-brand-muted">{event.detail}</p>}
</div>
</div>
</div>
</div>

{}
<div className="w-12 h-12 bg-brand-secondary rounded-full flex items-center justify-center z-10 ring-4 ring-brand-secondary">
<div className="flex flex-col items-center">
{getEventIcon(event)}
<span className="text-xs font-bold">{event.time.elapsed}'</span>
</div>
</div>

{}
<div className="w-[calc(50%-2.5rem)] md:w-[calc(50%-3rem)]"></div>
</>
) : (
<>
{}
<div className="w-[calc(50%-2.5rem)] md:w-[calc(50%-3rem)]"></div>

{}
<div className="w-12 h-12 bg-brand-secondary rounded-full flex items-center justify-center z-10 ring-4 ring-brand-secondary">
<div className="flex flex-col items-center">
{getEventIcon(event)}
<span className="text-xs font-bold">{event.time.elapsed}'</span>
</div>
</div>

{}
<div className="w-[calc(50%-2.5rem)] md:w-[calc(50%-3rem)] relative">
<div className="absolute left-[-1px] top-1/2 -translate-y-1/2 w-4 h-4 bg-gray-800 rotate-45 z-0"></div>
<div className="bg-gray-800/80 rounded-lg p-3 relative z-10">
<div className="flex items-center gap-3 text-right flex-row-reverse">
<Image src={event.team.logo} alt={event.team.name} width={32} height={32} />
<div className="flex-1">
<p className="font-bold text-sm md:text-base">{event.player.name}</p>
{event.type === 'subst' && <p className="text-xs text-brand-muted">Replaced by {event.assist.name}</p>}
{event.type === 'Goal' && event.assist.name && <p className="text-xs text-brand-muted">Assist by {event.assist.name}</p>}
{event.type === 'Card' && <p className="text-xs text-brand-muted">{event.detail}</p>}
</div>
</div>
</div>
</div>
</>
)}
</div>
);
})}
</div>
</div>
);
}

function MatchEventsWidget({ events, teams }) {
return (
<div className="bg-brand-secondary rounded-xl">
<h3 className="text-lg font-bold p-4 border-b border-gray-700/50">Match Timeline</h3>
<EventsTabContent events={events} teams={teams} />
</div>
);
}

export default MatchEventsWidget;

// =================================================================
// FILE: src\components\match\MatchH2HWidget.tsx
// =================================================================

import { memo, useMemo } from 'react';
import { format } from 'date-fns';
import Image from 'next/image';
import Link from '@/components/StyledLink';
import { generateMatchSlug } from '@/lib/generate-match-slug';

const MatchH2HWidget = memo(function MatchH2HWidget({ h2h, teams, currentFixtureId }: { h2h: any[], teams: any, currentFixtureId: string }) {

const { pastMatches, summaryStats } = useMemo(() => {

const filteredPastMatches = h2h.filter(match => match.fixture.id.toString() !== currentFixtureId);

let stats = {
homeWins: 0,
awayWins: 0,
draws: 0,
};

filteredPastMatches.forEach(match => {
const home = match.teams.home;
const away = match.teams.away;
const goals = match.goals;

if (goals.home === goals.away) {
stats.draws++;
} else if (goals.home > goals.away) {

if (home.id === teams.home.id) stats.homeWins++;
else stats.awayWins++;
} else {
if (away.id === teams.home.id) stats.homeWins++;
else stats.awayWins++;
}
});

return { pastMatches: filteredPastMatches, summaryStats: stats };
}, [h2h, teams, currentFixtureId]);

if (pastMatches.length === 0) {
return (
<div className="bg-brand-secondary rounded-xl">
<h3 className="text-lg font-bold p-4 border-b border-gray-700/50">Head-to-Head</h3>
<p className="text-text-muted text-center py-8">No previous encounters found between these two teams.</p>
</div>
);
}

const totalMatches = summaryStats.homeWins + summaryStats.awayWins + summaryStats.draws;
const homeWinPercent = totalMatches > 0 ? (summaryStats.homeWins / totalMatches) * 100 : 0;
const drawPercent = totalMatches > 0 ? (summaryStats.draws / totalMatches) * 100 : 0;
const awayWinPercent = 100 - homeWinPercent - drawPercent;

return (
<div className="bg-brand-secondary rounded-xl">
<h3 className="text-lg font-bold p-4 border-b border-gray-700/50">Head-to-Head</h3>
<div className="p-4 md:p-6 space-y-6">

{}
<div>
<div className="flex justify-between items-center mb-1.5 text-sm font-semibold">
<div className="flex items-center gap-2">
<Image src={teams.home.logo} alt={teams.home.name} width={20} height={20}/>
<span>{summaryStats.homeWins} Wins</span>
</div>
<span className="text-text-muted">{summaryStats.draws} Draws</span>
<div className="flex items-center gap-2">
<span>{summaryStats.awayWins} Wins</span>
<Image src={teams.away.logo} alt={teams.away.name} width={20} height={20}/>
</div>
</div>
{}
<div className="flex w-full h-2 rounded-full overflow-hidden" style={{ backgroundColor: 'var(--color-secondary)' }}>
<div className="bg-brand-purple" style={{ width: `${homeWinPercent}%` }}></div>
<div className="bg-gray-500" style={{ width: `${drawPercent}%` }}></div>
<div className="bg-brand-highlight" style={{ width: `${awayWinPercent}%` }}></div>
</div>
</div>

{}
<div className="space-y-2">
<h4 className="text-md font-semibold text-text-muted">Recent Encounters</h4>
{pastMatches.slice(0, 5).map((match: any) => {
let resultType = 'draw';
if(match.goals.home > match.goals.away) {
resultType = match.teams.home.id === teams.home.id ? 'win' : 'loss';
} else if (match.goals.away > match.goals.home) {
resultType = match.teams.away.id === teams.home.id ? 'win' : 'loss';
}

const resultClasses = {
win: 'border-l-4 border-green-500 bg-green-900/20',
loss: 'border-l-4 border-red-500 bg-red-900/20',
draw: 'border-l-4 border-gray-500 bg-gray-900/20',
};

return (
<Link
href={`/football/match/${generateMatchSlug(match.teams.home, match.teams.away, match.fixture.id)}`}
key={match.fixture.id}
className={`block p-3 rounded-md flex items-center justify-between gap-4 transition-colors hover:bg-gray-700/50 ${resultClasses[resultType as keyof typeof resultClasses]}`}
>
<div className="text-center w-16 flex-shrink-0">
<p className="text-sm font-semibold">{format(new Date(match.fixture.date), 'dd MMM')}</p>
<p className="text-xs text-text-muted">{format(new Date(match.fixture.date), 'yyyy')}</p>
</div>
<div className="flex-1 flex items-center justify-center gap-3 text-sm font-semibold">
<span className="text-right flex-1 truncate">{match.teams.home.name}</span>
<Image src={match.teams.home.logo} alt={match.teams.home.name} width={24} height={24} />
<span style={{ backgroundColor: 'var(--color-primary)' }} className="px-3 py-1 rounded-md text-base font-black">
{match.goals.home} - {match.goals.away}
</span>
<Image src={match.teams.away.logo} alt={match.teams.away.name} width={24} height={24} />
<span className="text-left flex-1 truncate">{match.teams.away.name}</span>
</div>
<div className="w-1/5 text-right text-xs text-text-muted hidden md:block truncate">
{match.league.name}
</div>
</Link>
);
})}
</div>
</div>
</div>
);
});

export default MatchH2HWidget;

// =================================================================
// FILE: src\components\match\MatchHeader.tsx
// =================================================================

import { memo } from 'react';
import Image from 'next/image';
import { format } from 'date-fns';
import { Calendar, Clock, MapPin, User, Shield } from 'lucide-react';

interface MatchHeaderProps {
fixture: any;
}

const InfoItem = ({ icon, text }: { icon: React.ReactNode, text: string | null }) => {
if (!text) return null;
return (
<div className="flex items-center gap-2">
{icon}
<span className="text-xs sm:text-sm">{text}</span>
</div>
);
};

const MatchHeader = memo(function MatchHeader({ fixture }: MatchHeaderProps) {
const { league, teams, goals } = fixture;
const { date, venue, referee } = fixture.fixture;

return (

<div className="relative rounded-xl overflow-hidden bg-brand-secondary">
{}
<div className="absolute inset-0">
<Image
src="https:
alt="Stadium background"
layout="fill"
objectFit="cover"
className="opacity-10"
priority
/>
<div className="absolute inset-0 bg-gradient-to-t from-black/50 to-transparent"></div>
</div>

{}
<div className="relative p-4 sm:p-6 md:p-8 space-y-6 md:space-y-8">

{}
<div className="flex justify-around items-center text-white">
{}
<div className="flex-1 flex flex-col items-center gap-2 md:gap-4">
{}
<Image src={teams.home.logo} alt={teams.home.name} width={96} height={96} className="h-16 w-16 md:h-24 md:w-24 object-contain"/>
{}
<h2 className="text-lg sm:text-xl md:text-3xl font-bold text-center">{teams.home.name}</h2>
</div>

{}
<div className="px-2 sm:px-4">
{}
<p className="text-4xl sm:text-5xl md:text-7xl font-black">
{goals.home ?? 0} - {goals.away ?? 0}
</p>
</div>

{}
<div className="flex-1 flex flex-col items-center gap-2 md:gap-4">
{}
<Image src={teams.away.logo} alt={teams.away.name} width={96} height={96} className="h-16 w-16 md:h-24 md:w-24 object-contain"/>
{}
<h2 className="text-lg sm:text-xl md:text-3xl font-bold text-center">{teams.away.name}</h2>
</div>
</div>

{}
<div className="flex flex-wrap items-center justify-center gap-x-3 sm:gap-x-4 md:gap-x-6 gap-y-2 text-text-muted border-t border-gray-700/50 pt-4">
<InfoItem icon={<Shield size={14} />} text={`${league.name} - ${league.round}`} />
<InfoItem icon={<Calendar size={14} />} text={format(new Date(date), 'dd MMMM yyyy')} />
<InfoItem icon={<Clock size={14} />} text={format(new Date(date), 'HH:mm')} />
<InfoItem icon={<MapPin size={14} />} text={venue.name} />
<InfoItem icon={<User size={14} />} text={referee} />
</div>
</div>
</div>
);
});

export default MatchHeader;

// =================================================================
// FILE: src\components\match\MatchLineupsWidget.tsx
// =================================================================

"use client";

import { memo } from 'react';
import Image from 'next/image';
import Accordion from '@/components/Accordion';

const PlayerList = memo(function PlayerList({ title, players }: { title: string, players: any[] }) {
if (!players || players.length === 0) return null;

return (
<div>
<h4 className="font-bold text-base mb-3 mt-4 text-text-muted border-b border-gray-700/50 pb-2">
{title}
</h4>
<ul className="space-y-3 pt-2">
{players.map((p: any) => (
<li key={p.player.id} className="flex items-center gap-3 text-sm">
<span className="text-text-muted font-mono w-8 text-center flex-shrink-0">
{p.player.number}
</span>
<span className="font-medium text-text-secondary">
{p.player.name}
</span>
</li>
))}
</ul>
</div>
);
});

const MatchLineupsWidget = memo(function MatchLineupsWidget({ lineups }: { lineups: any[] }) {

if (!lineups || lineups.length < 2) {
return null;
}

const homeLineup = lineups[0];
const awayLineup = lineups[1];

const homeAccordionTitle = (
<div className="flex items-center gap-3">
<Image src={homeLineup.team.logo} alt={homeLineup.team.name} width={28} height={28}/>
<h3 className="font-bold text-lg text-white">
{homeLineup.team.name} Lineup
</h3>
</div>
);

const awayAccordionTitle = (
<div className="flex items-center gap-3">
<Image src={awayLineup.team.logo} alt={awayLineup.team.name} width={28} height={28}/>
<h3 className="font-bold text-lg text-white">
{awayLineup.team.name} Lineup
</h3>
</div>
);

return (

<div className="bg-brand-secondary rounded-xl overflow-hidden">

{}
<Accordion
title={homeAccordionTitle}
statusNode={<span className="text-sm font-mono text-text-muted">{homeLineup.formation}</span>}
defaultOpen={true}
>
<PlayerList title="Starting XI" players={homeLineup.startXI} />
<PlayerList title="Substitutes" players={homeLineup.substitutes} />
</Accordion>

{}
<Accordion
title={awayAccordionTitle}
statusNode={<span className="text-sm font-mono text-text-muted">{awayLineup.formation}</span>}

>
<PlayerList title="Starting XI" players={awayLineup.startXI} />
<PlayerList title="Substitutes" players={awayLineup.substitutes} />
</Accordion>
</div>
);
});

export default MatchLineupsWidget;

// =================================================================
// FILE: src\components\match\MatchStatsWidget.tsx
// =================================================================

import { memo } from 'react';

const StatsContent = memo(function StatsContent({ statistics, teams }: { statistics: any[], teams: any }) {

const homeStats = statistics.find(s => s.team.id === teams.home.id)?.statistics || [];
const awayStats = statistics.find(s => s.team.id === teams.away.id)?.statistics || [];

const allStatTypes = Array.from(new Set([...homeStats.map((s: any) => s.type), ...awayStats.map((s: any) => s.type)]));

return (

<div className="p-4 md:p-6 grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-5">
{allStatTypes.map(type => {

const homeStatValue = homeStats.find((s: any) => s.type === type)?.value ?? '0';
const awayStatValue = awayStats.find((s: any) => s.type === type)?.value ?? '0';

const homeValueNum = parseFloat(String(homeStatValue).replace('%', ''));
const awayValueNum = parseFloat(String(awayStatValue).replace('%', ''));
const total = homeValueNum + awayValueNum;

const homePercent = total > 0 ? (homeValueNum / total) * 100 : 50;

return (
<div key={type}>
{}
<div className="flex justify-between items-center mb-1.5 text-sm font-semibold">
<span className="text-white w-1/4 text-left">{homeStatValue}</span>
<span className="text-text-muted w-1/2 text-center">{type}</span>
<span className="text-white w-1/4 text-right">{awayStatValue}</span>
</div>
{}
<div className="flex w-full h-2 rounded-full" style={{ backgroundColor: 'var(--color-secondary)' }}>
<div className="bg-brand-purple rounded-l-full" style={{ width: `${homePercent}%` }}></div>
<div className="bg-brand-highlight rounded-r-full" style={{ width: `${100 - homePercent}%` }}></div>
</div>
</div>
);
})}
</div>
);
});

const MatchStatsWidget = memo(function MatchStatsWidget({ statistics, teams }: { statistics: any[], teams: any }) {

if (!statistics || statistics.length < 2) {
return null;
}

return (
<div className="bg-brand-secondary rounded-xl">
<h3 className="text-lg font-bold p-4 border-b border-gray-700/50">
Team Statistics
</h3>
<StatsContent statistics={statistics} teams={teams} />
</div>
);
});

export default MatchStatsWidget;

// =================================================================
// FILE: src\components\match\MatchStatusBanner.tsx
// =================================================================

"use client";

import { memo } from 'react';
import { format } from 'date-fns';

interface MatchStatusBannerProps {
fixture: any;
}

const MatchStatusBanner = memo(function MatchStatusBanner({ fixture }: MatchStatusBannerProps) {
const status = fixture.fixture.status;

let content = <p>{status.long}</p>;
let bgClass = 'bg-gray-600';

switch (status.short) {
case 'TBD':
case 'NS':
content = <p>Upcoming - {format(new Date(fixture.fixture.date), 'HH:mm')}</p>;
bgClass = 'bg-blue-600';
break;
case '1H':
case 'HT':
case '2H':
case 'ET':
case 'P':
content = <p className="animate-pulse">{status.elapsed}' - {status.long}</p>;
bgClass = 'bg-red-600';
break;
case 'FT':
case 'AET':
case 'PEN':
content = <p>Full Time</p>;
bgClass = 'bg-gray-800';
break;
}

return (
<div className={`text-center font-bold text-white py-2 rounded-b-xl text-sm tracking-wider mb-8 ${bgClass}`}>
{content}
</div>
);
});

export default MatchStatusBanner;

// =================================================================
// FILE: src\components\match\WinProbability.tsx
// =================================================================

"use client";
import { memo } from 'react';
import { CircularProgressbar, buildStyles } from 'react-circular-progressbar';
import 'react-circular-progressbar/dist/styles.css';

const WinProbability = memo(function WinProbability({ home, draw, away }: { home: number, draw: number, away: number }) {
const homeColor = '#8B5CF6';
const awayColor = '#3B82F6';

return (
<div className="w-32 h-32 relative">
<div className="absolute inset-0 transform scale-75">
<CircularProgressbar
value={away}
styles={buildStyles({
pathColor: awayColor,
trailColor: 'transparent',
pathTransitionDuration: 0.5,
})}
/>
</div>
<CircularProgressbar
value={home + draw}
counterClockwise
styles={buildStyles({
pathColor: homeColor,
trailColor: 'transparent',
pathTransitionDuration: 0.5,
})}
/>
<div className="absolute inset-0 flex flex-col items-center justify-center">
<p className="text-xs text-brand-muted">DRAW</p>
<p className="font-black text-2xl text-white">{draw}%</p>
</div>
</div>
);
});
export default WinProbability;

// =================================================================
// FILE: src\components\MatchDateNavigator.tsx
// =================================================================

"use client";

import { useState, useRef, useEffect } from 'react';
import { format, addDays, subDays } from 'date-fns';
import { DayPicker } from 'react-day-picker';
import 'react-day-picker/dist/style.css';
import { Calendar as CalendarIcon, ChevronLeft, ChevronRight } from 'lucide-react';

interface DateNavigatorProps {
selectedDate: Date;
onDateChange: (date: Date) => void;
}

export default function MatchDateNavigator({ selectedDate, onDateChange }: DateNavigatorProps) {
const [isOpen, setIsOpen] = useState(false);
const dropdownRef = useRef<HTMLDivElement>(null);

useEffect(() => {
const handleClickOutside = (event: MouseEvent) => {
if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
setIsOpen(false);
}
};
document.addEventListener('mousedown', handleClickOutside);
return () => document.removeEventListener('mousedown', handleClickOutside);
}, []);

const handleDaySelect = (date: Date | undefined) => {
if (date) {
onDateChange(date);
setIsOpen(false);
}
};

const dayOfWeek = format(selectedDate, 'EEE').toUpperCase();

return (
<div className="relative w-full" ref={dropdownRef}>
<div className="flex items-center gap-2 rounded-lg p-1" style={{ backgroundColor: 'var(--color-secondary)'}}>
<button onClick={() => onDateChange(subDays(selectedDate, 1))} className="p-1.5 transition-colors hover:bg-gray-700/50 rounded-md">
<ChevronLeft size={20} />
</button>
<button onClick={() => setIsOpen(true)} className="flex items-center gap-2 px-3 py-1">
<CalendarIcon size={18} className="text-text-muted" />
<span className="font-semibold">{format(selectedDate, 'dd/MM')}</span>
<span className="font-bold text-text-muted">{dayOfWeek}</span>
</button>
<button onClick={() => onDateChange(addDays(selectedDate, 1))} className="p-1.5 transition-colors hover:bg-gray-700/50 rounded-md">
<ChevronRight size={20} />
</button>
</div>

{isOpen && (
<div className="absolute top-full right-0 mt-2 bg-primary border border-gray-700 rounded-lg shadow-lg z-20 p-2">
<DayPicker
mode="single"
selected={selectedDate}
onSelect={handleDaySelect}
initialFocus
classNames={{
caption: 'flex justify-center py-2 mb-4 relative items-center',
caption_label: 'text-sm font-medium text-white',
nav: 'flex items-center',
nav_button: 'h-6 w-6 bg-transparent hover:bg-brand-purple p-1 rounded-md',
nav_button_previous: 'absolute left-1.5',
nav_button_next: 'absolute right-1.5',
table: 'w-full border-collapse',
head_row: 'flex font-medium text-text-muted',
head_cell: 'w-full p-2',
row: 'flex w-full mt-2',
cell: 'text-white',
day: 'h-8 w-8 p-0 hover:bg-brand-purple rounded-md',
day_selected: 'bg-brand-purple font-bold',
day_today: 'bg-secondary rounded-md',
day_outside: 'text-text-muted opacity-50',
day_disabled: 'text-text-muted opacity-50 cursor-not-allowed',
}}
/>
</div>
)}
</div>
);
}

// =================================================================
// FILE: src\components\MatchList.tsx
// =================================================================

"use client";

import { useEffect, useMemo, useState, Dispatch, SetStateAction } from 'react';
import { useQuery } from "@tanstack/react-query";
import axios from "axios";
import Image from 'next/image';
import { useLeagueContext } from "@/context/LeagueContext";
import { useTranslation } from '@/hooks/useTranslation';
import { League } from '@/types/api-football';
import MatchListItem, { MatchListItemSkeleton } from './MatchListItem';
import MatchDateNavigator from './MatchDateNavigator';
import { Globe, ChevronsDown } from 'lucide-react';
import { format } from 'date-fns';

type StatusFilter = 'all' | 'live' | 'finished' | 'scheduled';
const STATUS_MAP: Record<StatusFilter, string[]> = {
all: [],
live: ['1H', 'HT', '2H', 'ET', 'P', 'LIVE'],
finished: ['FT', 'AET', 'PEN'],
scheduled: ['NS', 'TBD', 'PST'],
};
const INITIAL_MATCHES_TO_SHOW = 5;
const MATCHES_PER_PAGE = 5;

const fetchAllMatches = async (leagueId: number | null, date: Date): Promise<any[]> => {
const dateString = format(date, 'yyyy-MM-dd');
const url = leagueId ? `/api/fixtures?league=${leagueId}&date=${dateString}` : `/api/fixtures?date=${dateString}`;
const { data } = await axios.get(url);
return data;
};

const LeagueGroupHeader = ({ league }: { league: { name: string, logo: string, country: string, flag: string | null } }) => (
<div className="flex items-center gap-3 p-3 sticky top-0 z-10" style={{ backgroundColor: 'var(--color-primary)' }}>
<div className="w-[28px] h-[28px] flex items-center justify-center">
{league.country === 'World' ? (
<Globe size={24} className="text-text-muted" />
) : (
<Image src={league.flag || '/default-flag.png'} alt={league.country} width={28} height={28} className="rounded-full object-cover" />
)}
</div>
<div>
<h3 className="font-bold text-base text-white">{league.country}</h3>
<p className="text-sm text-text-muted">{league.name}</p>
</div>
</div>
);

const TabButton = ({ label, isActive, liveCount, onClick, hasLiveIndicator }: {
label: string,
isActive: boolean,
liveCount?: number,
onClick: ()=> void ,
hasLiveIndicator?: boolean
}) => (
<button
onClick={onClick}

className={`relative flex-1 md:flex-none flex items-center justify-center gap-2 px-3 md:px-4 py-2.5 rounded-lg text-xs md:text-sm font-bold transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-brand-purple/50 ${
isActive
? 'bg-brand-purple text-white shadow-lg'
: 'bg-transparent text-text-muted hover:text-white'
}`}
>
{hasLiveIndicator && (
<span className="relative flex h-3 w-3">
<span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-red-400 opacity-75"></span>
<span className="relative inline-flex rounded-full h-3 w-3 bg-brand-live"></span>
</span>
)}
{label}
{liveCount && liveCount > 0 && (
<span

className="ml-1 flex items-center justify-center text-[10px] font-bold text-white bg-brand-live rounded-full h-4 w-4"
>
{liveCount}
</span>
)}
</button>
);

export default function MatchList({ setLiveLeagues }: { setLiveLeagues: Dispatch<SetStateAction<League[]>> }) {
const { selectedLeague } = useLeagueContext();
const { t } = useTranslation();
const [activeStatusFilter, setActiveStatusFilter] = useState<StatusFilter>('all');
const [selectedDate, setSelectedDate] = useState(new Date());
const [visibleMatchCounts, setVisibleMatchCounts] = useState<Record<string, number>>({});

const { data: allMatches, isLoading, error } = useQuery({
queryKey: ['allMatches', selectedLeague?.id || 'global', format(selectedDate, 'yyyy-MM-dd')],
queryFn: () => fetchAllMatches(selectedLeague?.id || null, selectedDate),
refetchInterval: 30000,
});

const liveMatchCount = useMemo(() => {
if (!allMatches) return 0;
return allMatches.filter(m => STATUS_MAP.live.includes(m.fixture.status.short)).length;
}, [allMatches]);

useEffect(() => {
setVisibleMatchCounts({});
}, [selectedDate, activeStatusFilter]);

const groupedMatches = useMemo(() => {
if (!allMatches) return [];

const statusFilter = STATUS_MAP[activeStatusFilter];
const matchesToGroup = statusFilter.length > 0
? allMatches.filter(m => statusFilter.includes(m.fixture.status.short))
: allMatches;

matchesToGroup.sort((a, b) => {
const aIsLive = STATUS_MAP.live.includes(a.fixture.status.short);
const bIsLive = STATUS_MAP.live.includes(b.fixture.status.short);

if (aIsLive && !bIsLive) return -1;

if (!aIsLive && bIsLive) return 1;

return new Date(a.fixture.date).getTime() - new Date(b.fixture.date).getTime();
});

return matchesToGroup.reduce((acc, match) => {
const leagueId = match.league.id;
if (!acc[leagueId]) acc[leagueId] = { leagueInfo: match.league, matches: [] };
acc[leagueId].matches.push(match);
return acc;
}, {} as Record<string, { leagueInfo: any; matches: any[] }>);
}, [allMatches, activeStatusFilter]);

useEffect(() => {
if (allMatches) {
const live = allMatches.filter(m => STATUS_MAP.live.includes(m.fixture.status.short));
const uniqueLeagues = Array.from(new Map(live.map(m => [m.league.id, m.league])).values())
.map(l => ({ id: l.id, name: l.name, logoUrl: l.logo, countryName: l.country, countryFlagUrl: l.flag, type: l.type, href: '' }));
setLiveLeagues(uniqueLeagues);
}
}, [allMatches, setLiveLeagues]);

const handleLoadMore = (leagueId: number) => {
setVisibleMatchCounts(prevCounts => ({
...prevCounts,
[leagueId]: (prevCounts[leagueId] || INITIAL_MATCHES_TO_SHOW) + MATCHES_PER_PAGE
}));
};

if (error) return <div className="text-center py-10 bg-primary rounded-xl">Could not load match data.</div>;

const tabButtons: {key: StatusFilter, label: string}[] = [
{ key: 'all', label: 'All' },
{ key: 'live', label: 'Live' },
{ key: 'finished', label: 'Finished' },
{ key: 'scheduled', label: 'Scheduled' },
];

return (
<div className="space-y-4">
{}
<div
className="flex flex-col gap-3 p-2 rounded-xl"
style={{ backgroundColor: 'var(--color-primary)' }}
>
{}
<div className="flex justify-center">
<MatchDateNavigator selectedDate={selectedDate} onDateChange={setSelectedDate} />
</div>

{}
<div className="flex items-center gap-1 p-1 rounded-xl w-full" style={{ backgroundColor: 'var(--color-secondary)'}}>
{tabButtons.map(tab => (
<TabButton
key={tab.key}
label={tab.label}
isActive={activeStatusFilter === tab.key}
liveCount={tab.key === 'live' ? liveMatchCount : undefined}
hasLiveIndicator={tab.key === 'live' && liveMatchCount > 0}
onClick={() => setActiveStatusFilter(tab.key)}
/>
))}
</div>
</div>

{}
<div className="space-y-4">
{isLoading ? (
<div style={{ backgroundColor: 'var(--color-primary)'}} className="rounded-lg p-2 space-y-2">
{Array.from({ length: 10 }).map((_, i) => <MatchListItemSkeleton key={i} />)}
</div>
) : Object.keys(groupedMatches).length > 0 ? (
Object.values(groupedMatches).map(({ leagueInfo, matches }) => {
const visibleCount = visibleMatchCounts[leagueInfo.id] || INITIAL_MATCHES_TO_SHOW;
const remainingMatches = matches.length - visibleCount;
const hasMore = remainingMatches > 0;

return (
<div key={leagueInfo.id} style={{ backgroundColor: 'var(--color-primary)'}} className="rounded-lg overflow-hidden">
<LeagueGroupHeader league={leagueInfo} />
<div className="p-2 space-y-2">
{matches.slice(0, visibleCount).map(match => (
<MatchListItem key={match.fixture.id} match={match} />
))}
{hasMore && (
<button
onClick={() => handleLoadMore(leagueInfo.id)}
className="w-full flex items-center justify-center gap-2 text-sm font-semibold text-text-muted p-3 rounded-lg transition-colors hover:text-white"
style={{ backgroundColor: 'var(--color-secondary)' }}
>
<ChevronsDown size={16} />
Show {Math.min(MATCHES_PER_PAGE, remainingMatches)} more matches
</button>
)}
</div>
</div>
);
})
) : (
<div className="text-center py-20 rounded-lg" style={{ backgroundColor: 'var(--color-primary)'}}>
<p className="text-white font-semibold capitalize">No Matches Found</p>
<p className="text-sm text-text-muted mt-1">There are no {activeStatusFilter !== 'all' ? activeStatusFilter : ''} matches for the selected date.</p>
</div>
)}
</div>
</div>
);
}

// =================================================================
// FILE: src\components\MatchListItem.tsx
// =================================================================

import DesktopMatchListItem, { MatchListItemSkeleton as DesktopSkeleton } from './DesktopMatchListItem';
import MobileMatchListItem, { MobileMatchListItemSkeleton as MobileSkeleton } from './MobileMatchListItem';

type Odds = {
home: string;
draw: string;
away: string;
} | undefined;

interface MatchListItemProps {
match: any;
liveOdds?: Odds;
}

export default function MatchListItem({ match, liveOdds }: MatchListItemProps) {
return (
<>
{}
<div className="hidden lg:block">
<DesktopMatchListItem match={match} liveOdds={liveOdds} />
</div>

{}
<div className="block lg:hidden">
<MobileMatchListItem match={match} liveOdds={liveOdds} />
</div>
</>
);
}

export const MatchListItemSkeleton = () => {
return (
<>
<div className="hidden lg:block">
<DesktopSkeleton />
</div>
<div className="block lg:hidden">
<MobileSkeleton />
</div>
</>
);
};

// =================================================================
// FILE: src\components\MatchSlide.tsx
// =================================================================

import Image from 'next/image';
import { format } from 'date-fns';
import { Calendar, MapPin } from 'lucide-react';

interface MatchSlideProps {
match: any;
}

export default function MatchSlide({ match }: MatchSlideProps) {
const { teams, fixture, league } = match;

return (
<div className="relative w-full h-64 overflow-hidden rounded-2xl bg-brand-secondary text-white">
{}
<Image

src="https:
alt="Stadium background"
layout="fill"
objectFit="cover"
className="z-0"
/>
<div className="absolute inset-0 bg-black/70 z-10" />

{}
<div className="relative z-20 flex h-full flex-col items-center justify-center p-4">
<p className="font-semibold tracking-wider text-brand-muted">Upcoming Match</p>
<p className="text-sm text-brand-muted mb-4">{league.round}</p>

<div className="flex items-center justify-around w-full max-w-lg my-2">
{}
<div className="flex items-center gap-3">
<Image src={teams.home.logo} alt={teams.home.name} width={40} height={40}/>
<h2 className="text-3xl sm:text-4xl font-black">{teams.home.name}</h2>
</div>

<span className="text-xl font-light text-brand-muted mx-4">VS</span>

{}
<div className="flex items-center gap-3">
<h2 className="text-3xl sm:text-4xl font-black">{teams.away.name}</h2>
<Image src={teams.away.logo} alt={teams.away.name} width={40} height={40}/>
</div>
</div>

<div className="mt-6 flex flex-col sm:flex-row items-center gap-x-6 gap-y-2 text-brand-muted">
<div className="flex items-center gap-2">
<Calendar size={16} />
<span>{format(new Date(fixture.date), "dd MMMM yyyy ⋅ h:mma")}</span>
</div>
<div className="flex items-center gap-2">
<MapPin size={16} />
<span>{fixture.venue.name}</span>
</div>
</div>
</div>
</div>
);
}

// =================================================================
// FILE: src\components\MobileHomeTabs.tsx
// =================================================================

"use client";

import { useState, Dispatch, SetStateAction } from 'react';

import { List, Newspaper, BrainCircuit, Compass } from 'lucide-react';
import { League } from '@/types/api-football';

import MatchList from './MatchList';
import NewsSection from './NewsSection';
import ExploreTab from './ExploreTab';

const TABS = [
{ id: 'matches', label: 'Matches', icon: List },
{ id: 'explore', label: 'Explore', icon: Compass },
{ id: 'news', label: 'News', icon: Newspaper },
];

interface MobileHomeTabsProps {
liveLeagues: League[];
setLiveLeagues: Dispatch<SetStateAction<League[]>>;
}

export default function MobileHomeTabs({ liveLeagues, setLiveLeagues }: MobileHomeTabsProps) {
const [activeTab, setActiveTab] = useState('matches');

return (
<div className="flex flex-col h-full">
<div className="flex-grow p-2 sm:p-4 space-y-8 overflow-y-auto">
{activeTab === 'matches' && <MatchList setLiveLeagues={setLiveLeagues} />}
{activeTab === 'explore' && <ExploreTab />}
{activeTab === 'news' && <NewsSection />}
</div>

<div className="sticky bottom-0 left-0 right-0 bg-brand-secondary border-t border-gray-700/50 shadow-lg z-99">
<div className="flex justify-around items-center h-16">
{TABS.map((tab) => (
<button
key={tab.id}
onClick={() => setActiveTab(tab.id)}
className={`flex flex-col items-center justify-center gap-1 w-full h-full transition-colors duration-200 ${
activeTab === tab.id ? 'text-brand-purple' : 'text-brand-muted hover:text-white'
}`}
>
<tab.icon size={22} />
<span className="text-xs font-semibold">{tab.label}</span>
</button>
))}
</div>
</div>
</div>
);
}

// =================================================================
// FILE: src\components\MobileLiveMatchCard.tsx
// =================================================================

"use client";

import { useState, useMemo } from 'react';
import Image from 'next/image';
import { format } from 'date-fns';
import Link from '@/components/StyledLink';
import { History, ChevronDown, BarChart2 } from 'lucide-react';
import VotingPanel from './VotingPanel';
import { useTranslation } from '@/hooks/useTranslation';

interface MatchCardProps {
match: any;
}

const TeamRow = ({ team, score, hasMomentum, momentumType }: any) => (
<div className="flex justify-between items-center">
<div className="flex items-center gap-3 min-w-0">
<div className="relative flex-shrink-0">
<Image src={team.logo} alt={team.name} width={32} height={32} className="object-contain h-8 w-8"/>
{hasMomentum && (
<span className="absolute -top-1 -right-1 flex h-3 w-3">
<span className={`absolute inline-flex h-full w-full rounded-full ${momentumType === 'Goal' ? 'bg-green-400' : 'bg-red-400'} opacity-75 animate-ping`}></span>
<span className={`relative inline-flex rounded-full h-3 w-3 ${momentumType === 'Goal' ? 'bg-green-500' : 'bg-red-500'}`}></span>
</span>
)}
</div>
<span className="font-bold text-white truncate">{team.name}</span>
</div>
<span className="text-xl font-black text-white">{score ?? 0}</span>
</div>
);

export default function MobileLiveMatchCard({ match }: MatchCardProps) {
const { fixture, teams, goals, league, events } = match;
const [isExpanded, setIsExpanded] = useState(false);
const { t } = useTranslation();

const isLive = ['1H', 'HT', '2H', 'ET', 'P'].includes(fixture.status.short);
const isFinished = ['FT', 'AET', 'PEN'].includes(fixture.status.short);
const isUpcoming = !isLive && !isFinished;

const momentumData = useMemo(() => {
if (!isLive || !events || events.length === 0) return { teamId: null, type: null };
const lastMajorEvent = [...events].reverse().find(e => e.type === 'Goal' || (e.type === 'Card' && e.detail === 'Red Card'));
if (!lastMajorEvent) return { teamId: null, type: null };
let momentumTeamId = lastMajorEvent.team.id;
if (lastMajorEvent.type === 'Card') {
momentumTeamId = momentumTeamId === teams.home.id ? teams.away.id : teams.home.id;
}
return { teamId: momentumTeamId, type: lastMajorEvent.type };
}, [events, isLive, teams.home.id, teams.away.id]);

return (
<div className="bg-[#252837] rounded-xl overflow-hidden flex flex-col">
{}
<div className="flex justify-between items-center p-3 border-b border-gray-700/50">
<div className="flex items-center gap-2 min-w-0">
<Image src={league.logo} alt={league.name} width={20} height={20} className="flex-shrink-0" />
<span className="text-sm font-semibold truncate text-brand-muted">{league.name}</span>
</div>
<div className="flex-shrink-0">
{isLive && <div className="flex items-center gap-1.5 text-brand-live font-semibold text-xs"><span className="relative flex h-2 w-2"><span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-red-400 opacity-75"></span><span className="relative inline-flex rounded-full h-2 w-2 bg-brand-live"></span></span><span>{fixture.status.elapsed}'</span></div>}
{isFinished && <div className="flex items-center gap-1.5 bg-gray-700/50 text-gray-300 px-2 py-0.5 rounded-full text-xs font-semibold"><History size={12} /><span>{t('finished')}</span></div>}
{isUpcoming && <div className="font-bold text-brand-light text-sm">{format(new Date(fixture.date), "HH:mm")}</div>}
</div>
</div>

{}
<div className="p-3 space-y-2">
<TeamRow
team={teams.home}
score={goals.home}
hasMomentum={momentumData.teamId === teams.home.id}
momentumType={momentumData.type}
/>
<TeamRow
team={teams.away}
score={goals.away}
hasMomentum={momentumData.teamId === teams.away.id}
momentumType={momentumData.type}
/>
</div>

{}
<div className="p-2 bg-gray-900/30 flex justify-between items-center">
<Link href={`/football/match/${fixture.id}`} className="flex items-center gap-2 text-xs text-brand-muted hover:text-white transition-colors py-1 px-2">
<BarChart2 size={14} />
<span>{t('match_details')}</span>
</Link>
{!isFinished && (
<button
onClick={() => setIsExpanded(!isExpanded)}
className="flex items-center gap-1.5 text-xs text-green-400 hover:text-green-300 font-bold transition-all duration-300 rounded-lg px-2 py-1.5 bg-green-500/10"
aria-label={isExpanded ? t('hide_panel') : t('vote_and_see_poll')}
>
<span>{t('vote_and_see_poll')}</span>
<ChevronDown size={14} className={`transition-transform duration-300 ${isExpanded ? 'rotate-180' : ''}`} />
</button>
)}
</div>

{}
<div className={`transition-all duration-300 ease-in-out grid ${isExpanded ? 'grid-rows-[1fr]' : 'grid-rows-[0fr]'}`}>
<div className="overflow-hidden">
{isExpanded && <VotingPanel fixtureId={fixture.id} teams={teams} />}
</div>
</div>
</div>
);
}

// =================================================================
// FILE: src\components\MobileMatchListItem.tsx
// =================================================================

"use client";

import { useState } from 'react';
import Image from 'next/image';
import Link from '@/components/StyledLink';
import { format } from 'date-fns';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import axios from 'axios';
import { useVoteStorage } from '@/hooks/useVoteStorage';
import { Star, ChevronDown } from 'lucide-react';
import { generateMatchSlug } from '@/lib/generate-match-slug';
import OddsDisplay from './OddsDisplay';

type Odds = { home: string; draw: string; away: string; } | undefined | null;
interface VoteData { homeVotes: number; drawVotes: number; awayVotes: number; }
const getVotes = async (fixtureId: number): Promise<VoteData | null> => {
try {
const { data } = await axios.get(`/api/votes?fixture=${fixtureId}`);
return data;
} catch { return null; }
};
const submitVote = async ({ fixtureId, vote }: { fixtureId: number; vote: string }): Promise<VoteData> => {
const { data } = await axios.post('/api/votes', { fixtureId, vote });
return data;
};

const TeamRow = ({ team, score, onVote, isVotedFor, isDisabled }: {
team: { name: string; logo: string; winner: boolean },
score: number | null,
onVote: (e: React.MouseEvent) => void,
isVotedFor: boolean,
isDisabled: boolean
}) => (
<div className="flex items-center justify-between">
<div className="flex items-center gap-3 min-w-0">
<Image src={team.logo} alt={team.name} width={24} height={24} />
<span className={`font-semibold text-sm truncate ${team.winner ? 'text-text-primary' : 'text-text-secondary'}`}>{team.name}</span>
</div>
<div className="flex items-center gap-3">
<span className={`font-bold text-sm ${team.winner ? 'text-text-primary' : 'text-text-secondary'}`}>{score ?? '-'}</span>
<button onClick={onVote} disabled={isDisabled} className="p-1 disabled:cursor-not-allowed disabled:opacity-50">
<Star size={20} className={`transition-all duration-200 ${isVotedFor ? 'text-brand-yellow fill-brand-yellow' : 'text-gray-500 hover:text-brand-yellow'}`} />
</button>
</div>
</div>
);

export default function MobileMatchListItem({ match, liveOdds }: { match: any, liveOdds?: Odds }) {
const { fixture, teams, goals } = match;
const slug = generateMatchSlug(teams.home, teams.away, fixture.id);
const queryClient = useQueryClient();
const { setVote, getVoteForFixture } = useVoteStorage();

const [votedFor, setVotedFor] = useState<'home' | 'away' | null>(() => getVoteForFixture(fixture.id) as 'home' | 'away' | null);
const [isExpanded, setIsExpanded] = useState(false);

const isLive = ['1H', 'HT', '2H', 'ET', 'P', 'LIVE'].includes(fixture.status.short);
const isFinished = ['FT', 'AET', 'PEN'].includes(fixture.status.short);

const { data: voteData } = useQuery({
queryKey: ['votes', fixture.id],
queryFn: () => getVotes(fixture.id),
enabled: !isFinished && !!votedFor,
});

const voteMutation = useMutation({
mutationFn: submitVote,
onSuccess: () => queryClient.invalidateQueries({ queryKey: ['votes', fixture.id] }),
});

const handleVote = (e: React.MouseEvent, choice: 'home' | 'away') => {
e.preventDefault();
e.stopPropagation();
if (votedFor || isFinished) return;
setVotedFor(choice);
setVote(fixture.id, choice);
voteMutation.mutate({ fixtureId: fixture.id, vote: choice });
if (!isExpanded) setIsExpanded(true);
};

const totalVotes = (voteData?.homeVotes || 0) + (voteData?.awayVotes || 0);
const homePercent = totalVotes > 0 ? Math.round(((voteData?.homeVotes || 0) / totalVotes) * 100) : 50;

return (
<div className="rounded-lg p-2" style={{ backgroundColor: 'var(--color-secondary)' }}>
<div className="flex items-start gap-2">
<Link href={`/football/match/${slug}`} className="flex-1 flex items-center gap-3">
<div className="w-12 flex-shrink-0 text-center text-xs font-bold">
{isLive ? <div className="text-brand-live">{fixture.status.elapsed}'</div> : isFinished ? <div className="text-text-muted">FT</div> : <div>{format(new Date(fixture.date), "HH:mm")}</div>}
</div>
<div className="flex-1 flex flex-col gap-2">
<TeamRow team={teams.home} score={goals.home} onVote={(e) => handleVote(e, 'home')} isVotedFor={votedFor === 'home'} isDisabled={!!votedFor || isFinished} />
<TeamRow team={teams.away} score={goals.away} onVote={(e) => handleVote(e, 'away')} isVotedFor={votedFor === 'away'} isDisabled={!!votedFor || isFinished} />
</div>
</Link>
<button onClick={() => setIsExpanded(!isExpanded)} className="p-2 text-text-muted">
<ChevronDown size={20} className={`transition-transform duration-200 ${isExpanded ? 'rotate-180' : ''}`} />
</button>
</div>

{isExpanded && (
<div className="mt-2 pt-2 ml-14 border-t border-gray-700/50 space-y-3">
{votedFor && (
<div className="flex w-full h-1.5 rounded-full overflow-hidden bg-gray-700">
<div className="bg-brand-purple" style={{ width: `${homePercent}%` }}></div>
<div className="bg-blue-600" style={{ width: `${100 - homePercent}%` }}></div>
</div>
)}
{!isFinished && <OddsDisplay fixtureId={fixture.id} initialOdds={liveOdds} />}
</div>
)}
</div>
);
}

export const MobileMatchListItemSkeleton = () => (
<div className="flex items-center p-3 rounded-lg animate-pulse" style={{ backgroundColor: 'var(--color-secondary)' }}>
<div className="w-12 h-8 rounded bg-gray-600/50"></div>
<div className="flex-1 ml-3 space-y-2">
<div className="h-4 w-4/5 rounded bg-gray-600/50"></div>
<div className="h-4 w-3/5 rounded bg-gray-600/50"></div>
</div>
<div className="w-10 h-6 rounded bg-gray-600/50"></div>
</div>
);

// =================================================================
// FILE: src\components\NavDropdown.tsx
// =================================================================

"use client";

import { useState, ReactNode } from 'react';
import { ChevronDown } from 'lucide-react';
import StyledLink from './StyledLink';

interface SubLink {
name: string;
href: string;
description: string;
}

interface NavDropdownProps {
title: string;
subLinks: SubLink[];
}

export default function NavDropdown({ title, subLinks }: NavDropdownProps) {
const [isOpen, setIsOpen] = useState(false);

return (
<div
className="relative"
onMouseEnter={() => setIsOpen(true)}
onMouseLeave={() => setIsOpen(false)}
>
{}
<button className="flex items-center gap-1 py-2 text-base font-medium text-brand-light transition-colors hover:text-white">
<span>{title}</span>
<ChevronDown
size={16}
className={`transition-transform duration-300 ${isOpen ? 'rotate-180' : ''}`}
/>
</button>

{}
<div
className={`absolute top-full pt-3 transition-all duration-300 ease-in-out ${
isOpen ? 'opacity-100 translate-y-0' : 'opacity-0 -translate-y-2 pointer-events-none'
}`}
>
<div className="bg-brand-secondary rounded-lg shadow-2xl border border-gray-700/50 w-64 overflow-hidden">
<ul className="space-y-1 p-2">
{subLinks.map(link => (
<li key={link.name}>
<StyledLink
href={link.href}
className="block p-3 rounded-md hover:bg-brand-purple"
>
<p className="font-bold text-white">{link.name}</p>
<p className="text-sm text-brand-muted">{link.description}</p>
</StyledLink>
</li>
))}
</ul>
</div>
</div>
</div>
);
}

// =================================================================
// FILE: src\components\NewsItemCard.tsx
// =================================================================

import Image from 'next/image';
import Link from '@/components/StyledLink';

export interface NewsArticleType {
id: string;
title: string;
excerpt: string;
imageUrl: string;
articleUrl: string;
}

interface NewsItemCardProps {
article: NewsArticleType;
}

export default function NewsItemCard({ article }: NewsItemCardProps) {
return (

<Link href={article.articleUrl} target="_blank" rel="noopener noreferrer" className="block">
<div className="bg-brand-secondary rounded-xl overflow-hidden group transition-all duration-300 hover:shadow-lg hover:shadow-purple-900/20">

{}
<div className="relative w-full h-40">
<Image
src={article.imageUrl}
alt={article.title}
layout="fill"
objectFit="cover"
className="transition-transform duration-300 group-hover:scale-110"
/>
</div>

{}
<div className="p-4">
<h4 className="font-bold text-lg text-brand-light mb-2 leading-tight group-hover:text-brand-purple transition-colors">
{article.title}
</h4>
<p className="text-sm text-brand-muted line-clamp-3">
{article.excerpt}
</p>
</div>
</div>
</Link>
);
}

export const NewsItemCardSkeleton = () => {
return (
<div className="bg-brand-secondary rounded-xl overflow-hidden animate-pulse">
<div className="w-full h-40 bg-gray-600/50"></div>
<div className="p-4 space-y-3">
<div className="h-5 w-full rounded bg-gray-600/50"></div>
<div className="h-5 w-4/5 rounded bg-gray-600/50"></div>
<div className="h-3 w-full rounded bg-gray-600/50 mt-2"></div>
<div className="h-3 w-1/2 rounded bg-gray-600/50"></div>
</div>
</div>
)
}

// =================================================================
// FILE: src\components\NewsLeagueStandingsSlide.tsx
// =================================================================

"use client";

import Image from 'next/image';
import Link from '@/components/StyledLink';

interface TeamStanding {
rank: number;
team: { id: number; name: string; logo: string; };
points: number;
}
interface StandingsData {
league: { id: number; name: string; logo: string; };
standings: TeamStanding[];
}

export default function NewsLeagueStandingsSlide({ standingsData }: { standingsData: StandingsData }) {
const { league, standings } = standingsData;

return (

<div className="px-1">
<div className="bg-brand-secondary rounded-xl p-4 h-full">
{}
<Image src={league.logo} alt={league.name} width={32} height={32} />
<h4 className="font-bold text-xl text-brand-light truncate group-hover:text-brand-purple transition-colors">
{league.name}
</h4>
{}
<div className="overflow-x-auto">
<table className="w-full text-sm">
<thead className="text-brand-muted text-xs">
<tr className="border-b border-gray-700/50">
<th className="p-2 font-semibold text-center w-8">#</th>
<th className="p-2 font-semibold text-left">Team</th>
<th className="p-2 font-semibold text-center">Pts</th>
</tr>
</thead>
<tbody>
{}
{standings.slice(0, 5).map((team) => (
<tr key={team.team.id} className="border-t border-gray-700/50">
<td className="p-2 text-center text-brand-muted">{team.rank}</td>
<td className="p-2 flex items-center gap-2 font-medium">
<Image src={team.team.logo} alt={team.team.name} width={18} height={18} />
<span className="truncate">{team.team.name}</span>
</td>
<td className="p-2 text-center font-bold">{team.points}</td>
</tr>
))}
</tbody>
</table>
</div>
</div>
</div>
);
}

export const LeagueStandingsSlideSkeleton = () => (
<div className="px-1">
<div className="bg-brand-secondary rounded-xl p-4 animate-pulse">
<div className="flex items-center gap-3 mb-4">
<div className="w-8 h-8 rounded-full bg-gray-600/50"></div>
<div className="h-6 w-3/4 rounded bg-gray-600/50"></div>
</div>
<div className="space-y-3 mt-4">
{Array.from({ length: 5 }).map((_, i) => (
<div key={i} className="h-5 w-full rounded bg-gray-600/50"></div>
))}
</div>
</div>
</div>
);

// =================================================================
// FILE: src\components\NewsListItem.tsx
// =================================================================

import Image from 'next/image';
import StyledLink from './StyledLink';
import { format } from 'date-fns';
import { IPost } from '@/models/Post';
import { Calendar, User } from 'lucide-react';

interface NewsListItemProps {
post: IPost;
}

export default function NewsListItem({ post }: NewsListItemProps) {

const excerpt = post.content.replace(/<[^>]*>?/gm, '').substring(0, 350) + '...';
const articleUrl = `/football/news/${post.slug}`;

return (
<StyledLink href={articleUrl} className="block group">
<article className="bg-brand-secondary rounded-lg p-4 flex flex-col md:flex-row gap-6 transition-all duration-300 hover:bg-gray-700/50 hover:shadow-lg">
{}
<div className="relative w-full md:w-[400px] h-48 md:h-[250px] flex-shrink-0 rounded-md overflow-hidden">
<Image
src={post.featuredImage || 'https:
alt={post.featuredImageAltText || post.title}
layout="fill"
objectFit="cover"
className="transition-transform duration-300 group-hover:scale-105"
/>
</div>

{}
<div className="flex flex-col">
<h2 className="text-2xl font-bold text-white mb-2 leading-tight group-hover:text-brand-purple transition-colors">
{post.title}
</h2>
<p className="text-brand-muted mb-4 flex-grow">
{excerpt}
</p>
<div className="flex items-center gap-4 text-sm text-brand-muted mt-auto">
<div className="flex items-center gap-2">
<User size={14} />
<span>{post.author}</span>
</div>
<div className="flex items-center gap-2">
<Calendar size={14} />
<span>{format(new Date(post.createdAt), 'dd MMMM, yyyy')}</span>
</div>
</div>
</div>
</article>
</StyledLink>
);
}

export const NewsListItemSkeleton = () => (
<div className="bg-brand-secondary rounded-lg p-4 flex flex-col md:flex-row gap-6 animate-pulse">
<div className="w-full md:w-1/3 h-48 md:h-auto flex-shrink-0 rounded-md bg-gray-600/50"></div>
<div className="flex-1 flex flex-col">
<div className="h-8 w-4/5 rounded bg-gray-600/50 mb-4"></div>
<div className="space-y-2 flex-grow">
<div className="h-4 w-full rounded bg-gray-600/50"></div>
<div className="h-4 w-full rounded bg-gray-600/50"></div>
<div className="h-4 w-2/3 rounded bg-gray-600/50"></div>
</div>
<div className="flex items-center gap-4 mt-4">
<div className="h-5 w-24 rounded bg-gray-600/50"></div>
<div className="h-5 w-32 rounded bg-gray-600/50"></div>
</div>
</div>
</div>
);

// =================================================================
// FILE: src\components\NewsSection.tsx
// =================================================================

"use client";

import { useQuery } from "@tanstack/react-query";
import NewsItemCard, { NewsArticleType, NewsItemCardSkeleton } from "./NewsItemCard";
import axios from 'axios';
import { IPost } from '@/models/Post';
import StyledLink from "./StyledLink";
import { ArrowRight } from "lucide-react";

const fetchNews = async (): Promise<NewsArticleType[]> => {
const { data } = await axios.get('/api/posts?status=published');

const transformedNews: NewsArticleType[] = data.map((post: IPost) => ({
id: post._id,
title: post.title,
excerpt: post.content.replace(/<[^>]*>?/gm, '').substring(0, 150) + '...',
imageUrl: post.featuredImage || 'https:
articleUrl: `/football/news/${post.slug}`
}));

return transformedNews;
};

export default function NewsSection() {
const { data: news, isLoading, error } = useQuery<NewsArticleType[]>({
queryKey: ['newsArticles'],
queryFn: fetchNews,
staleTime: 1000 * 60 * 10,
});

return (
<section>
{}
<div className="flex justify-between items-center mb-4">
<h3 className="text-xl font-bold text-white">Latest News</h3>
{}
{news && news.length > 2 && (
<StyledLink
href="/football/news"
className="flex items-center gap-1 text-sm font-semibold text-text-muted transition-colors hover:text-white"
>
See all
<ArrowRight size={16} />
</StyledLink>
)}
</div>

<div className="space-y-4">
{isLoading ? (

<>
<NewsItemCardSkeleton />
<NewsItemCardSkeleton />
</>
) : error ? (
<div className="rounded-xl p-6 text-center text-text-muted" style={{ backgroundColor: 'var(--color-primary)' }}>
<p>Could not load news articles.</p>
</div>
) : news && news.length > 0 ? (

news.slice(0, 2).map(article => (
<NewsItemCard key={article.id} article={article} />
))
) : (
<div className="rounded-xl p-6 text-center text-text-muted" style={{ backgroundColor: 'var(--color-primary)' }}>
<p>No news articles available yet.</p>
</div>
)}
</div>
</section>
);
}

// =================================================================
// FILE: src\components\NewsSidebar.tsx
// =================================================================

"use client";

import { useQuery } from '@tanstack/react-query';
import axios from 'axios';
import Slider from "react-slick";

import LeagueStandingsSlide, { LeagueStandingsSlideSkeleton } from './NewsLeagueStandingsSlide';
import SidebarMatchItem, { SidebarMatchItemSkeleton } from './SidebarMatchItem';

interface TeamStanding {
rank: number;
team: { id: number; name: string; logo: string; };
points: number;
}
interface StandingsData {
league: { id: number; name: string; logo: string; };
standings: TeamStanding[];
}
interface MatchData {
fixture: { id: number; status: { elapsed: number; }; };
teams: { home: any; away: any; };
goals: { home: any; away: any; };
}

const fetchGlobalLiveMatches = async (): Promise<MatchData[]> => {
try {
const { data } = await axios.get('/api/global-live');
return data;
} catch (error) {
console.error("Error fetching global live matches for sidebar:", error);
return [];
}
};

const POPULAR_LEAGUE_IDS = [39, 88, 140, 78, 61];

const fetchStandingsForLeagues = async (leagueIds: number[]): Promise<StandingsData[]> => {
try {
const standingsPromises = leagueIds.map(id =>
axios.get(`/api/standings?league=${id}`).then(res => res.data)
);
const results = await Promise.allSettled(standingsPromises);

return results
.filter(result => result.status === 'fulfilled' && result.value?.standings?.length > 0)
.map(result => (result as PromiseFulfilledResult<StandingsData>).value);
} catch (error) {
console.error("Error fetching popular league standings for sidebar:", error);
return [];
}
};

export default function NewsSidebar() {

const { data: liveMatches, isLoading: isLoadingMatches } = useQuery({
queryKey: ['globalLiveMatchesSidebar'],
queryFn: fetchGlobalLiveMatches,
refetchInterval: 30000,
});

const { data: popularStandings, isLoading: isLoadingStandings } = useQuery({
queryKey: ['popularStandingsSidebar'],
queryFn: () => fetchStandingsForLeagues(POPULAR_LEAGUE_IDS),
staleTime: 1000 * 60 * 60,
});

const sliderSettings = {
dots: true,
infinite: false,
speed: 500,
slidesToShow: 1,
slidesToScroll: 1,
autoplay: true,
autoplaySpeed: 8000,
arrows: false,
appendDots: (dots: any) => (
<div style={{ position: 'absolute', bottom: '-25px' }}>
<ul style={{ margin: "0px" }}> {dots} </ul>
</div>
),
customPaging: (i: any) => (
<div className="w-2 h-2 rounded-full bg-gray-600 transition-colors duration-300 hover:bg-brand-purple active:bg-brand-purple"></div>
)
};

console.log(popularStandings);

return (
<aside className="space-y-8">

{}
<section className="bg-brand-secondary rounded-xl p-4">
<h3 className="text-lg font-bold text-brand-light mb-4">Live Matches</h3>
<div className="space-y-1">
{isLoadingMatches ? (
<>
<SidebarMatchItemSkeleton />
<SidebarMatchItemSkeleton />
</>
) : liveMatches && liveMatches.length > 0 ? (
liveMatches.slice(0, 5).map(match => (
<SidebarMatchItem key={match.fixture.id} match={match as MatchData} />
))
) : (
<p className="text-sm text-brand-muted text-center py-4">No matches are currently live.</p>
)}
</div>
</section>

{}
<section>
<h3 className="text-lg font-bold text-brand-light mb-4 px-4">Popular Leagues</h3>

{isLoadingStandings ? (
<LeagueStandingsSlideSkeleton />
) : popularStandings && popularStandings.length > 0 ? (

<div className="w-full">
<Slider {...sliderSettings}>
{popularStandings.map(standingsData => (
<LeagueStandingsSlide key={standingsData.league.id} standingsData={standingsData} />
))}
</Slider>
</div>
) : (
<div className="bg-brand-secondary rounded-xl p-4">
<p className="text-sm text-brand-muted text-center py-4">Standings could not be loaded.</p>
</div>
)}
</section>

</aside>
);
}

// =================================================================
// FILE: src\components\OddsDisplay.tsx
// =================================================================

"use client";

import { useQuery } from '@tanstack/react-query';
import axios from 'axios';

type Odds = { home: string; draw: string; away: string; } | undefined | null;

const fetchOdds = async (fixtureId: number): Promise<Odds> => {
try {
const { data } = await axios.get(`/api/odds?fixture=${fixtureId}`);
return data;
} catch (error) {
console.error(error);
return null;
}
};

const OddBox = ({ label, value }: { label: string, value: string }) => (
<div className="flex-1 flex items-center justify-between p-2 rounded-md" style={{ backgroundColor: 'var(--color-primary)' }}>
<span className="font-bold text-sm text-text-muted">{label}</span>
<span className="font-bold text-sm text-brand-highlight">{value}</span>
</div>
);

export default function OddsDisplay({ fixtureId, initialOdds }: { fixtureId: number, initialOdds?: Odds }) {
const { data: odds, isLoading, isError } = useQuery({
queryKey: ['odds', fixtureId],
queryFn: () => fetchOdds(fixtureId),

enabled: !initialOdds,

initialData: initialOdds,
staleTime: 1000 * 60 * 5,
refetchOnWindowFocus: false,
});

const displayData = initialOdds || odds;

if (isLoading && !initialOdds) {
return <div className="text-xs text-center text-text-muted p-2 animate-pulse">Loading Odds...</div>;
}

if (isError || !displayData) {
return <div className="text-xs text-center text-text-muted p-2">Odds not available.</div>;
}

return (
<div className="flex items-center justify-center gap-2">
<OddBox label="1" value={displayData.home} />
<OddBox label="X" value={displayData.draw} />
<OddBox label="2" value={displayData.away} />
</div>
);
}

// =================================================================
// FILE: src\components\Pagination.tsx
// =================================================================

"use client";

import { ChevronLeft, ChevronRight } from 'lucide-react';

interface PaginationProps {
currentPage: number;
totalPages: number;
onPageChange: (page: number) => void;
}

export default function Pagination({ currentPage, totalPages, onPageChange }: PaginationProps) {

if (totalPages <= 1) {
return null;
}

const handlePrevious = () => {
if (currentPage > 1) {
onPageChange(currentPage - 1);
}
};

const handleNext = () => {
if (currentPage < totalPages) {
onPageChange(currentPage + 1);
}
};

return (
<div className="flex items-center justify-center gap-4 mt-8">
<button
onClick={handlePrevious}
disabled={currentPage === 1}
className="flex items-center gap-2 px-4 py-2 text-sm font-medium text-white bg-brand-secondary rounded-lg disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-700/50 transition-colors"
>
<ChevronLeft size={16} />
<span>Previous</span>
</button>

<span className="text-sm font-semibold text-brand-muted">
Page {currentPage} of {totalPages}
</span>

<button
onClick={handleNext}
disabled={currentPage === totalPages}
className="flex items-center gap-2 px-4 py-2 text-sm font-medium text-white bg-brand-secondary rounded-lg disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-700/50 transition-colors"
>
<span>Next</span>
<ChevronRight size={16} />
</button>
</div>
);
}

// =================================================================
// FILE: src\components\PopularTeamsList.tsx
// =================================================================

"use client";

import { useState, useMemo } from 'react';
import { useQuery } from '@tanstack/react-query';
import axios from 'axios';
import Link from '@/components/StyledLink';
import { usePathname } from 'next/navigation';
import Image from 'next/image';
import slugify from 'slugify';
import { ChevronLeft, ChevronRight } from 'lucide-react';

interface TeamData {
team: { id: number; name: string; logo: string; };
venue: any;
}

const generateTeamSlug = (name: string, id: number) => {
const slug = slugify(name, { lower: true, strict: true });
return `/football/team/${slug}-${id}`;
};

const fetchPopularTeams = async (): Promise<TeamData[]> => {
const POPULAR_LEAGUE_ID = 39;
const season = new Date().getFullYear();
const { data } = await axios.get(`/api/teams?league=${POPULAR_LEAGUE_ID}&season=${season}`);
return data;
};

const TeamItemSkeleton = () => (
<div className="flex items-center p-2.5 rounded-lg animate-pulse">
<div className="flex items-center gap-3 w-full">
<div className="h-6 w-6 rounded-full bg-gray-600/50"></div>
<div className="h-4 w-4/5 rounded bg-gray-600/50"></div>
</div>
</div>
);

export default function PopularTeamsList() {
const pathname = usePathname();
const [currentPage, setCurrentPage] = useState(1);
const ITEMS_PER_PAGE = 6;

const { data: allTeams, isLoading, isError } = useQuery<TeamData[]>({
queryKey: ['popularTeams'],
queryFn: fetchPopularTeams,
staleTime: 1000 * 60 * 60 * 24,
refetchOnWindowFocus: false,
});

const totalPages = allTeams ? Math.ceil(allTeams.length / ITEMS_PER_PAGE) : 0;

const paginatedTeams = useMemo(() => {
if (!allTeams) return [];
const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
const endIndex = startIndex + ITEMS_PER_PAGE;
return allTeams.slice(startIndex, endIndex);
}, [allTeams, currentPage]);

if (isLoading) {
return <div className="space-y-1">{Array.from({ length: ITEMS_PER_PAGE }).map((_, i) => <TeamItemSkeleton key={i} />)}</div>;
}

if (isError || !paginatedTeams || paginatedTeams.length === 0) {
return <p className="text-brand-muted text-xs p-2.5">Could not load popular teams.</p>;
}

return (
<div>
{}
<ul className="space-y-1">
{paginatedTeams.map(({ team }) => {
const href = generateTeamSlug(team.name, team.id);
const isActive = pathname.startsWith(href);
return (
<li key={team.id}>
<Link
href={href}
className={`w-full flex items-center p-2.5 rounded-lg transition-all duration-200 ${
isActive ? 'bg-brand-purple shadow-md text-white' : 'hover:bg-gray-700/50 text-brand-light'
}`}
>
<div className="flex items-center gap-3 overflow-hidden">
<Image src={team.logo} alt={`${team.name} logo`} width={24} height={24} className="flex-shrink-0" />
<span className={`font-bold text-sm truncate ${isActive ? 'text-white' : 'text-brand-light'}`}>
{team.name}
</span>
</div>
</Link>
</li>
);
})}
</ul>

{}
{totalPages > 1 && (
<div className="flex items-center justify-between mt-4 px-2">
<button
onClick={() => setCurrentPage(p => p - 1)}
disabled={currentPage === 1}
className="p-2 rounded-md disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-700/50"
>
<ChevronLeft size={18} />
</button>
<span className="text-xs font-semibold text-brand-muted">
Page {currentPage} / {totalPages}
</span>
<button
onClick={() => setCurrentPage(p => p + 1)}
disabled={currentPage === totalPages}
className="p-2 rounded-md disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-700/50"
>
<ChevronRight size={18} />
</button>
</div>
)}
</div>
);
}

// =================================================================
// FILE: src\components\PredictionDisplay.tsx
// =================================================================

"use client";

import { useQuery } from '@tanstack/react-query';
import axios from 'axios';
import Image from 'next/image';

interface PredictionData {
teams: {
home: { id: number; name: string; logo: string; };
away: { id: number; name: string; logo: string; };
};
percent: { home: number; draw: number; away: number };
}

const fetchPrediction = async (fixtureId: number): Promise<PredictionData> => {
const { data } = await axios.get(`/api/predictions?fixture=${fixtureId}`);
return data;
};

const PredictionSkeleton = () => (
<div className="pt-4 mt-4 border-t border-gray-700/50 animate-pulse">
<div className="h-4 w-1/2 mx-auto rounded bg-gray-600/50 mb-4"></div>
<div className="flex justify-between items-center">
<div className="flex flex-col items-center gap-2 w-1/4">
<div className="w-8 h-8 rounded-full bg-gray-600/50"></div>
<div className="h-5 w-10 rounded bg-gray-600/50"></div>
</div>
<div className="h-5 w-10 rounded bg-gray-600/50"></div>
<div className="flex flex-col items-center gap-2 w-1/4">
<div className="w-8 h-8 rounded-full bg-gray-600/50"></div>
<div className="h-5 w-10 rounded bg-gray-600/50"></div>
</div>
</div>
<div className="h-2 w-full rounded-full bg-gray-600/50 mt-3"></div>
</div>
);

export default function PredictionDisplay({ fixtureId }: { fixtureId: number }) {
const { data, isLoading, error } = useQuery({
queryKey: ['prediction', fixtureId],
queryFn: () => fetchPrediction(fixtureId),
staleTime: 1000 * 60 * 60,
retry: 1,
});

if (isLoading) return <PredictionSkeleton />;
if (error || !data) return null;

const { teams, percent } = data;
const { home, draw, away } = percent;

return (
<div className="pt-4 mt-4 border-t border-gray-700/50 space-y-3">
<h4 className="text-sm font-semibold text-center text-brand-muted tracking-wider">PREDICTION</h4>
<div className="flex justify-between items-center text-white">
<div className="flex flex-col items-center gap-2 w-1/4">
{}
<Image src={teams.home.logo} alt={teams.home.name} width={32} height={32} className="object-contain"/>
<span className="font-bold text-lg">{home}%</span>
</div>
<div className="flex flex-col items-center gap-2 opacity-80">
<span className="text-xs text-brand-muted">DRAW</span>
<span className="font-bold text-lg">{draw}%</span>
</div>
<div className="flex flex-col items-center gap-2 w-1/4">
{}
<Image src={teams.away.logo} alt={teams.away.name} width={32} height={32} className="object-contain"/>
<span className="font-bold text-lg">{away}%</span>
</div>
</div>
<div className="flex w-full h-2 rounded-full overflow-hidden bg-gray-800">
<div className="bg-[#6D28D9] transition-all duration-500" style={{ width: `${home}%` }}></div>
<div className="bg-gray-500 transition-all duration-500" style={{ width: `${draw}%` }}></div>
<div className="bg-blue-600 transition-all duration-500" style={{ width: `${away}%` }}></div>
</div>
</div>
);
}

// =================================================================
// FILE: src\components\ProgressBar.tsx
// =================================================================

"use client";

import { useEffect } from 'react';
import { usePathname, useSearchParams } from 'next/navigation';
import NProgress from 'nprogress';

export default function ProgressBar() {
const pathname = usePathname();
const searchParams = useSearchParams();

useEffect(() => {

NProgress.configure({ showSpinner: false });

NProgress.done();

return () => {
NProgress.remove();
};
}, [pathname, searchParams]);

return null;
}

// =================================================================
// FILE: src\components\Sidebar.tsx
// =================================================================

"use client";

import { useQuery } from '@tanstack/react-query';
import axios from 'axios';
import Image from 'next/image';
import Link from '@/components/StyledLink';
import { usePathname } from 'next/navigation';
import { useLeagueContext } from '@/context/LeagueContext';
import { League } from '@/types/api-football';
import { useTranslation } from '@/hooks/useTranslation';
import slugify from 'slugify';
import PopularTeamsList from './PopularTeamsList';
import AdSlotWidget from './AdSlotWidget';

const generateLeagueSlug = (name: string, id: number) => {
const slug = slugify(name, { lower: true, strict: true });
return `/football/league/${slug}-${id}`;
};

const fetchLeagues = async (countryName: string | null): Promise<League[]> => {
const endpoint = countryName
? `/api/leagues?type=league&country=${encodeURIComponent(countryName)}`
: `/api/leagues?type=league`;
const { data } = await axios.get(endpoint);
return data.map((item: any) => ({
...item,
href: generateLeagueSlug(item.name, item.id)
}));
};

const LeagueList = ({ leagues }: { leagues: League[] }) => {
const pathname = usePathname();
if (!leagues || leagues.length === 0) {
return <p className="text-text-muted text-xs p-2.5">No competitions found.</p>;
}
return (
<ul className="space-y-1">
{leagues.map((league) => {
const isActive = pathname.startsWith(league.href);
return (
<li key={league.id}>
<Link
href={league.href}
className={`w-full flex items-center justify-between p-2.5 rounded-lg transition-all duration-200 ${
isActive ? 'bg-brand-purple shadow-md text-white' : 'hover:bg-gray-700/50 text-text-primary'
}`}
>
<div className="flex items-center gap-3 overflow-hidden">
<Image src={league.logoUrl} alt={`${league.name} logo`} width={24} height={24} className="flex-shrink-0" />
<span className={`font-bold text-sm truncate ${isActive ? 'text-white' : 'text-text-primary'}`}>
{league.name}
</span>
</div>
</Link>
</li>
);
})}
</ul>
);
};

const LeagueItemSkeleton = () => (
<div className="flex items-center justify-between p-2.5 rounded-lg animate-pulse">
<div className="flex items-center gap-3 w-3/4">
<div className="h-6 w-6 rounded-full bg-gray-600/50"></div>
<div className="h-4 w-full rounded bg-gray-600/50"></div>
</div>
</div>
);

export default function Sidebar() {
const { t } = useTranslation();
const { selectedCountry } = useLeagueContext();

const { data: leagues, isLoading: isLoadingLeagues } = useQuery<League[]>({
queryKey: ['leagues', selectedCountry?.name || 'global'],
queryFn: () => fetchLeagues(selectedCountry?.name || null),
});

return (

<aside className="hidden lg:block">
<div
className="flex flex-col gap-4 min-h-0"
>
{}
<section
className="flex flex-col gap-2 p-3 rounded-xl"
style={{ backgroundColor: 'var(--color-primary)' }}
>
<h2 className="text-sm font-bold uppercase tracking-wider text-text-muted px-2">
{selectedCountry ? `Leagues in ${selectedCountry.name}` : t('popular_leagues')}
</h2>
{isLoadingLeagues ? (
<div className="space-y-1">{Array.from({ length: 5 }).map((_, i) => <LeagueItemSkeleton key={i} />)}</div>
) : (
<LeagueList leagues={leagues!} />
)}
</section>

{}
{}
<div className="sticky top-8">
{}
<div className="flex flex-col gap-4">

{}
<AdSlotWidget
aspectRatio="4/9"
placeholderText="Vertical Ad (160x360)"
/>

{}
<section
className="flex flex-col gap-2 p-3 rounded-xl"
style={{ backgroundColor: 'var(--color-primary)' }}
>
<h2 className="text-sm font-bold uppercase tracking-wider text-text-muted px-2">
{t('popular_teams')}
</h2>
<PopularTeamsList />
</section>

</div>
</div>

</div>
</aside>
);
}

// =================================================================
// FILE: src\components\SidebarMatchItem.tsx
// =================================================================

"use client";

import Image from 'next/image';
import Link from '@/components/StyledLink';

interface SidebarMatchItemProps {
match: {
fixture: {
id: number;
status: {
elapsed: number;
};
};
teams: {
home: { name: string; logo: string; };
away: { name: string; logo: string; };
};
goals: {
home: number;
away: number;
};
};
}

export default function SidebarMatchItem({ match }: SidebarMatchItemProps) {
const { fixture, teams, goals } = match;

return (
<Link
href={`/football/match/${fixture.id}`}
className="block p-2.5 rounded-lg transition-colors duration-200 hover:bg-gray-700/50"
>
<div className="flex items-center gap-3 w-full">
{}
<div className="flex flex-col items-center w-10 text-center text-brand-live font-semibold text-sm">
<span>{fixture.status.elapsed}'</span>
<div className="relative flex h-2 w-2 mt-1">
<span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-red-400 opacity-75"></span>
<span className="relative inline-flex rounded-full h-2 w-2 bg-brand-live"></span>
</div>
</div>

{}
<div className="flex-1 space-y-1.5 text-sm">
{}
<div className="flex items-center justify-between">
<div className="flex items-center gap-2 truncate">
<Image src={teams.home.logo} alt={teams.home.name} width={18} height={18} />
<span className="font-medium truncate">{teams.home.name}</span>
</div>
<span className="font-bold">{goals.home}</span>
</div>
{}
<div className="flex items-center justify-between">
<div className="flex items-center gap-2 truncate">
<Image src={teams.away.logo} alt={teams.away.name} width={18} height={18} />
<span className="font-medium truncate">{teams.away.name}</span>
</div>
<span className="font-bold">{goals.away}</span>
</div>
</div>
</div>
</Link>
);
}

export const SidebarMatchItemSkeleton = () => (
<div className="flex items-center gap-3 w-full p-2.5 animate-pulse">
<div className="flex flex-col items-center w-10">
<div className="h-4 w-6 rounded bg-gray-600/50"></div>
<div className="h-2 w-2 rounded-full bg-gray-600/50 mt-1.5"></div>
</div>
<div className="flex-1 space-y-2">
<div className="flex items-center justify-between">
<div className="h-4 w-3/5 rounded bg-gray-600/50"></div>
<div className="h-4 w-4 rounded bg-gray-600/50"></div>
</div>
<div className="flex items-center justify-between">
<div className="h-4 w-3/5 rounded bg-gray-600/50"></div>
<div className="h-4 w-4 rounded bg-gray-600/50"></div>
</div>
</div>
</div>
);

// =================================================================
// FILE: src\components\SocialShareButtons.tsx
// =================================================================

"use client";

import {
FacebookShareButton,
FacebookIcon,
TwitterShareButton,
XIcon,
WhatsappShareButton,
WhatsappIcon,
LinkedinShareButton,
LinkedinIcon,
TelegramShareButton,
TelegramIcon,
RedditShareButton,
RedditIcon,
} from 'react-share';

interface SocialShareButtonsProps {
url: string;
title: string;
}

export default function SocialShareButtons({ url, title }: SocialShareButtonsProps) {
const iconSize = 48;
const iconBgStyle = { background: 'none' };
const iconClassName = "rounded-full transition-transform duration-200 hover:scale-110";

return (
<div className="flex items-center justify-center gap-4 flex-wrap">
<FacebookShareButton url={url} quote={title} className={iconClassName}>
<FacebookIcon size={iconSize} round bgStyle={iconBgStyle} />
</FacebookShareButton>

<TwitterShareButton url={url} title={title} className={iconClassName}>
<XIcon size={iconSize} round bgStyle={iconBgStyle} />
</TwitterShareButton>

<WhatsappShareButton url={url} title={title} separator=":: " className={iconClassName}>
<WhatsappIcon size={iconSize} round bgStyle={iconBgStyle} />
</WhatsappShareButton>

<LinkedinShareButton url={url} title={title} className={iconClassName}>
<LinkedinIcon size={iconSize} round bgStyle={iconBgStyle} />
</LinkedinShareButton>

<TelegramShareButton url={url} title={title} className={iconClassName}>
<TelegramIcon size={iconSize} round bgStyle={iconBgStyle} />
</TelegramShareButton>

<RedditShareButton url={url} title={title} className={iconClassName}>
<RedditIcon size={iconSize} round bgStyle={iconBgStyle} />
</RedditShareButton>
</div>
);
}

// =================================================================
// FILE: src\components\StandingsDisplay.tsx
// =================================================================

"use client";

import { useState, useMemo } from 'react';
import Slider from "react-slick";
import { useQuery } from "@tanstack/react-query";
import axios from "axios";
import Image from 'next/image';
import { Trophy, RefreshCw } from 'lucide-react';

import { useLeagueContext } from "@/context/LeagueContext";
import { League } from "@/types/api-football";
import LeagueStandingsSlide from "./LeagueStandingsSlide";

type TeamStanding = {
rank: number;
team: { id: number; name: string; logo: string; };
points: number;
all: { played: number; };
};
const fetchStandings = async (leagueId: number) => {
const { data } = await axios.get(`/api/standings?league=${leagueId}`);
return data;
};

const FAMOUS_LEAGUE_IDS = [
39,
140,
78,
135,
61,
];

const StandingsTable = ({ standings, title, onRotate, showRotateButton }: {
standings: TeamStanding[],
title: string,
onRotate?: () => void,
showRotateButton?: boolean
}) => (
<div className="bg-brand-secondary rounded-xl p-4 lg:p-6">
<div className="flex justify-between items-center mb-4">
<h3 className="text-xl font-bold text-brand-light truncate pr-2">{title}</h3>
{showRotateButton && (
<button
onClick={onRotate}
className="flex-shrink-0 flex items-center gap-2 text-xs bg-gray-700/50 text-brand-muted px-3 py-1.5 rounded-lg hover:bg-gray-600 transition-colors"
>
<RefreshCw size={14} />
<span>Next League</span>
</button>
)}
</div>
<div className="overflow-x-auto h-[350px] custom-scrollbar">
<table className="w-full text-sm">
<thead className="text-brand-muted text-xs"><tr className="border-b border-gray-700/50"><th className="p-2 font-semibold text-left w-8">#</th><th className="p-2 font-semibold text-left">Team</th><th className="p-2 font-semibold text-center hidden sm:table-cell">P</th><th className="p-2 font-semibold text-center">Pts</th></tr></thead>
<tbody>
{standings.map((team: TeamStanding) => (
<tr key={team.team.id} className="border-t border-gray-700/50 hover:bg-gray-700/30">
<td className="p-2 text-center font-bold">{team.rank}</td>
<td className="p-2 flex items-center gap-2 font-medium"><Image src={team.team.logo} alt={team.team.name} width={20} height={20} /><span className="truncate">{team.team.name}</span></td>
<td className="p-2 text-center text-brand-muted hidden sm:table-cell">{team.all.played}</td>
<td className="p-2 text-center font-bold text-brand-light">{team.points}</td>
</tr>
))}
</tbody>
</table>
</div>
</div>
);

const SkeletonDisplay = () => (
<div className="bg-brand-secondary rounded-xl p-4 lg:p-6 animate-pulse">
<div className="h-7 w-3/4 rounded bg-gray-600/50 mb-4"></div>
<div className="space-y-3 mt-4">
{Array.from({ length: 8 }).map((_, i) => <div key={i} className="h-5 w-full rounded bg-gray-600/50"></div>)}
</div>
</div>
);

export default function StandingsDisplay({ liveLeagues }: { liveLeagues: League[] }) {
const { selectedLeague } = useLeagueContext();
const [featuredLeagueIndex, setFeaturedLeagueIndex] = useState(0);

const featuredLeagueId = useMemo(() => FAMOUS_LEAGUE_IDS[featuredLeagueIndex], [featuredLeagueIndex]);

const rotateFeaturedLeague = () => {
setFeaturedLeagueIndex((prevIndex) => (prevIndex + 1) % FAMOUS_LEAGUE_IDS.length);
};

const { data: selectedData, isLoading: isLoadingSelected } = useQuery({
queryKey: ['standings', selectedLeague?.id],
queryFn: () => fetchStandings(selectedLeague!.id),
enabled: !!selectedLeague && selectedLeague.type === 'League',
});

const { data: featuredData, isLoading: isLoadingFeatured } = useQuery({
queryKey: ['standings', featuredLeagueId],
queryFn: () => fetchStandings(featuredLeagueId),
enabled: !selectedLeague && liveLeagues.length === 0,
staleTime: 1000 * 60 * 60,
});

if (selectedLeague) {
if (selectedLeague.type === 'Cup') {
return (
<div className="bg-brand-secondary rounded-xl p-6 h-[420px] flex flex-col justify-center items-center text-center">
<Trophy className="w-12 h-12 text-yellow-400/50 mb-4" />
<h3 className="text-xl font-bold text-brand-light mb-2">{selectedLeague.name}</h3>
<p className="text-sm text-brand-muted max-w-xs">This is a cup competition. Standings are not applicable.</p>
</div>
);
}
if (isLoadingSelected) return <SkeletonDisplay />;
if (selectedData?.standings?.length > 0) {
return <StandingsTable standings={selectedData.standings} title={`${selectedData.league.name} Standings`} />;
}
return <div className="bg-brand-secondary rounded-xl p-6 text-center">Standings not available for this league.</div>
}

if (liveLeagues.length > 0) {
const sliderSettings = {
dots: true, infinite: liveLeagues.length > 1, speed: 500, slidesToShow: 1, slidesToScroll: 1,
autoplay: true, autoplaySpeed: 8000, pauseOnHover: true, arrows: false,
appendDots: (dots: any) => (<div><ul className="-bottom-5 relative">{dots}</ul></div>),
};
return (
<div className="w-full">
<Slider {...sliderSettings}>
{liveLeagues.map((league) => (
<div key={league.id} className="px-1 py-1"><LeagueStandingsSlide league={league} /></div>
))}
</Slider>
</div>
);
}

if (isLoadingFeatured) return <SkeletonDisplay />;
if (featuredData?.standings?.length > 0) {
return (
<StandingsTable
standings={featuredData.standings}
title={`${featuredData.league.name} Standings`}
onRotate={rotateFeaturedLeague}
showRotateButton={true}
/>
);
}

return (
<div className="bg-brand-secondary rounded-xl p-6 h-[420px] flex flex-col justify-center items-center text-center">
<h3 className="text-xl font-bold text-brand-light mb-2">League Standings</h3>
<p className="text-sm text-brand-muted">Select a league to see standings here.</p>
</div>
);
}

// =================================================================
// FILE: src\components\StandingsTable.tsx
// =================================================================

"use client";

import Slider from "react-slick";
import { useQuery } from "@tanstack/react-query";
import axios from "axios";
import Image from "next/image";

import { useLeagueContext } from "@/context/LeagueContext";
import { League } from "@/types/api-football";
import LeagueStandingsSlide from "./LeagueStandingsSlide";

type TeamStanding = {
rank: number;
team: { id: number; name: string; logo: string; };
points: number;
goalsDiff: number;
all: { played: number; win: number; draw: number; lose: number; };
};

const fetchStandings = async (leagueId: number) => {
const { data } = await axios.get(`/api/standings?league=${leagueId}`);
return data;
};

const StandingsRowSkeleton = () => (
<tr className="border-t border-gray-700/50 animate-pulse">
<td className="p-2"><div className="h-4 w-4 rounded bg-gray-600/50 mx-auto"></div></td>
<td className="p-2"><div className="flex items-center gap-3"><div className="h-5 w-5 rounded-full bg-gray-600/50"></div><div className="h-4 w-32 rounded bg-gray-600/50"></div></div></td>
<td className="p-2"><div className="h-4 w-4 mx-auto rounded bg-gray-600/50"></div></td>
<td className="p-2"><div className="h-4 w-4 mx-auto rounded bg-gray-600/50"></div></td>
<td className="p-2"><div className="h-4 w-4 mx-auto rounded bg-gray-600/50"></div></td>
<td className="p-2"><div className="h-4 w-4 mx-auto rounded bg-gray-600/50"></div></td>
<td className="p-2"><div className="h-4 w-6 mx-auto rounded bg-gray-600/50"></div></td>
</tr>
);

export default function StandingsDisplay({ liveLeagues, upcomingLeagues }: { liveLeagues: League[], upcomingLeagues: League[] }) {
const { selectedLeague } = useLeagueContext();

const { data, isLoading, error } = useQuery({
queryKey: ['standings', selectedLeague?.id],
queryFn: () => fetchStandings(selectedLeague!.id),
enabled: !!selectedLeague,
staleTime: 1000 * 60 * 5,
});

const sliderLeagues = liveLeagues.length > 0 ? liveLeagues : upcomingLeagues;

const sliderSettings = {
dots: true,
infinite: sliderLeagues.length > 1,
speed: 500,
slidesToShow: 1,
slidesToScroll: 1,
autoplay: true,
autoplaySpeed: 8000,
pauseOnHover: true,
arrows: false,
appendDots: (dots: any) => (
<div><ul className="-bottom-5 relative">{dots}</ul></div>
),
};

if (selectedLeague) {
return (
<div className="bg-brand-secondary rounded-xl p-4 lg:p-6">
<div className="flex items-center gap-3 mb-4">
{isLoading && <div className="w-8 h-8 rounded-full bg-gray-700 animate-pulse"></div>}
{data?.league?.logo && <Image src={data.league.logo} alt={data.league.name} width={32} height={32}/>}
<h3 className="text-xl font-bold text-brand-light">{isLoading ? "Loading..." : data?.league?.name ? `${data.league.name} Standings` : "Standings"}</h3>
</div>
<div className="overflow-x-auto h-[350px] custom-scrollbar">
<table className="w-full text-sm">
<thead className="text-brand-muted text-xs"><tr className="border-b border-gray-700/50"><th className="p-2 font-semibold text-left w-8">#</th><th className="p-2 font-semibold text-left">Team</th><th className="p-2 font-semibold text-center">W</th><th className="p-2 font-semibold text-center">D</th><th className="p-2 font-semibold text-center">L</th><th className="p-2 font-semibold text-center">GD</th><th className="p-2 font-semibold text-center">Pts</th></tr></thead>
<tbody>
{isLoading ? Array.from({ length: 10 }).map((_, i) => <StandingsRowSkeleton key={i} />) : error ? <tr><td colSpan={7} className="text-center py-10 text-brand-muted">Could not load standings.</td></tr> : data?.standings && data.standings.length > 0 ? data.standings.map((team: TeamStanding) => (<tr key={team.team.id} className="border-t border-gray-700/50 hover:bg-gray-700/30"><td className="p-2 font-semibold text-center">{team.rank}</td><td className="p-2 flex items-center gap-3 font-medium"><Image src={team.team.logo} alt={team.team.name} width={20} height={20} />{team.team.name}</td><td className="p-2 text-center text-brand-muted">{team.all.win}</td><td className="p-2 text-center text-brand-muted">{team.all.draw}</td><td className="p-2 text-center text-brand-muted">{team.all.lose}</td><td className="p-2 text-center text-brand-muted">{team.goalsDiff}</td><td className="p-2 text-center font-bold text-brand-light">{team.points}</td></tr>)) : <tr><td colSpan={7} className="text-center py-10 text-brand-muted text-sm">Standings are not available for this league.</td></tr>}
</tbody>
</table>
</div>
</div>
);
}

if (sliderLeagues.length > 0) {
return (
<div className="w-full">
<Slider {...sliderSettings}>
{sliderLeagues.map((league) => (
<div key={league.id} className="px-1 py-1">
<LeagueStandingsSlide league={league} />
</div>
))}
</Slider>
</div>
);
}

return (
<div className="bg-brand-secondary rounded-xl p-6 h-[420px] flex flex-col justify-center items-center text-center">
<h3 className="text-xl font-bold text-brand-light mb-2">League Standings</h3>
<p className="text-sm text-brand-muted">Select a league from the sidebar or find a live match to see standings here.</p>
</div>
);
}

// =================================================================
// FILE: src\components\StyledLink.tsx
// =================================================================

"use client";

import { default as NextLink, LinkProps } from 'next/link';
import NProgress from 'nprogress';

export default function StyledLink({ href, children, ...props }: LinkProps & { children: React.ReactNode }) {

const handleLinkClick = (e: React.MouseEvent<HTMLAnchorElement>) => {

const currentPath = window.location.pathname;
if (href.toString() !== currentPath) {
NProgress.start();
}

if (props.onClick) {
props.onClick(e);
}
};

return (
<NextLink href={href} {...props} onClick={handleLinkClick}>
{children}
</NextLink>
);
}

// =================================================================
// FILE: src\components\tabs\LineupsTab.tsx
// =================================================================

import Image from 'next/image';

const PlayerList = ({ title, players }: { title: string, players: any[] }) => (
<div>
<h4 className="font-bold text-lg mb-2 text-brand-muted">{title}</h4>
<ul className="space-y-3">
{players.map((p: any) => (
<li key={p.player.id} className="flex items-center gap-3">
<span className="text-brand-muted font-mono w-6 text-center">{p.player.number}</span>
<span>{p.player.name}</span>
</li>
))}
</ul>
</div>
);

export default function LineupsTab({ lineups }: { lineups: any[] }) {
if (!lineups || lineups.length < 2) {
return <p className="text-brand-muted text-center py-8">Lineups are not yet available.</p>;
}

const homeLineup = lineups[0];
const awayLineup = lineups[1];

return (
<div className="p-4 grid grid-cols-1 md:grid-cols-2 gap-8">
{}
<div>
<div className="flex items-center gap-3 mb-4">
<Image src={homeLineup.team.logo} alt={homeLineup.team.name} width={32} height={32}/>
<h3 className="font-bold text-xl">{homeLineup.team.name}</h3>
</div>
<p className="mb-4 text-brand-muted">Formation: {homeLineup.formation}</p>
<PlayerList title="Starting XI" players={homeLineup.startXI} />
<PlayerList title="Substitutes" players={homeLineup.substitutes} />
</div>
{}
<div>
<div className="flex items-center gap-3 mb-4">
<Image src={awayLineup.team.logo} alt={awayLineup.team.name} width={32} height={32}/>
<h3 className="font-bold text-xl">{awayLineup.team.name}</h3>
</div>
<p className="mb-4 text-brand-muted">Formation: {awayLineup.formation}</p>
<PlayerList title="Starting XI" players={awayLineup.startXI} />
<PlayerList title="Substitutes" players={awayLineup.substitutes} />
</div>
</div>
);
}

// =================================================================
// FILE: src\components\tabs\StatsTab.tsx
// =================================================================

import { BarChart2 } from 'lucide-react';

export default function StatsTab({ statistics, teams }: { statistics: any[], teams: any }) {
if (!statistics || statistics.length < 2) {
return <p className="text-brand-muted text-center py-8">Statistics are not available for this match.</p>;
}

const homeStats = statistics.find((s: any) => s.team.id === teams.home.id)?.statistics || [];
const awayStats = statistics.find((s: any) => s.team.id === teams.away.id)?.statistics || [];

const allStatTypes = Array.from(new Set([...homeStats.map((s: any) => s.type), ...awayStats.map((s: any) => s.type)]));

return (
<div className="space-y-4 p-4">
{allStatTypes.map((type) => {
const homeStat = homeStats.find((s: any) => s.type === type)?.value ?? 0;
const awayStat = awayStats.find((s: any) => s.type === type)?.value ?? 0;
const total = (Number(homeStat) || 0) + (Number(awayStat) || 0);
const homePercent = total > 0 ? ((Number(homeStat) || 0) / total) * 100 : 50;

return (
<div key={type}>
<div className="flex justify-between items-center mb-1 text-sm font-semibold">
<span>{homeStat ?? 0}</span>
<span className="text-brand-muted">{type}</span>
<span>{awayStat ?? 0}</span>
</div>
<div className="flex w-full h-2 rounded-full overflow-hidden bg-gray-700">
<div className="bg-brand-purple" style={{ width: `${homePercent}%` }}></div>
<div className="bg-blue-600" style={{ width: `${100 - homePercent}%` }}></div>
</div>
</div>
);
})}
</div>
);
}

// =================================================================
// FILE: src\components\TeamDetailView\index.tsx
// =================================================================

"use client";

import { useState } from 'react';
import Image from 'next/image';
import Link from '@/components/StyledLink';
import { Info, List, BarChart2, Users } from 'lucide-react';

import TeamOverviewTab from './TeamOverviewTab';
import TeamMatchesTab from './TeamMatchesTab';
import TeamPlayersTab from './TeamPlayersTab';
import TeamTablesTab from './TeamTablesTab';

const TABS = [
{ name: 'Overview', icon: Info },
{ name: 'Matches', icon: List },
{ name: 'Tables', icon: BarChart2 },
{ name: 'Players', icon: Users },
];

export default function TeamDetailView({ teamData }: { teamData: any }) {
const { teamInfo, squad, fixtures, standings } = teamData;
const [activeTab, setActiveTab] = useState('Overview');

return (
<div className="flex flex-col gap-8">
{}
<div className="flex items-center justify-between">
<div className="flex items-center gap-4">
<Image src={teamInfo.team.logo} alt={teamInfo.team.name} width={64} height={64} />
<div>
<h1 className="text-3xl font-bold text-white">{teamInfo.team.name}</h1>
<p className="text-brand-muted">{teamInfo.team.country}</p>
</div>
</div>
<Link href="/" className="text-sm bg-brand-secondary px-4 py-2 rounded-lg hover:bg-gray-700/50">
← Back to Global View
</Link>
</div>

{}
<div className="bg-brand-secondary rounded-xl p-2">
<div className="flex items-center border-b border-gray-700/50 overflow-x-auto custom-scrollbar">
{TABS.map((tab) => (
<button
key={tab.name}
onClick={() => setActiveTab(tab.name)}
className={`flex-shrink-0 flex items-center justify-center gap-2 p-4 font-semibold transition-colors min-w-[140px] ${
activeTab === tab.name ? 'text-white border-b-2 border-brand-purple' : 'text-brand-muted hover:text-white'
}`}
>
<tab.icon size={18} /><span>{tab.name}</span>
</button>
))}
</div>

<div className="min-h-[600px] py-4">
{activeTab === 'Overview' && <TeamOverviewTab teamInfo={teamInfo} />}
{activeTab === 'Matches' && <TeamMatchesTab fixtures={fixtures} />}
{activeTab === 'Tables' && <TeamTablesTab standings={standings} />}
{activeTab === 'Players' && <TeamPlayersTab squad={squad} />}
</div>
</div>
</div>
);
}

// =================================================================
// FILE: src\components\TeamDetailView\TeamMatchesTab.tsx
// =================================================================

import MatchListItem from '../MatchListItem';

export default function TeamMatchesTab({ fixtures }: { fixtures: any[] }) {
if (!fixtures || fixtures.length === 0) {
return <p className="text-center py-10 text-brand-muted">No recent match data available.</p>;
}
return (
<div className="p-4 space-y-3">
<h3 className="text-xl font-bold mb-4">Recent & Upcoming Matches</h3>
{fixtures.map(match => (
<MatchListItem key={match.fixture.id} match={match} />
))}
</div>
);
}

// =================================================================
// FILE: src\components\TeamDetailView\TeamOverviewTab.tsx
// =================================================================

import Image from 'next/image';
import { MapPin, User, Calendar } from 'lucide-react';

const InfoRow = ({ label, value, icon }: { label: string; value: React.ReactNode; icon: React.ReactNode; }) => (
<div className="p-4 bg-gray-800/50 rounded-lg flex items-center gap-4">
<div className="flex-shrink-0 text-brand-muted">{icon}</div>
<div>
<p className="text-sm font-semibold text-brand-muted">{label}</p>
<p className="text-lg font-bold text-white">{value}</p>
</div>
</div>
);

export default function TeamOverviewTab({ teamInfo }: { teamInfo: any }) {
const { team, venue } = teamInfo;
return (
<div className="p-6">
<div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
{venue.image && (
<div className="relative h-64 w-full rounded-lg overflow-hidden">
<Image src={venue.image} alt={venue.name} layout="fill" objectFit="cover" />
</div>
)}
<div className="space-y-4">
<InfoRow label="Venue Name" value={venue.name} icon={<MapPin size={24} />} />
<InfoRow label="City" value={venue.city} icon={<MapPin size={24} />} />
<InfoRow label="Founded" value={team.founded} icon={<Calendar size={24} />} />
</div>
</div>
</div>
);
}

// =================================================================
// FILE: src\components\TeamDetailView\TeamPlayersTab.tsx
// =================================================================

import Image from 'next/image';

export default function TeamPlayersTab({ squad }: { squad: any[] }) {
if (!squad || squad.length === 0) {
return <p className="text-center py-10 text-brand-muted">Squad information is not available.</p>;
}

const groupedByPosition = squad.reduce((acc, player) => {
const position = player.position;
if (!acc[position]) {
acc[position] = [];
}
acc[position].push(player);
return acc;
}, {});

const positionOrder = ['Goalkeeper', 'Defender', 'Midfielder', 'Attacker'];

return (
<div className="p-4">
{positionOrder.map(position => groupedByPosition[position] && (
<div key={position} className="mb-8">
<h3 className="text-2xl font-bold border-b-2 border-brand-purple pb-2 mb-4">{position}s</h3>
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
{groupedByPosition[position].map((player: any) => (
<div key={player.id} className="bg-gray-800/50 p-3 rounded-lg flex items-center gap-4">
<Image src={player.photo} alt={player.name} width={56} height={56} className="rounded-full bg-brand-dark" />
<div>
<p className="font-bold text-lg text-white">{player.name}</p>
<p className="text-brand-muted">Age: {player.age}</p>
</div>
</div>
))}
</div>
</div>
))}
</div>
);
}

// =================================================================
// FILE: src\components\TeamDetailView\TeamTablesTab.tsx
// =================================================================

import Image from 'next/image';

export default function TeamTablesTab({ standings }: { standings: any[] }) {
if (!standings || standings.length === 0) {
return <p className="text-center py-10 text-brand-muted">This team is not currently in any active league competitions.</p>;
}
return (
<div className="p-4 space-y-8">
{standings.map(({ league }: { league: any }) => (
<div key={league.id} className="bg-gray-800/50 rounded-lg p-4">
<div className="flex items-center gap-3 mb-4">
<Image src={league.logo} alt={league.name} width={32} height={32} />
<h3 className="text-xl font-bold">{league.name}</h3>
</div>
<div className="overflow-x-auto">
<table className="w-full min-w-[600px] text-sm text-left">
{}
</table>
</div>
</div>
))}
</div>
);
}

// =================================================================
// FILE: src\components\TeamDirectoryCard.tsx
// =================================================================

"use client";

import Image from 'next/image';
import StyledLink from './StyledLink';
import { MapPin } from 'lucide-react';
import slugify from 'slugify';

interface CardProps {
team: { id: number; name: string; logo: string; country: string };
venue: { name: string; city: string };
}

const generateTeamSlug = (name: string, id: number) => {
const slug = slugify(name, { lower: true, strict: true });
return `/football/team/${slug}-${id}`;
};

export default function TeamDirectoryCard({ team, venue }: CardProps) {
const href = generateTeamSlug(team.name, team.id);

return (
<StyledLink href={href} className="block group">
<div className="bg-brand-secondary rounded-lg p-4 h-full flex items-center gap-4 transition-all duration-300 transform hover:-translate-y-1 hover:shadow-lg hover:shadow-purple-900/20">
<Image
src={team.logo}
alt={`${team.name} logo`}
width={48}
height={48}
className="bg-white rounded-full p-1 flex-shrink-0"
/>
<div className="flex-1 min-w-0">
<h3 className="font-bold text-white truncate group-hover:text-brand-purple transition-colors">{team.name}</h3>
<div className="flex items-center gap-1.5 text-sm text-brand-muted truncate">
<MapPin size={12} />
<span>{venue.city}, {team.country}</span>
</div>
</div>
</div>
</StyledLink>
);
}

export const TeamDirectoryCardSkeleton = () => (
<div className="bg-brand-secondary rounded-lg p-4 h-full flex items-center gap-4 animate-pulse">
<div className="w-12 h-12 rounded-full bg-gray-700/50 flex-shrink-0"></div>
<div className="flex-1 min-w-0 space-y-2">
<div className="h-5 w-3/4 rounded bg-gray-600/50"></div>
<div className="h-4 w-1/2 rounded bg-gray-600/50"></div>
</div>
</div>
);

// =================================================================
// FILE: src\components\UpcomingMatchesSlider.tsx
// =================================================================

"use client";

import Slider from "react-slick";
import { useQuery } from "@tanstack/react-query";
import axios from "axios";
import { useLeagueContext } from "@/context/LeagueContext";

import MatchSlide from "./MatchSlide";
import FinishedMatchSlide from "./FinishedMatchSlide";

const fetchLeagueMatches = async (leagueId: number) => {
const { data } = await axios.get(`/api/upcoming-matches?league=${leagueId}`);
return data;
};

const SliderSkeleton = () => (
<div className="relative w-full h-64 overflow-hidden rounded-2xl bg-brand-secondary p-8 animate-pulse">
<div className="flex h-full items-center justify-center">
<div className="h-12 w-80 rounded bg-gray-600/50"></div>
</div>
</div>
);

export default function UpcomingMatchesSlider() {
const { selectedLeague } = useLeagueContext();

const { data: matches, isLoading } = useQuery({
queryKey: ['leagueMatches', selectedLeague?.id],
queryFn: () => fetchLeagueMatches(selectedLeague!.id),
enabled: !!selectedLeague,
staleTime: 1000 * 60 * 5,
});

const sliderSettings = {
dots: true,
infinite: true,
speed: 500,
slidesToShow: 1,
slidesToScroll: 1,
autoplay: true,
autoplaySpeed: 7000,
pauseOnHover: true,
arrows: false,
appendDots: (dots: any) => (
<div><ul className="-bottom-5 relative">{dots}</ul></div>
),
};

if (isLoading) {
return <SliderSkeleton />;
}

if (!matches || matches.length === 0) {
return (
<div className="flex h-64 items-center justify-center rounded-xl bg-brand-secondary text-brand-muted">
No recent or upcoming matches found for this league.
</div>
);
}

return (
<div className="w-full">
<Slider {...sliderSettings}>
{matches.map((match: any) => {

const isFinished = match.fixture.status.short === 'FT';

return (
<div key={match.fixture.id} className="px-1">
{isFinished ? (
<FinishedMatchSlide match={match} />
) : (
<MatchSlide match={match} />
)}
</div>
);
})}
</Slider>
</div>
);
}

// =================================================================
// FILE: src\components\VotingPanel.tsx
// =================================================================

"use client";

import { useState, memo } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import axios from 'axios';
import Image from 'next/image';
import { useVoteStorage } from '@/hooks/useVoteStorage';

interface VoteData {
homeVotes: number;
drawVotes: number;
awayVotes: number;
}
interface VotingPanelProps {
fixtureId: number;
teams: { home: any; away: any; };
}

const getVotes = async (fixtureId: number): Promise<VoteData> => {
const { data } = await axios.get(`/api/votes?fixture=${fixtureId}`);
return data;
};

const submitVote = async ({ fixtureId, vote }: { fixtureId: number; vote: string }): Promise<VoteData> => {
const { data } = await axios.post('/api/votes', { fixtureId, vote });
return data;
};

const PanelSkeleton = () => (
<div className="animate-pulse p-4">
<div className="h-4 w-1/2 mx-auto rounded bg-gray-600/50 mb-4"></div>
<div className="grid grid-cols-3 gap-3">
<div className="h-24 rounded-lg bg-gray-700/50"></div>
<div className="h-24 rounded-lg bg-gray-700/50"></div>
<div className="h-24 rounded-lg bg-gray-700/50"></div>
</div>
</div>
);

const VotingPanel = memo(function VotingPanel({ fixtureId, teams }: VotingPanelProps) {
const queryClient = useQueryClient();
const { setVote, getVoteForFixture } = useVoteStorage();

const [hasVoted, setHasVoted] = useState(() => !!getVoteForFixture(fixtureId));

const { data: voteData, isLoading } = useQuery({
queryKey: ['votes', fixtureId],
queryFn: () => getVotes(fixtureId),
staleTime: 1000 * 60,
});

const voteMutation = useMutation({
mutationFn: submitVote,
onSuccess: () => {

queryClient.invalidateQueries({ queryKey: ['votes', fixtureId] });
},
});

const handleVote = (choice: 'home' | 'draw' | 'away') => {
if (hasVoted) return;

setVote(fixtureId, choice);
setHasVoted(true);
voteMutation.mutate({ fixtureId, vote: choice });
};

const handleBetClick = (e: React.MouseEvent) => {
e.stopPropagation();
console.log(`User clicked Bet Now for fixture ${fixtureId}`);

};

if (isLoading) {
return <PanelSkeleton />;
}

if (!voteData) {
return <p className="text-center text-sm text-brand-muted py-4">Could not load voting data.</p>;
}

const totalVotes = voteData.homeVotes + voteData.drawVotes + voteData.awayVotes;
const homePercent = totalVotes > 0 ? Math.round((voteData.homeVotes / totalVotes) * 100) : 34;
const awayPercent = totalVotes > 0 ? Math.round((voteData.awayVotes / totalVotes) * 100) : 33;
const drawPercent = 100 - homePercent - awayPercent;

return (
<div className="bg-[#1F1D2B] p-4 border-t-2 border-gray-900/50">
{!hasVoted ? (

<>
<h4 className="text-center text-sm font-bold text-brand-muted mb-3 tracking-wider">WHO WILL WIN?</h4>
<div className="flex justify-center items-stretch gap-3">
<button onClick={() => handleVote('home')} className="flex-1 flex flex-col items-center gap-2 p-3 rounded-lg bg-gray-800/60 hover:bg-brand-purple transition-all duration-200 transform hover:-translate-y-1">
<Image src={teams.home.logo} alt={teams.home.name} width={48} height={48} className="object-contain h-12"/>
<span className="text-xs font-semibold text-white truncate">{teams.home.name}</span>
</button>
<button onClick={() => handleVote('draw')} className="flex-1 flex flex-col items-center justify-center gap-2 p-3 rounded-lg bg-gray-800/60 hover:bg-brand-purple transition-all duration-200 transform hover:-translate-y-1">
<span className="font-bold text-3xl text-white">=</span>
<span className="text-xs font-semibold text-white">DRAW</span>
</button>
<button onClick={() => handleVote('away')} className="flex-1 flex flex-col items-center gap-2 p-3 rounded-lg bg-gray-800/60 hover:bg-brand-purple transition-all duration-200 transform hover:-translate-y-1">
<Image src={teams.away.logo} alt={teams.away.name} width={48} height={48} className="object-contain h-12"/>
<span className="text-xs font-semibold text-white truncate">{teams.away.name}</span>
</button>
</div>
</>
) : (

<>
<h4 className="text-xs font-bold text-center text-brand-muted mb-2 tracking-widest">COMMUNITY VOTE</h4>
<div className="flex justify-between items-center mb-1">
<span className="text-sm font-bold text-white">{homePercent}%</span>
<span className="text-xs text-brand-muted">Draw {drawPercent}%</span>
<span className="text-sm font-bold text-white">{awayPercent}%</span>
</div>
<div className="flex w-full h-2 rounded-full overflow-hidden bg-gray-800 mb-4">
<div className="bg-brand-purple" style={{ width: `${homePercent}%` }}></div>
<div className="bg-gray-500" style={{ width: `${drawPercent}%` }}></div>
<div className="bg-blue-600" style={{ width: `${awayPercent}%` }}></div>
</div>
<div className="relative">
<span className="absolute top-0 left-0 inline-flex h-full w-full rounded-lg bg-orange-400 opacity-75 animate-ping"></span>
<button onClick={handleBetClick} className="relative w-full bg-orange-500 text-white font-bold py-3 rounded-lg flex items-center justify-center gap-2 hover:bg-orange-600 transition-colors">
Bet 10€ and Win 1000 €
</button>
</div>
<p className="text-xs text-brand-muted mt-1.5 text-center">18+. Gamble responsibly. Verified Partner chinchincasino.com.</p>
</>
)}
</div>
);
});

export default VotingPanel;

// =================================================================
// FILE: src\context\CountryContext.tsx
// =================================================================

"use client";

import { createContext, useState, useContext, ReactNode, Dispatch, SetStateAction } from 'react';
import { Country } from '@/types/api-football';

interface CountryContextType {
selectedCountry: Country | null;
setSelectedCountry: Dispatch<SetStateAction<Country | null>>;
}

const CountryContext = createContext<CountryContextType | undefined>(undefined);

export function CountryProvider({ children }: { children: ReactNode }) {
const [selectedCountry, setSelectedCountry] = useState<Country | null>(null);

return (
<CountryContext.Provider value={{ selectedCountry, setSelectedCountry }}>
{children}
</CountryContext.Provider>
);
}

export function useCountry() {
const context = useContext(CountryContext);
if (context === undefined) {
throw new Error('useCountry must be used within a CountryProvider');
}
return context;
}

// =================================================================
// FILE: src\context\LanguageContext.tsx
// =================================================================

"use client";

import { createContext, useState, useContext, ReactNode, Dispatch, SetStateAction } from 'react';

interface LanguageContextType {
locale: 'en' | 'tr';
setLocale: Dispatch<SetStateAction<'en' | 'tr'>>;
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

export function LanguageProvider({ children }: { children: ReactNode }) {

const [locale, setLocale] = useState<'en' | 'tr'>('tr');

return (
<LanguageContext.Provider value={{ locale, setLocale }}>
{children}
</LanguageContext.Provider>
);
}

export function useLanguage() {
const context = useContext(LanguageContext);
if (context === undefined) {
throw new Error('useLanguage must be used within a LanguageProvider');
}
return context;
}

// =================================================================
// FILE: src\context\LeagueContext.tsx
// =================================================================

"use client";

import { createContext, useContext, useState, ReactNode } from "react";
import { Country, League } from "@/types/api-football";

interface LeagueContextType {
selectedCountry: Country | null;
setSelectedCountry: (country: Country | null) => void;
selectedLeague: League | null;
setSelectedLeague: (league: League | null) => void;
}

const LeagueContext = createContext<LeagueContextType | undefined>(undefined);

export const LeagueProvider = ({ children }: { children: ReactNode }) => {

const [selectedCountry, setSelectedCountry] = useState<Country | null>(null);
const [selectedLeague, setSelectedLeague] = useState<League | null>(null);

const value = { selectedCountry, setSelectedCountry, selectedLeague, setSelectedLeague };

return (
<LeagueContext.Provider value={value}>{children}</LeagueContext.Provider>
);
};

export const useLeagueContext = (): LeagueContextType => {
const context = useContext(LeagueContext);
if (!context) throw new Error("useLeagueContext must be used within a LeagueProvider");
return context;
};

// =================================================================
// FILE: src\hooks\useTranslation.ts
// =================================================================

"use client";

import { useLanguage } from '@/context/LanguageContext';
import en from '@/locales/en.json';
import tr from '@/locales/tr.json';
import { type TranslationKey } from '@/types/translations';

const translations: Record<'en' | 'tr', Record<string, string>> = { en, tr };

export function useTranslation() {
const { locale } = useLanguage();

const t = (key: TranslationKey, params?: { [key: string]: string | number }): string => {

let translation = translations[locale][key] || key;

if (params) {
Object.keys(params).forEach(paramKey => {
const regex = new RegExp(`{${paramKey}}`, 'g');
translation = translation.replace(regex, String(params[paramKey]));
});
}

return translation;
};

return { t, locale };
}

// =================================================================
// FILE: src\hooks\useVoteStorage.ts
// =================================================================

"use client";

import { useState, useCallback } from 'react';

const VOTE_STORAGE_KEY = 'matchVotes';

export function useVoteStorage() {

const getVotes = useCallback((): { [key: number]: string } => {

if (typeof window === 'undefined') {
return {};
}
try {
const votes = window.localStorage.getItem(VOTE_STORAGE_KEY);
return votes ? JSON.parse(votes) : {};
} catch (error) {
console.error("Error parsing votes from localStorage", error);
return {};
}
}, []);

const setVote = useCallback((fixtureId: number, choice: 'home' | 'draw' | 'away') => {
if (typeof window === 'undefined') {
return;
}
try {
const allVotes = getVotes();
allVotes[fixtureId] = choice;
window.localStorage.setItem(VOTE_STORAGE_KEY, JSON.stringify(allVotes));
} catch (error) {
console.error("Error saving vote to localStorage", error);
}
}, [getVotes]);

const getVoteForFixture = useCallback((fixtureId: number): string | null => {
return getVotes()[fixtureId] || null;
}, [getVotes]);

return { setVote, getVoteForFixture };
}

// =================================================================
// FILE: src\lib\data\team.ts
// =================================================================

import axios from 'axios';

export async function fetchTeamDetails(teamId: string) {
const season = new Date().getFullYear().toString();

const options = (endpoint: string, params: object) => ({
method: 'GET',
url: `${process.env.NEXT_PUBLIC_API_FOOTBALL_HOST}/${endpoint}`,
params,
headers: { 'x-apisports-key': process.env.NEXT_PUBLIC_API_FOOTBALL_KEY },
});

try {

const [
teamInfoResponse,
squadResponse,
recentFixturesResponse,
standingsResponse
] = await Promise.all([
axios.request(options('teams', { id: teamId })),
axios.request(options('players/squads', { team: teamId })),
axios.request(options('fixtures', { team: teamId, last: 10 })),
axios.request(options('standings', { team: teamId, season: season })),
]);

if (!teamInfoResponse.data.response || teamInfoResponse.data.response.length === 0) {

return null;
}

const responseData = {
teamInfo: teamInfoResponse.data.response[0],
squad: squadResponse.data.response[0]?.players ?? [],
fixtures: recentFixturesResponse.data.response,
standings: standingsResponse.data.response,
};

return responseData;

} catch (error) {
console.error(`[ServerLib] Error fetching details for team ${teamId}:`, error);

return null;
}
}

// =================================================================
// FILE: src\lib\dbConnect.ts
// =================================================================

import mongoose from 'mongoose';

const NEXT_PUBLIC_MONGODB_URI = process.env.NEXT_PUBLIC_MONGODB_URI;

if (!NEXT_PUBLIC_MONGODB_URI) {
throw new Error(
'Please define the NEXT_PUBLIC_MONGODB_URI environment variable inside .env.local'
);
}

let cached = (global as any).mongoose;

if (!cached) {
cached = (global as any).mongoose = { conn: null, promise: null };
}

async function dbConnect() {
if (cached.conn) {
return cached.conn;
}

if (!cached.promise) {
const opts = {
bufferCommands: false,
serverSelectionTimeoutMS: 30000,
socketTimeoutMS: 45000,
};

cached.promise = mongoose.connect(NEXT_PUBLIC_MONGODB_URI!, opts).then((mongoose) => {
console.log("New Mongoose connection established.");
return mongoose;
});
}

try {
cached.conn = await cached.promise;
} catch (e) {
cached.promise = null;
throw e;
}

return cached.conn;
}

export default dbConnect;

// =================================================================
// FILE: src\lib\generate-league-slug.ts
// =================================================================

import slugify from 'slugify';

export function generateLeagueSlug(name: string, id: number): string {
const nameSlug = slugify(name, {
lower: true,
strict: true,
trim: true,
});

return `/football/league/${nameSlug}-${id}`;
}

// =================================================================
// FILE: src\lib\generate-match-slug.ts
// =================================================================

import slugify from 'slugify';

interface Team {
name: string;
}

export function generateMatchSlug(homeTeam: Team, awayTeam: Team, fixtureId: number): string {
const homeName = homeTeam?.name || 'team';
const awayName = awayTeam?.name || 'team';

const homeSlug = slugify(homeName, { lower: true, strict: true });
const awaySlug = slugify(awayName, { lower: true, strict: true });

return `${homeSlug}-vs-${awaySlug}-${fixtureId}`;
}

// =================================================================
// FILE: src\lib\mongoClient.ts
// =================================================================

import { MongoClient } from "mongodb";

if (!process.env.NEXT_PUBLIC_MONGODB_URI) {
throw new Error('Invalid/Missing environment variable: "NEXT_PUBLIC_MONGODB_URI"');
}

const uri = process.env.NEXT_PUBLIC_MONGODB_URI;
const options = {};

let client: MongoClient;
let clientPromise: Promise<MongoClient>;

if (process.env.NODE_ENV === "development") {

let globalWithMongo = global as typeof globalThis & {
_mongoClientPromise?: Promise<MongoClient>;
};

if (!globalWithMongo._mongoClientPromise) {
client = new MongoClient(uri, options);
globalWithMongo._mongoClientPromise = client.connect();
console.log("New native MongoDB connection established for Auth.js.");
}
clientPromise = globalWithMongo._mongoClientPromise;
} else {

client = new MongoClient(uri, options);
clientPromise = client.connect();
}

export default clientPromise;

// =================================================================
// FILE: src\models\Post.ts
// =================================================================

import mongoose, { Schema, Document, models, Model } from 'mongoose';

export interface IPost extends Document {
title: string;
content: string;
slug: string;
author: string;
status: 'draft' | 'published';
featuredImage?: string;
metaTitle?: string;
metaDescription?: string;

featuredImageTitle?: string;
featuredImageAltText?: string;
sport: string;
}

const PostSchema: Schema = new Schema(
{
title: { type: String, required: true, trim: true },
content: { type: String, required: true },
slug: { type: String, required: true, unique: true, trim: true },
author: { type: String, default: 'Admin' },
status: { type: String, enum: ['draft', 'published'], default: 'draft' },
featuredImage: { type: String },
metaTitle: { type: String, trim: true },
metaDescription: { type: String, trim: true },
sport: { type: String, default: 'general', required: true },
featuredImageTitle: { type: String, trim: true },
featuredImageAltText: { type: String, trim: true },
},
{
timestamps: true,
}
);

const Post: Model<IPost> = models.Post || mongoose.model<IPost>('Post', PostSchema);

export default Post;

// =================================================================
// FILE: src\models\User.ts
// =================================================================

import mongoose, { Schema, models, model } from 'mongoose';

export interface IUser extends mongoose.Document {
name?: string;
email: string;
image?: string;
password?: string;
role: 'user' | 'admin';
favoriteTeams?: number[];
}

const UserSchema = new Schema<IUser>({
name: String,
email: {
type: String,
unique: true,
required: true,
},
image: String,

password: {
type: String,
select: false,
},
role: {
type: String,
enum: ['user', 'admin'],
default: 'user',
},
favoriteTeams: {
type: [Number],
default: [],
},
}, { timestamps: true });

const User = models.User || model<IUser>('User', UserSchema);
export default User;

// =================================================================
// FILE: src\models\Vote.ts
// =================================================================

import mongoose, { Schema, Document, models, Model } from 'mongoose';

export interface IVote extends Document {
fixtureId: number;
homeVotes: number;
drawVotes: number;
awayVotes: number;
}

const VoteSchema: Schema = new Schema(
{
fixtureId: {
type: Number,
required: true,
unique: true,
index: true
},
homeVotes: { type: Number, default: 0 },
drawVotes: { type: Number, default: 0 },
awayVotes: { type: Number, default: 0 },
},
{
timestamps: true,
}
);

const Vote: Model<IVote> = models.Vote || mongoose.model<IVote>('Vote', VoteSchema);

export default Vote;

// =================================================================
// FILE: src\services\sports\football.service.ts
// =================================================================

import axios from 'axios';
import { ISportService } from './ISportService';
import { format, addDays } from 'date-fns';

export class FootballApiService implements ISportService {
private readonly apiKey = process.env.NEXT_PUBLIC_API_FOOTBALL_KEY;
private readonly apiHost = process.env.NEXT_PUBLIC_API_FOOTBALL_HOST;

private async request(endpoint: string, params: object) {
const options = {
method: 'GET',
url: `${this.apiHost}/${endpoint}`,
params,
headers: { 'x-apisports-key': this.apiKey },
};
try {
const response = await axios.request(options);
return response.data.response;
} catch (error) {
console.error(`[FootballApiService] Error fetching '${endpoint}':`, error);
throw new Error(`Failed to fetch data from ${endpoint}.`);
}
}

async getCompetitions(params: { country?: string; type?: string; fetchAll?: boolean }): Promise<any[]> {

const apiParams: any = { current: 'true' };
if (params.country) apiParams.country = params.country;
if (params.type) apiParams.type = params.type;

let allLeagues = await this.request('leagues', apiParams);

return allLeagues;
}

async getFixtures(params: { competitionId?: string; date?: string; teamId?: string }): Promise<any[]> {

const apiParams: any = {};
const season = new Date().getFullYear().toString();

if (params.competitionId) apiParams.league = params.competitionId;
if (params.date) apiParams.date = params.date;
if (params.teamId) {
apiParams.team = params.teamId;
apiParams.last = 10;
} else {

apiParams.season = season;
const today = format(new Date(), 'yyyy-MM-dd');
apiParams.from = today;
apiParams.to = format(addDays(new Date(), 1), 'yyyy-MM-dd');
}

return this.request('fixtures', apiParams);
}

async getMatchDetails(matchId: string): Promise<any | null> {

const [fixture, events, stats, h2h, prediction] = await Promise.all([
this.request('fixtures', { id: matchId }),
this.request('fixtures/events', { fixture: matchId }),
this.request('fixtures/statistics', { fixture: matchId }),
this.request('fixtures/headtohead', { h2h: `...` }),
this.request('predictions', { fixture: matchId })
]);

return { fixture: fixture[0], events, statistics: stats,  };
}

async getTeamDetails(teamId: string): Promise<any | null> {

return await this.request('teams', { id: teamId });
}

async getStandings(params: { competitionId: string; season: string; }): Promise<any | null> {
return this.request('standings', { league: params.competitionId, season: params.season });
}
}

// =================================================================
// FILE: src\services\sports\index.ts
// =================================================================

import { ISportService } from './ISportService';
import { FootballApiService } from './football.service';

const services: { [key: string]: ISportService } = {
football: new FootballApiService(),

};

export function getSportService(sport: string): ISportService {
const service = services[sport];
if (!service) {
throw new Error(`Unsupported sport: ${sport}`);
}
return service;
}

// =================================================================
// FILE: src\services\sports\ISportService.ts
// =================================================================

export interface ISportService {

getCompetitions(params: { country?: string; type?: string; fetchAll?: boolean }): Promise<any[]>;

getFixtures(params: { competitionId?: string; date?: string; season?: string; live?: boolean; teamId?: string }): Promise<any[]>;

getMatchDetails(matchId: string): Promise<any | null>;

getTeamDetails(teamId: string): Promise<any | null>;

getStandings(params: { competitionId: string; season: string }): Promise<any | null>;

}

// =================================================================
// FILE: src\types\api-football.ts
// =================================================================

export interface League {
id: number;
name: string;
logoUrl: string;
countryName: string;
countryFlagUrl: string,
type: string,
href: string;
}

export interface Country {
name: string;
code: string | null;
flagUrl: string;
}

// =================================================================
// FILE: src\types\global.d.ts
// =================================================================

import { Mongoose } from 'mongoose';

declare global {
var mongoose: {
conn: Mongoose | null;
promise: Promise<Mongoose> | null;
};
}

// =================================================================
// FILE: src\types\next-auth.d.ts
// =================================================================

import 'next-auth';
import 'next-auth/jwt';

declare module 'next-auth' {

interface Session {
user: {
id: string;
role: 'user' | 'admin';
} & DefaultSession['user'];
}

interface User {
role: 'user' | 'admin';
}
}

declare module 'next-auth/jwt' {

interface JWT {
id: string;
role: 'user' | 'admin';
}
}

// =================================================================
// FILE: src\types\translations.d.ts
// =================================================================

export type TranslationKey =

| "live"
| "matches"
| "yesterday"
| "today"
| "tomorrow"
| "standings"
| "news"
| "analytics"
| "global"
| "loading"
| "leagues"
| "teams"
| "transfers"
| "football"
| "tennis"
| "basketball"
| "rugby"
| "badminton"
| "cancel"
| "saving"
| "previous"
| "next"
| "page_of"
| "actions"

| "admin_login"
| "email"
| "password"
| "sign_in"
| "invalid_credentials"
| "register"
| "user"
| "role"
| "your_profile"
| "view_account_settings"

| "admin_dashboard"
| "welcome_to_admin_area"
| "manage_users"
| "view_and_edit_user_roles"
| "manage_matches"
| "update_match_details"
| "view_analytics"
| "check_site_traffic"
| "dashboard"
| "users"
| "settings"
| "admin_panel"
| "sign_out"

| "create_new_post"
| "edit_post"
| "manage_news"
| "new_post"
| "back_to_news_list"
| "loading_post_data"
| "failed_to_load_post_data"
| "save_post"
| "save_changes"
| "featured_image"
| "uploading"
| "upload_a_file"
| "or_drag_and_drop"
| "image_upload_formats"
| "image_title_tooltip"
| "image_title_placeholder"
| "image_alt_text_label"
| "image_alt_text_placeholder"
| "image_alt_text_description"
| "title"
| "content"
| "created_at"
| "seo_settings"
| "meta_title"
| "meta_title_placeholder"
| "meta_title_recommendation"
| "meta_description"
| "meta_description_placeholder"
| "meta_description_recommendation"
| "status"
| "draft"
| "published"

| "match_details"
| "view_match_details"
| "finished"
| "vote_and_see_poll"
| "hide_panel"
| "no_matches_for_day"
| "check_another_day"
| "match_not_found"
| "match_not_found_description"
| "team_not_found"
| "events"
| "lineups"
| "h2h"
| "statistics"
| "prediction"
| "head_to_head"
| "wins"
| "draws"
| "no_previous_encounters"
| "recent_result"
| "upcoming_match"
| "no_matches_live"
| "live_matches"
| "info"
| "fixtures"
| "top_scorers"
| "back_to_global_view"
| "standings_not_applicable_for_cups"
| "season"
| "competition_name"
| "country"
| "current_season"
| "season_coverage"
| "rank_short"
| "team"
| "matches_played_short"
| "wins_short"
| "draws_short"
| "losses_short"
| "goal_difference_short"
| "points_short"
| "league_standings"
| "select_league_for_standings"
| "next_league"
| "versus"

| "popular_leagues"
| "popular_cups"
| "popular_teams"

| "published_by_on"
| "share_this_article"

| "total_goals_today"
| "matches_today"
| "match_spotlight"
| "highest_scoring_match"

| "show_odds"
| "hide_odds"
| "exclusive_welcome_offer"
| "bonus_description"
| "claim_your_bonus"
| "gambling_disclaimer"
| "leagues_description"
| "teams_description"
| "news_description"
| "transfers_description";;

